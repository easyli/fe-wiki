const t={map:'[{"map":["0.0","24.32"],"简述":["0.1","1.1"],"方法":["0.2","9.7","49.2","50.2","72.1","72.2"],"对象操作":["0.3"],"转换":["0.4","1.12","9.4","9.5"],"克隆":["0.5"],"合并":["0.6"],"set":["1.0"],"实例的方法与属性":["1.2"],"add":["1.3"],"clear":["1.4"],"delete":["1.5"],"entries":["1.6","9.12"],"has":["1.7"],"values":["1.8","9.14"],"keys":["1.9","9.13"],"size":["1.10"],"使用":["1.11","32.9","41.5","69.3","69.7","69.8","78.14","78.17","82.9","84.2","85.2","88.3","107.3","119.0","120.3","127.2","133.1","145.1","148.3"],"去重":["1.13"],"并集":["1.14"],"交集":["1.15"],"差集":["1.16"],"es6":["2.0","3.1","4.0","5.0","7.0","8.0","9.0","59.4"],"创建类":["2.1"],"创建对象":["2.2","56.1"],"类的继承":["2.3"],"方法重写":["2.4"],"静态方法":["2.5"],"getter":["2.6"],"ecmascript":["3.0","3.2","3.3","3.4"],"引言":["4.1"],"模块化的意义":["4.2"],"避免命名冲突":["4.3"],"更好的代码组织和维护":["4.4"],"代码重用":["4.5"],"导出模块":["4.6"],"导出变量":["4.7"],"导出函数":["4.8"],"导出类":["4.9"],"导入模块":["4.10"],"导入单个变量":["4.11"],"导入函数":["4.12"],"导入类":["4.13"],"导入全部内容":["4.14"],"默认导出":["4.15"],"默认导出变量":["4.16"],"默认导出函数":["4.17"],"默认导出类":["4.18"],"同时使用命名导出和默认导出":["4.19"],"重命名导入和导出":["4.20"],"重命名导入":["4.21"],"重命名导出":["4.22"],"动态导入":["4.23"],"注意事项":["4.24","5.11","8.10","34.5","43.9","45.4","46.6","47.6","57.4"],"文件扩展名":["4.25"],"模块的类型":["4.26"],"严格模式":["4.27"],"导入和导出位置":["4.28"],"函数参数的默认值":["5.1"],"认识函数参数的默认值":["5.2"],"函数参数默认值的基本用法":["5.3"],"默认值的生效条件":["5.4"],"与解构赋值默认值结合使用":["5.5"],"参数默认值的位置":["5.6"],"函数参数默认值的应用":["5.7"],"rest":["5.8"],"前言":["5.9"],"函数参数":["5.10"],"剩余参数的应用":["5.12"],"小结":["5.13","30.20"],"箭头函数":["5.14"],"基本语法":["5.15"],"没有参数或多个参数":["5.16"],"箭头函数与":["5.17"],"使用注意事项":["5.18"],"函数参数的尾逗号":["5.19"],"catch":["5.20"],"js":["6.0","39.1","139.3","141.3"],"一":["6.1","24.5","30.1","93.1","94.1","102.9","111.1","111.6","130.2","157.1"],"增":["6.2","24.6"],"concat":["6.3","24.10"],"删":["6.4","24.11"],"改":["6.5","24.16"],"trim":["6.6"],"repeat":["6.7"],"padstart":["6.8"],"tolowercase":["6.9"],"查":["6.10","24.18"],"charat":["6.11"],"indexof":["6.12","24.19"],"startwith":["6.13"],"at":["6.14"],"二":["6.15","24.22","30.8","32.2","93.5","94.2","102.10","130.6","157.5"],"split":["6.16"],"三":["6.17","24.25","30.13","32.7","94.3","130.7","157.11"],"match":["6.18"],"search":["6.19"],"replace":["6.20"],"模板字符串":["7.1"],"字符串插值":["7.2"],"多行字符串":["7.3"],"嵌套模板字符串":["7.4"],"带标签的模板字符串":["7.5"],"属性的简洁表示法":["8.1"],"方括号语法":["8.2"],"方括号语法的用法":["8.3"],"方括号中可以放什么":["8.4"],"方括号语法和点语法的区别":["8.5"],"super":["8.6"],"对象的展开运算符":["8.7"],"展开对象":["8.8"],"合并对象":["8.9"],"空对象的展开":["8.11"],"非对象的展开":["8.12"],"字符串的展开":["8.13"],"数组的展开":["8.14"],"对象中对象属性的展开":["8.15"],"对象展开运算符的应用":["8.16"],"复制对象":["8.17"],"用户参数和默认参数":["8.18"],"对象的新增方法":["8.19"],"object":["8.20","8.21","8.22","30.9","52.2","56.6","56.7","56.8","56.9","56.10","56.11","56.12","56.13","56.14","56.15","56.16","56.17","56.18","56.19","56.20"],"array":["9.1","9.2","30.10","52.3"],"转换类数组":["9.3"],"转换字符串":["9.6"],"find":["9.8","24.21"],"findindex":["9.9"],"fill":["9.10"],"copywithin":["9.11"],"includes":["9.15","24.20"],"flat":["9.16"],"flatmap":["9.17"],"解构赋值":["10.0"],"数组解构赋值":["10.1"],"基本用法":["10.2","10.8"],"忽略不需要的元素":["10.3"],"给变量指定默认值":["10.4","10.10"],"剩余元素":["10.5"],"交换变量的值":["10.6"],"对象解构赋值":["10.7"],"重命名变量":["10.9"],"嵌套解构":["10.11"],"bom":["11.0","12.0","14.0","15.0","16.0","17.0"],"常见操作":["11.1"],"示例":["11.2","12.2","14.2","15.2","16.2","17.2","43.2","138.1","139.1","140.1","141.1","155.2","155.5","155.11"],"常见方法":["12.1"],"javascript":["13.0","19.0","24.0","25.0","26.0","27.0","28.0","29.0","30.0","31.0","32.0","34.0","35.0","36.0","37.0","41.0","42.0","42.5","44.0","45.0","46.0","47.0","52.0","52.1","55.0","57.0","58.0"],"常见属性和方法":["14.1","17.1"],"常见属性":["15.1","16.1"],"dom":["18.0","19.2","19.3","20.0","21.0","22.0","23.0"],"插入节点":["18.1"],"删除节点":["18.2"],"查找节点":["18.3"],"父子关系":["18.4"],"兄弟关系":["18.5"],"概念":["19.1"],"document":["19.4"],"事件":["20.1"],"事件监听":["20.2"],"事件移除":["20.3"],"事件类型":["20.4"],"鼠标事件":["20.5"],"键盘事件":["20.6"],"焦点事件":["20.7"],"文本框输入事件":["20.8"],"事件对象":["20.9"],"事件冒泡和事件捕获":["20.10"],"常见事件类型":["20.11"],"事件委托":["20.12"],"创建元素":["21.1"],"设置元素属性和内容":["21.2"],"操作元素的父子关系":["21.3"],"样式操作":["22.1"],"类操作":["22.2"],"获取元素":["23.1"],"修改元素":["23.2"],"创建":["24.1","41.1"],"获取数组元素":["24.2"],"数组方法":["24.4"],"push":["24.7"],"unshift":["24.8"],"splice":["24.9","24.14","24.17"],"pop":["24.12"],"shift":["24.13"],"slice":["24.15"],"reverse":["24.23"],"sort":["24.24"],"join":["24.26"],"四":["24.27","30.17","130.8"],"some":["24.28"],"every":["24.29"],"foreach":["24.30"],"filter":["24.31"],"if":["25.1","25.2"],"switch":["25.3"],"循环语句":["25.4"],"while":["25.5"],"do":["25.6"],"for":["25.7","25.8","25.9","25.10","25.11","31.6"],"break":["25.12","26.9"],"函数的使用":["26.1"],"声明函数":["26.2"],"调用函数":["26.3"],"函数的封装":["26.4"],"函数的参数":["26.5"],"形参和实参":["26.6"],"函数形参和实参个数不匹配问题":["26.7"],"函数的返回值":["26.8"],"匿名函数":["26.10"],"函数表达式":["26.11"],"立即执行函数":["26.12"],"输出语句":["27.1"],"引入方式":["27.2"],"内部方式":["27.3"],"外部方式":["27.4"],"注释":["27.5"],"单行注释":["27.6"],"多行注释":["27.7"],"概述":["28.1"],"生成方法":["28.2"],"键名":["28.3"],"对象的引用":["28.4"],"表达式还是语句":["28.5"],"属性的操作":["28.6"],"属性的读取":["28.7"],"属性的赋值":["28.8"],"属性的查看":["28.9"],"属性的删除":["28.10"],"属性是否存在":["28.11"],"属性的遍历":["28.12"],"with":["28.13"],"运算符":["29.1"],"算数运算符":["29.2"],"赋值运算符":["29.3"],"自增和自减":["29.4"],"自增运算符":["29.5"],"自减运算符":["29.6"],"比较运行符":["29.7"],"逻辑运算符":["29.8"],"逻辑与":["29.9"],"逻辑或":["29.10"],"逻辑非":["29.11"],"条件运算符":["29.12"],"运算符的优先级":["29.13"],"number":["30.2","52.5"],"undefined":["30.3"],"string":["30.4","52.4"],"null":["30.5","98.9"],"boolean":["30.6","52.6"],"symbol":["30.7"],"function":["30.11"],"其他引用类型":["30.12"],"转换为字符串":["30.14"],"转换为数字型":["30.15"],"转换为布尔型":["30.16"],"基本类型":["30.18","98.0"],"引用类型":["30.19"],"var":["31.1"],"let":["31.2"],"暂时性死区":["31.3"],"全局声明":["31.4"],"条件声明":["31.5"],"const":["31.7"],"函数声明提升与":["31.8"],"ajax简介":["32.1"],"封装":["32.8","53.2","108.0"],"轮播图":["33.0"],"代码实现":["33.1"],"创建闭包":["34.1"],"捕获外部变量":["34.2"],"保护数据":["34.3"],"实际用途":["34.4"],"浅拷贝":["35.1"],"深拷贝":["35.2"],"什么是函数柯里化":["36.1"],"函数柯里化的优点和应用场景":["36.2"],"实现函数柯里化的方法":["36.3"],"节流":["37.1"],"定义":["37.2","37.5"],"其他写法":["37.3"],"防抖":["37.4"],"立即执行":["37.6"],"用法":["37.7"],"数组去重":["38.0"],"event":["39.0"],"异步任务分为":["39.2"],"事件循环顺序":["39.3"],"例子":["39.5"],"数组扁平化":["40.0"],"处理":["41.2"],"promise":["41.3","41.4"],"原型":["42.1","57.1"],"原型链":["42.2","57.2"],"原型对象":["42.3"],"原型继承":["42.4"],"原型继承与传统继承的区别":["42.10"],"使用原型的最佳实践":["42.14"],"详解数组中的":["43.0"],"语法如下":["43.1"],"全局作用域":["44.1"],"局部作用域":["44.2"],"作用域链":["44.3"],"词法作用域":["44.4"],"设置":["45.1"],"获取":["45.2"],"删除":["45.3"],"存储数据":["46.1","47.1"],"获取数据":["46.2","47.2"],"更新数据":["46.3","47.3"],"删除数据":["46.4","47.4"],"清除所有数据":["46.5","47.5"],"内置对象":["48.0","49.0","50.0","51.0"],"date":["48.1","52.7"],"创建日期":["48.2"],"设置日期":["48.3"],"时间戳":["48.4"],"两个日期比较":["48.5"],"属性":["49.1","50.1","76.4","132.1"],"math":["49.3","49.4","49.5","49.6","49.7","49.8","49.9","49.10","49.11","49.12","49.13","49.14","52.8"],"什么是":["51.1","81.1","82.1","83.1","125.1","130.1"],"正则表达式基础语法":["51.2"],"字面量形式":["51.3"],"构造函数形式":["51.4"],"元字符":["51.5"],"正则表达式修饰符":["51.6"],"常用的正则表达式模式":["51.7"],"正则表达式方法":["51.8"],"正则表达式的分组和捕获":["51.9"],"正则表达式标志":["51.10"],"应用场景":["51.11"],"regexp":["52.9"],"继承":["53.0","53.1","99.2","103.3"],"多态":["53.3"],"类和构造函数":["54.0"],"构造函数":["54.1"],"类":["54.2","99.0"],"是什么":["55.1","144.1","153.1"],"特点":["55.2","144.2"],"实例对象与方法":["56.0"],"利用":["56.2"],"利用字面量创建对象":["56.3"],"利用构造函数创建对象":["56.4"],"常用方法":["56.5"],"使用原型的好处":["57.3"],"this":["59.0","59.2"],"执行期上下文":["59.1"],"es5":["59.3"],"改变函数内部的":["59.5"],"call":["59.6","59.7","59.8"],"apply":["59.9","59.10","59.11","59.12"],"bind":["59.13","59.14"],"关于作者":["60.0"],"算法":["61.0"],"demo2":["62.0"],"demo3":["63.0"],"该内容正在努力建设中":["64.0"],"css":["65.0","68.1","69.0","70.0","72.0"],"通配符选择器":["65.1"],"元素选择器":["65.2"],"类选择器":["65.3"],"id":["65.4"],"交集选择器":["65.5"],"并集选择器":["65.6"],"后代选择器":["65.7"],"子选择器":["65.8"],"兄弟选择器":["65.9"],"伪类选择器":["65.10"],"动态伪类选择器":["65.11"],"结构伪类选择器":["65.12"],"属性选择器":["65.13"],"伪元素选择器":["65.14"],"相关链接":["65.15"],"flex":["66.0","66.5"],"如何启用":["66.1"],"主轴和交叉轴":["66.2"],"主轴对齐与交叉轴对齐":["66.3"],"换行与排列":["66.4"],"弹性增长与缩小":["66.6"],"弹性基准值":["66.7"],"嵌套":["66.8"],"多行对齐":["66.9"],"实现常见布局需求":["66.10"],"grid":["67.0"],"选择器优先级":["68.0"],"行内元素":["69.1"],"块级元素":["69.2"],"使用定位":["69.4"],"定宽高":["69.5"],"不定宽高":["69.6"],"单行溢出隐藏":["70.1"],"多行溢出隐藏":["70.2","70.3"],"滚动条样式":["71.0"],"html5":["73.0","73.5","73.6","74.3"],"音视频频格式的":["73.1"],"音频格式":["73.2"],"视频格式":["73.3"],"音视频标签描述":["73.4"],"video":["73.7","73.11"],"音视频对象的方法":["73.8"],"代码实例":["73.9"],"audio":["73.10"],"html":["74.0","74.1","74.2","76.0"],"实践和进阶":["74.4"],"github":["74.5"],"折叠的写法":["74.6"],"常用标签及用法":["75.0"],"标题标签":["75.1"],"段落标签":["75.2"],"超链接标签":["75.3"],"图像标签":["75.4"],"无序列表和列表项标签":["75.5"],"有序列表和列表项标签":["75.6"],"容器标签":["75.7"],"内联容器标签":["75.8"],"表格标签":["75.9"],"换行标签":["75.10"],"输入标签":["75.11"],"按钮标签":["75.12"],"表单标签":["75.13"],"标题":["75.14"],"多媒体标签":["75.15"],"块级标签":["76.1"],"内联标签":["76.2"],"嵌套标签":["76.3"],"自定义标签":["76.5"],"input":["77.0","77.1"],"react":["78.0","79.0","79.2","79.21","79.22","80.0","81.0","82.0","82.2","83.0","84.0","85.0"],"简介":["78.1","79.1","86.1"],"jsx":["78.2","78.9","78.13","78.16","78.18","78.19","78.20","78.21","78.22"],"基本语法规则":["78.3"],"函数组件":["78.10"],"类组件":["78.11"],"组件的使用":["78.12"],"使用三元表达式":["78.15"],"核心概念":["79.7","88.1"],"方式一":["79.23"],"方式二":["79.24"],"生命周期阶段":["80.1"],"组件创建阶段":["80.2"],"constructor":["80.3"],"static":["80.4","80.8","99.8"],"render":["80.5"],"componentdidmount":["80.6"],"组件更新阶段":["80.7"],"shouldcomponentupdate":["80.9"],"getsnapshotbeforeupdate":["80.10"],"componentdidupdate":["80.11"],"组件销毁阶段":["80.12"],"componentwillunmount":["80.13"],"props":["81.2","81.6","81.12","81.13","81.14"],"默认":["81.15"],"安装":["82.8","86.3","102.7","107.2","125.2","127.1"],"嵌套路由":["82.13"],"路由参数":["82.14"],"路由链接和导航":["82.15"],"state":["83.2","83.6","83.7"],"什么是列表渲染":["84.1"],"条件渲染列表元素":["84.3"],"列表渲染和数据来源":["84.4"],"添加列表项":["84.5"],"列表渲染的最佳实践":["84.6"],"什么是条件渲染":["85.1"],"使用三元表达式实现条件渲染":["85.3"],"使用逻辑与":["85.4"],"使用条件运算符实现条件渲染":["85.5"],"条件渲染的最佳实践":["85.6"],"vue":["86.0","87.0","89.0"],"开始":["86.2"],"第一个":["86.4"],"数据绑定":["86.5"],"插值表达式":["86.6"],"指令":["86.7"],"条件渲染":["86.8"],"v":["86.9","86.10","86.12","92.17"],"列表渲染":["86.11"],"事件处理":["86.13"],"表单输入绑定":["86.14"],"组件":["86.15"],"定义组件":["86.16"],"使用组件":["86.17"],"生命周期钩子":["86.18"],"vuex":["88.0"],"优点":["88.2","102.5"],"mutations":["88.4"],"actions":["88.5"],"getters":["88.6"],"vue2响应式原理":["89.1"],"vue3响应式原理":["89.2"],"vue3":["90.0","91.0","92.0","95.0","111.0","139.4","141.4"],"setup":["90.1"],"ref":["90.2"],"ref全家桶":["90.3"],"isref":["90.4"],"shallowref":["90.5"],"triggerref":["90.6"],"customref":["90.7"],"reactive全家桶":["90.8"],"readonly":["90.9","99.7"],"shallowreactive":["90.10"],"to系列全家桶":["90.11"],"toref":["90.12"],"torefs":["90.13"],"toraw":["90.14"],"computed":["90.15"],"watch":["90.16"],"watcheffect":["90.21"],"清除副作用":["90.22"],"停止监听":["90.23"],"配置选项":["90.24"],"生命周期":["90.25"],"自定义指令":["90.26"],"vue3指令的钩子函数":["90.27"],"在setup内定义局部指令":["90.28"],"生命周期钩子参数详解":["90.29"],"案列":["90.30"],"自定义hooks":["90.31"],"通信方式":["91.1"],"注册":["92.1"],"全局组件":["92.2"],"批量注册全局组件":["92.4"],"局部组件":["92.5"],"父子组件传参":["92.6"],"插槽":["92.7"],"匿名插槽":["92.8"],"具名插槽":["92.9"],"作用域插槽":["92.10"],"动态插槽":["92.11"],"异步组件":["92.12"],"suspense":["92.13"],"teleport":["92.14"],"keep":["92.15"],"provide":["92.16"],"创建vue3项目":["93.0"],"安装或者升级":["93.2"],"保证":["93.3"],"创建项目":["93.4"],"认识vue3":["94.0"],"defineprops":["95.1"],"defineemits":["95.2"],"defineoptions":["95.3"],"defineslots":["95.4"],"前端导航":["97.0"],"常用工具":["97.2"],"字符串类型":["98.1","114.3"],"数字类型":["98.2"],"布尔类型":["98.3"],"数组":["98.4"],"元组":["98.5"],"枚举":["98.6"],"any":["98.7"],"void":["98.8"],"never":["98.10","98.11"],"联合类型":["98.12"],"交叉类型":["98.13"],"类型断言":["98.14"],"基本实例":["99.1"],"类的修饰符":["99.3"],"默认为":["99.4"],"理解":["99.5","99.6"],"interface":["99.9"],"存储器":["99.10"],"抽象类":["99.11"],"函数":["100.0"],"函数的类型":["100.1"],"可选参数":["100.2"],"默认参数":["100.3"],"剩余参数":["100.4"],"函数重载":["100.5"],"泛型":["101.0"],"函数泛型":["101.1"],"给函数加上类型":["101.2"],"使用泛型优化":["101.3"],"多个泛型参数的函数":["101.4"],"泛型接口":["101.5"],"泛型类":["101.6"],"泛型约束":["101.7"],"初识typescript":["102.0"],"ts是什么":["102.1"],"ts和js的关系":["102.2"],"ts和js的区别":["102.3"],"typescript的优缺点":["102.4"],"缺点":["102.6"],"监视编译和在node下运行typescript":["102.8"],"接口和对象类型":["103.0"],"对象的类型":["103.1"],"重名interface":["103.2"],"可选属性":["103.4"],"任意属性":["103.5"],"只读属性":["103.6"],"添加函数":["103.7"],"对象类型":["104.0"],"tsconfig":["105.0"],"类型推论":["106.0","106.1"],"类型别名":["106.2"],"axios":["107.0"],"什么是axios":["107.1"],"拦截器":["107.4"],"错误处理":["107.5"],"相关文章":["108.7"],"git基本命令使用":["109.0"],"账户配置":["109.1"],"本地基本操作":["109.2"],"初始化本地库":["109.3"],"查看状态":["109.4"],"添加暂存区":["109.5"],"提交本地库":["109.6"],"比较差异":["109.7"],"查看日志信息":["109.8"],"分支命令":["109.9"],"创建分支":["109.10"],"查看本地分支":["109.11"],"删除分支":["109.12"],"切换分支":["109.13"],"合并分支":["109.14"],"版本穿梭与回滚":["109.15"],"修改":["109.16"],"远程仓库交互":["109.17"],"git":["109.18","109.19","109.20","109.21"],"git安装":["110.0"],"tortoisegit安装":["110.7"],"nginx":["112.0"],"nginx部署项目":["112.1"],"mysql":["113.0","114.0","117.0"],"管理数据库和表的命令":["113.1"],"数据操作命令":["113.2"],"授权和权限管理命令":["113.3"],"整数类型":["114.1"],"浮点数类型":["114.2"],"日期和时间类型":["114.4"],"其他常用类型":["114.5"],"数据库概述":["115.0"],"mysql介绍":["115.1"],"安装mysql":["116.0"],"express":["118.0","118.1","118.4","118.5","123.11","123.14"],"基本使用":["118.2"],"托管静态资源":["118.3"],"全局中间件":["118.6"],"局部中间件":["118.7"],"中间件分类":["118.8"],"cors":["118.9","118.10","118.11","118.12","118.13"],"简单请求":["118.14"],"预检请求":["118.15"],"nodejs":["120.0","120.2","122.4"],"初识":["120.1","144.0","154.0"],"nodejs内置模块":["121.0"],"fs":["121.1"],"读取文件":["121.2"],"简单文件读取":["121.3"],"流式文件读取":["121.4"],"写入文件":["121.5"],"简单文件写入":["121.6"],"流式文件写入":["121.7"],"buffer":["121.8"],"路径动态拼接问题":["121.9"],"其它操作":["121.10"],"path":["121.11"],"路径拼接":["121.12"],"获取路径中文件名":["121.13"],"获取路径中文件扩展名":["121.14"],"http":["121.15"],"创建基本":["121.16"],"实现简陋路由效果":["121.17"],"模块化":["122.0"],"基本概念":["122.1"],"什么是模块化":["122.2"],"模块化的好处":["122.3"],"node":["122.5","122.6","123.1"],"模块作用域的成员":["122.7"],"commonjs":["122.8"],"模块加载机制":["122.9"],"内置模块加载":["122.10"],"自定义模块加载":["122.11"],"第三方模块加载":["122.12"],"目录作为模块加载":["122.13"],"npm":["122.14","122.16","124.0","125.0"],"包":["122.15"],"通过切换源解决":["122.17"],"开发包":["122.18"],"模块的加载机制":["122.19"],"内置模块的加载机制":["122.20"],"自定义模块的加载机制":["122.21"],"第三方模块的加载机制":["122.22"],"目录作为模块":["122.23"],"数据库和身份认证":["123.0"],"配置":["123.2"],"操作":["123.3"],"web":["123.4"],"服务端渲染":["123.5"],"前后端分离":["123.6"],"如何选择":["123.7"],"身份认证":["123.8"],"session":["123.9","123.10"],"jwt":["123.12","123.13"],"常用命令":["125.3"],"package":["125.4"],"使用依赖项":["125.5"],"开发和发布包":["125.6"],"发布包到":["126.0"],"步骤":["126.1","126.2","126.3","126.4","126.5","126.6","126.7"],"yarn":["127.0"],"创建uniapp项目":["128.0"],"使用hbuilder":["128.1"],"使用命令行创建":["128.2"],"uniapp":["129.0"],"初始":["130.0"],"canvas":["131.0","132.0","133.0","134.0","135.0","136.0","137.0"],"属性方法":["133.2"],"绘制图形":["136.1"],"绘制矩形":["136.2"],"绘制圆弧":["136.3","150.4"],"绘制线段":["136.4","150.5"],"绘制图像":["136.5"],"绘制文本":["136.6"],"绘制贝塞尔二次曲线":["137.1"],"绘制贝塞尔三次曲线":["137.2"],"刮刮乐":["138.0"],"代码":["138.2","139.2","140.2","141.2","147.1","151.2","155.3","155.9","155.12","156.5"],"时钟":["139.0"],"梅花特效":["140.0"],"画板":["141.0"],"echarts":["142.0"],"pixijs":["143.0","145.0","146.0","148.0","149.0","150.0","152.0"],"为精灵添加事件":["143.1"],"为图形添加事件":["143.2"],"用法示例":["144.7"],"graphics":["145.2"],"添加文字":["146.1"],"使用文字作为精灵的遮罩":["146.2"],"波纹涟漪效果":["147.0"],"创建应用":["148.1"],"添加滤镜":["148.2"],"绘制椭圆":["150.1"],"绘制多边形":["150.2"],"创建圆角矩形":["150.3"],"谷歌恐龙小游戏":["151.0"],"素材图片":["151.1"],"单次添加资源":["152.1"],"一次添加多个资源":["152.2"],"svg":["153.0"],"基本图形":["153.2"],"线条":["153.3"],"矩形":["153.4"],"圆形":["153.5"],"椭圆":["153.6"],"多边形":["153.7"],"折线":["153.8"],"路径":["153.9"],"渲染场景和物体":["155.0"],"渲染第一个场景和物体":["155.1"],"轨道控制器查看物体":["155.4"],"导入轨道控制器":["155.6"],"创建轨道控制器":["155.7"],"每一帧根据控制器更新画面":["155.8"],"坐标轴辅助器":["155.10"],"物体的缩放":["156.0"],"缩放":["156.1"],"位移":["156.2"],"旋转":["156.3"],"效果":["156.4"],"vitepress":["157.0"],"初始化项目":["157.2"],"npx":["157.3"],"本地运行":["157.4"],"目录结构":["157.6"],"配置导航栏部分":["157.9"],"配置侧边栏部分":["157.10"]},{"0":["5.12","24.9","30.15","30.16","31.6","48.1","72.1","90.1","114.1","134.1","139.3"],"1":["0.2","1.15","3.4","5.5","5.18","8.5","8.21","9.11","9.16","10.2","24.28","25.1","28.3","28.10","28.12","28.13","29.2","29.5","29.6","30.14","32.3","34.4","36.4","37.3","37.7","38.1","39.3","40.1","42.6","42.11","42.15","43.3","43.9","48.1","50.1","50.2","57.3","59.3","59.8","66.10","67.1","67.2","67.3","67.4","67.6","67.18","67.22","67.27","67.30","68.1","70.3","72.1","74.6","78.4","79.3","79.8","80.1","81.3","81.7","82.3","82.10","83.3","84.6","85.6","87.1","88.1","88.3","90.1","90.17","91.2","91.4","93.6","108.1","109.1","109.7","109.8","109.14","109.15","109.16","109.18","109.19","109.21","110.1","111.2","111.3","111.4","111.5","111.7","111.8","111.11","112.1","117.1","118.8","119.1","122.18","123.2","123.3","123.11","123.14","126.1","126.5","130.3","130.4","130.5","131.1","134.1","144.3","149.1","153.1","157.7"],"2":["0.2","3.4","8.21","9.11","9.16","25.1","28.12","28.13","29.2","32.4","36.5","38.2","39.3","40.2","42.7","42.12","42.16","43.3","43.4","50.2","67.3","67.5","67.6","67.7","67.8","67.9","67.10","67.11","67.12","67.13","67.14","67.15","67.16","67.19","67.23","67.28","72.2","78.5","79.4","79.9","81.4","81.8","82.4","82.11","83.4","87.2","88.3","89.1","89.2","90.18","91.3","91.5","93.7","108.2","110.2","111.4","111.8","111.9","111.10","111.11","111.12","117.2","118.8","119.2","122.18","123.3","123.11","123.14","126.2","130.4","131.2","134.2","144.4","149.2","157.8"],"3":["0.2","3.4","8.21","28.3","28.12","32.5","36.6","38.3","40.3","42.8","42.13","42.17","43.3","43.5","67.4","67.8","67.17","67.18","67.19","67.20","67.24","78.6","79.5","79.10","81.5","81.9","82.5","82.12","83.5","87.3","89.2","90.19","91.6","95.0","108.3","110.3","114.2","117.3","119.3","126.3","130.5","131.3","134.3","144.5","149.3"],"4":["32.6","38.4","40.4","42.9","42.18","43.6","67.9","67.21","67.22","67.23","67.24","67.25","67.33","78.7","79.6","79.11","81.10","82.6","87.4","90.20","91.7","108.4","110.4","117.4","119.4","126.4","131.4","134.4","144.6","149.4"],"5":["5.5","38.5","43.3","43.7","67.10","67.26","67.27","67.28","78.8","79.12","81.11","82.7","87.5","91.8","108.5","110.5","111.9","117.5","119.5","119.6","126.5","131.5"],"6":["38.6","43.8","67.11","67.29","67.30","67.31","67.32","67.33","79.13","87.6","91.9","108.6","110.6","111.10","117.6","119.6","126.6"],"7":["67.12","79.14","87.7","91.10","111.11","117.7","119.6","126.7"],"8":["67.13","79.15","87.8","91.11","111.12","117.8"],"9":["67.14","79.16","87.9","91.12","119.6"],"10":["25.6","67.15","79.17","87.10"],"11":["67.16","79.18","87.12"],"12":["79.19"],"13":["79.20"],"14":["152.1"],"15":["152.2"],"18":["5.7"],"19":["152.1"],"26":["152.2"],"28":["59.8"],"31":["48.1"],"50":["136.3"],"100":["31.1","136.4"],"123":["28.5","61.1"],"127":["114.1"],"128":["114.1"],"200":["136.3","137.1"],"300":["136.3","137.1","139.3"],"400":["138.2","139.3"],"404":["112.0"],"500":["37.3"],"600":["133.1","138.2","139.3"],"800":["139.3"],"1970":["48.4"],"1997":["3.4"],"1998":["3.4"],"2013":["111.6"],"2050":["48.3"],"12345":["107.5"],"数据结构":["0.0","1.0"],"map":["0.1","0.2","0.6","9.4","25.10","38.6","78.17","84.2","84.3","84.6"],"在":["0.2","1.3","4.6","5.10","26.0","35.2","36.3","37.0","51.2","53.2","53.3","54.0","54.1","54.2","57.1","59.3","67.4","78.4","78.5","78.18","80.3","80.9","80.11","80.13","82.10","83.1","83.3","83.6","83.7","84.2","84.3","84.4","84.5","85.1","85.2","88.1","90.0","90.31","91.2","91.6","91.8","92.2","92.13","100.4","111.10","111.12","157.1","157.7","157.9"],"es6":["0.2","2.3","4.23","5.14","7.1","8.1","8.6","10.0","28.3","42.8","54.2","105.0"],"中":["0.2","5.10","35.2","37.0","53.2","53.3","54.0","57.1","78.18","80.3","80.9","80.11","80.13","83.1","83.3","83.6","83.7","84.2","84.3","84.4","84.5","85.2","88.1","92.13"],"数据结构提供了以下常用的方法":["0.2"],"set":["0.2","1.1","1.3","1.4","1.6","1.8","1.10","1.11","1.12","1.15","2.6","9.5","9.15","25.10","38.1"],"key":["0.2","84.6"],"value":["0.2","1.3","1.5","1.7","50.1","90.2","90.5","90.29"],"向":["0.2"],"中添加键值对":["0.2"],"如果键已存在":["0.2"],"则更新对应的值":["0.2"],"get":["0.2","2.6","90.7","99.10","107.3","107.5","108.5","118.8","118.14","118.15"],"获取指定键对应的值":["0.2"],"如果键不存在则返回":["0.2"],"undefined":["0.2","5.5","31.1","98.9"],"has":["0.2"],"js":["0.4","0.5","0.6","1.12","1.13","1.14","1.15","1.16","2.4","2.6","4.16","4.17","4.18","4.19","4.21","4.22","5.5","5.6","5.10","5.15","5.16","6.3","6.13","8.1","8.6","8.21","9.3","9.4","9.5","9.6","9.9","9.10","9.12","9.16","11.2","15.2","16.2","17.2","20.6","20.7","21.3","22.1","22.2","24.15","24.21","24.24","24.32","25.2","25.3","25.5","25.6","26.3","26.8","26.11","26.12","29.11","30.2","30.14","30.18","30.19","31.1","31.2","31.3","31.6","31.8","32.8","32.9","37.3","37.6","37.7","38.0","38.2","38.6","39.3","40.0","40.4","42.2","43.1","43.3","43.4","43.5","43.6","43.7","43.8","48.5","56.3","56.6","56.8","56.18","59.8","79.22","79.23","82.11","82.13","82.14","82.15","86.0","86.3","86.4","86.7","90.4","90.6","90.17","100.1","107.3","107.5","108.3","108.4","108.5","108.6","111.8","118.2","118.4","118.6","118.7","118.12","119.4","120.1","121.3","121.4","121.6","121.7","121.12","121.14","121.16","121.17","122.5","122.6","122.12","122.15","123.3","131.4","134.2","134.3","135.0","136.2","136.3","136.4","136.5","137.1","137.2","143.1","143.2","144.7","145.2","146.1","146.2","148.1","148.2","149.1","149.3","150.1","150.2","150.3","150.4","150.5","152.1","152.2","154.0","155.6","155.7","155.8","156.1","156.2","156.3","157.9","157.10"],"var":["0.4","0.5","0.6","1.12","1.13","1.14","1.15","1.16","5.10","26.8","28.3","28.4","28.7","28.10","28.12","28.13","30.19","31.2","31.6","31.8","43.4","43.8","48.5","56.3","121.4","139.3"],"kvarray":["0.4"],"key1":["0.4"],"mymap1":["0.5"],"first":["0.6","65.12"],"new":["0.6","1.15","2.2","24.1","41.1","41.5","48.2","54.1","56.2","56.4","150.2","150.3","150.4","150.5","152.1","152.2"],"方法":["1.3","1.4","1.5","1.6","1.7","1.8","1.9","8.22","21.2","21.3","22.2","23.1","48.1","59.9","59.13","59.14","78.17","121.13"],"移除":["1.4"],"移除值为":["1.5"],"的元素":["1.5"],"并返回一个布尔值来表示是否移除成功":["1.5"],"返回一个新的迭代器对象":["1.6","1.8"],"该对象包含":["1.6","1.8"],"对象中的按插入顺序排列的所有元素的值的":["1.6"],"返回一个布尔值":["1.7"],"表示该值在":["1.7"],"属性":["1.10","23.2","73.7","78.5","84.6"],"返回":["1.10"],"array":["1.12","9.0","9.3","43.1"],"转":["1.12"],"myset":["1.12"],"a":["1.14","1.15","1.16","8.21","28.3","28.12","29.3","29.5","29.6","30.18","51.7","68.1","75.3","77.1","93.4","109.14"],"class":["2.0","2.1","18.4","42.8","54.2","65.5","70.2","81.10","81.11","99.1","99.6","99.8","101.6","141.4"],"使用":["2.1","2.5","2.6","4.7","4.8","4.9","4.11","4.12","4.13","4.14","4.20","7.2","10.5","21.1","21.2","21.3","22.1","22.2","23.1","23.2","24.2","27.6","27.7","30.15","30.16","31.6","35.2","38.1","38.3","38.4","38.5","38.6","40.1","40.3","51.4","66.6","69.1","69.6","72.2","79.24","84.6","86.13","86.14","87.2","87.5","99.6","103.4","108.6","117.6","117.7","121.13","122.21","123.14","125.5","130.6","130.7","133.0"],"关键字可以定义一个类":["2.1"],"通过类创建对象时":["2.2"],"需要使用":["2.2"],"的类支持继承":["2.3"],"可以使用":["2.3","11.1","28.9","45.1","45.2","46.1","46.2","46.4","46.5","46.6","47.1","47.2","47.4","47.5","47.6","66.3","66.9","83.4"],"子类可以重写继承自父类的方法":["2.4"],"static":["2.5","118.3"],"关键字定义静态方法":["2.5"],"静态方法属于类本身":["2.5"],"和":["2.6","8.22","25.11","25.12","26.3","30.16","65.14","75.5","75.6","75.14","75.15","79.22","80.4","86.9","88.4","90.2","90.7","98.5","98.9","99.8","99.10","109.14","124.0"],"setter":["2.6"],"关键字定义属性的读取器和设置器":["2.6"],"的介绍":["3.0"],"入门教程":["3.1"],"简介":["3.2","87.1"],"简称":["3.2","3.3"],"es":["3.2","3.3"],"与":["3.3","90.15","91.9","91.10","98.11","124.0","157.11"],"javascript":["3.3","4.1","4.2","5.3","5.7","5.12","5.20","7.2","7.3","7.5","8.3","8.4","8.9","8.13","8.14","8.15","8.17","8.18","10.2","10.3","10.5","10.8","10.9","10.11","12.2","14.2","19.4","20.12","27.1","27.2","27.4","28.2","28.3","28.4","28.5","28.7","28.8","28.10","28.12","28.13","29.13","30.10","34.2","34.3","35.2","36.1","36.4","36.5","36.6","39.1","41.5","42.1","42.2","42.3","42.4","42.10","44.1","44.3","44.4","50.1","51.8","51.10","51.11","53.2","53.3","54.0","54.1","54.2","55.1","57.1","78.1","79.1","79.9","85.2","85.3","85.4","86.16","98.4","98.6","100.4","102.3","154.0"],"的关系":["3.3"],"版本发布记录":["3.4"],"以下是每个":["3.4"],"版本的主要内容概述":["3.4"],"es1":["3.4"],"第一个":["3.4","90.29"],"版本":["3.4"],"定义了基本的语法和数据类型":["3.4"],"包括变量":["3.4"],"操作符":["3.4","103.4"],"函数和控制结构等":["3.4"],"es2":["3.4"],"对":["3.4"],"进行了一些修订":["3.4"],"没有引入大的新功能":["3.4"],"es3":["3.4","105.0"],"模块化":["4.0"],"随着前端技术的不断发展":["4.1"],"在传统的":["4.2"],"在模块中定义的变量":["4.3"],"模块化将代码分割成多个小块":["4.4"],"模块化使得代码可以被多个模块共享和复用":["4.5"],"export":["4.9","4.18","108.5"],"关键字导出一个类":["4.9"],"通过使用":["4.10"],"import":["4.11","4.12","4.13","82.11","82.13","82.14","82.15","84.5","90.4","90.6","111.10","145.2","146.1","148.1","152.1","152.2"],"关键字导入其他模块中的类":["4.13"],"as":["4.14","82.15","145.2","146.1","148.1","152.1","152.2"],"来导入整个模块的内容":["4.14"],"并将其绑定到一个变量上":["4.14"],"除了命名导出":["4.15"],"module2":["4.16","4.17","4.18"],"default":["4.18","105.0"],"一个模块可以同时有命名导出和默认导出":["4.19"],"module3":["4.19"],"module4":["4.21","4.22"],"除了静态导入外":["4.23"],"还引入了动态导入":["4.23"],"可以在代码运行时根据条件来导入模块":["4.23"],"在使用":["4.24","84.6","121.9"],"模块文件必须以":["4.25"],"在浏览器环境中":["4.26"],"模块中的代码在严格模式下运行":["4.27"],"导入和导出语句只能位于模块的顶层":["4.28"],"不能嵌套在其他块中":["4.28"],"tip":["4.28","20.2","43.9","56.4","68.1","74.5"],"函数的扩展":["5.0"],"调用函数的时候传参了":["5.2"],"之前的默认值实现方式":["5.3"],"const":["5.3","5.7","5.12","5.15","8.1","8.3","8.4","8.6","8.9","8.15","8.17","8.18","8.21","10.2","10.3","10.8","10.11","20.6","20.7","24.21","36.6","38.0","38.2","40.4","41.5","43.3","59.8","90.28","118.2","118.4","118.6","118.7","119.4","121.12","121.16","121.17","123.3","143.2","145.2","146.2","148.1","148.2","150.1","150.2","150.3","150.4","150.5","152.1","152.2"],"multiply":["5.3"],"x":["5.3","5.5","5.6","100.5","131.2"],"y":["5.3","5.5","100.5","131.2","157.2"],"不传参数":["5.4"],"参数默认值可以与解构赋值的默认值":["5.5"],"结合起来使用":["5.5"],"function":["5.5","5.6","7.5","24.24","26.2","26.8","32.8","34.2","34.3","36.4","36.5","37.3","37.6","37.7","41.5","42.2","42.4","59.8","78.15","100.1","100.3","100.5","101.4","107.5","108.5","139.3","155.8"],"foo":["5.5","8.1","8.6","28.3","28.5"],"console":["5.5","5.7","9.16","16.2","31.2","59.8"],"log":["5.5","5.7","9.16","16.2","31.2","59.8","109.8"],"通常情况下":["5.6"],"定义了默认值的参数":["5.6"],"应该是函数的尾参数":["5.6"],"因为这样比较容易看出来":["5.6"],"到底省略了哪些参数":["5.6"],"如果非尾部的参数设置默认值":["5.6"],"实际上这个参数是没法省略的":["5.6"],"例一":["5.6","28.13"],"f":["5.6"],"接收很多参数的时候":["5.7"],"普通时候":["5.7"],"loguser":["5.7","8.18"],"username":["5.7","8.18","108.6"],"zjr":["5.7"],"age":["5.7","8.3","8.4","59.8"],"sex":["5.7"],"male":["5.7"],"需要能够记住参数的顺序":["5.7"],"如果参数较多那么需要配合文档":["5.7"],"使用不方便":["5.7"],"jerry":["5.7"],"接收一个对象作为参数":["5.7"],"不需要记住参数的顺序":["5.7"],"参数":["5.8"],"剩余语法":["5.9"],"在讲解剩余参数前":["5.10"],"我们先来看看":["5.10"],"剩余参数在函数参数中都解决了哪些问题":["5.10"],"为什么会引入剩余参数的概念":["5.10"],"es5":["5.10","5.13","8.20","54.1","105.0"],"函数经常会传入不定参数":["5.10"],"在传入不定参数时":["5.10"],"的给出的解决方案是通过":["5.10"],"arguments":["5.10","5.12"],"对象来获取函数调用时传递的参数":["5.10"],"对象不是一个数组":["5.10"],"它是一个类数组对象":["5.10"],"所谓类数组对象":["5.10"],"就是指可以":["5.10"],"通过索引属性访问元素":["5.10"],"并且":["5.10"],"拥有":["5.10"],"length":["5.10","5.12","24.2"],"属性的对象":["5.10"],"一个简单的类数组对象是长这样的":["5.10"],"箭头函数的剩余参数":["5.11"],"箭头函数的参数部分即使只有一个剩余参数":["5.11"],"作为数组的应用":["5.12"],"add":["5.12","22.2","88.3","100.1","100.5","109.5"],"args":["5.12"],"let":["5.12","9.3","9.10","9.12","24.15","24.32","25.6","29.3","30.18","31.4","31.6","31.7","37.7","43.5","43.7","98.2","98.3","98.9","107.3","108.4","108.6","144.7"],"sum":["5.12"],"for":["5.12","9.12","28.12","38.2","86.12"],"i":["5.12","25.6","31.6"],"当然此处":["5.12"],"本节结合了":["5.13"],"箭头函数的基本语法如下":["5.15"],"functionname":["5.15"],"当箭头函数没有参数或有多个参数时":["5.16"],"需要使用括号来表示参数列表":["5.16"],"this":["5.17","8.6","59.3","59.4","59.5","59.8","59.11","59.14","83.4","83.5"],"箭头函数与传统函数有一个重要的区别":["5.17"],"箭头函数没有自己的":["5.17"],"它继承自外层作用域的":["5.17"],"在传统函数中":["5.17"],"的值是在函数调用时动态确定的":["5.17"],"取决于调用方式":["5.17"],"如果箭头函数只有一个参数":["5.18"],"可以省略参数列表的括号":["5.18"],"es2017":["5.19","105.0"],"允许函数的最后一个参数有尾逗号":["5.19"],"trailing":["5.19"],"comma":["5.19"],"此前":["5.19"],"函数定义和调用时":["5.19"],"命令的参数省略":["5.20"],"语言的":["5.20"],"try":["5.20"],"字符串的常用方法":["6.0"],"操作方法":["6.1","24.5"],"这里增的意思并不是说直接增添内容":["6.2"],"用于将一个或多个字符串拼接成一个新字符串":["6.3"],"这里的删的意思并不是说删除原字符串的内容":["6.4"],"而是创建字符串的一个副本":["6.4"],"再进行操作":["6.4"],"常见的有":["6.4"],"slice":["6.4"],"substr":["6.4"],"substring":["6.4"],"这里改的意思也不是改变原字符串":["6.5"],"trimleft":["6.6"],"trimright":["6.6"],"删除前":["6.6"],"接收一个整数参数":["6.7"],"padend":["6.8"],"复制字符串":["6.8"],"如果小于指定长度":["6.8"],"则在相应一边填充字符":["6.8"],"touppercase":["6.9"],"大小写转化":["6.9"],"返回给定索引位置的字符":["6.11"],"从字符串开头去搜索传入的字符串":["6.12"],"并返回位置":["6.12"],"includes":["6.13"],"从字符串中搜索传入的字符串":["6.13"],"并返回一个表示是否包含的布尔值":["6.13"],"方法接受一个整数作为参数":["6.14"],"转换方法":["6.15","24.25"],"把字符串按照指定的分割符":["6.16"],"拆分成数组中的每一项":["6.16"],"模板匹配方法":["6.17"],"接收一个参数":["6.18","6.19"],"可以是一个正则表达式字符串":["6.18","6.19"],"也可以是一个":["6.18","6.19"],"接收两个参数":["6.20"],"第一个参数为匹配的内容":["6.20"],"第二个参数为替换的元素":["6.20"],"字符串的扩展":["7.0"],"来在模板字符串中插入变量或表达式":["7.2"],"其中":["7.2"],"中的内容会被解析并替换为实际的值":["7.2"],"使用模板字符串可以很方便地创建多行文本":["7.3"],"不需要使用":["7.3"],"n":["7.3"],"来手动添加换行符":["7.3"],"模板字符串可以嵌套在其他模板字符串中":["7.4"],"使得字符串拼接更加灵活":["7.4"],"可以在模板字符串前添加一个标签函数":["7.5"],"这个标签函数将模板字符串的各个部分解析成多个参数":["7.5"],"使得我们可以对字符串进行自定义处理":["7.5"],"tagfunc":["7.5"],"strings":["7.5"],"对象的扩展":["8.0"],"允许在大括号里面":["8.1"],"直接写入变量和函数":["8.1"],"作为对象的属性和方法":["8.1"],"这样的书写更加简洁":["8.1"],"bar":["8.1","28.3"],"baz":["8.1"],"prop":["8.3","8.4","56.11","56.20"],"值":["8.4"],"可以得到值的表达式":["8.4"],"func":["8.4","36.4","36.5","37.7"],"age2":["8.4"],"点语法是方括号语法的特殊形式":["8.5"],"关键字":["8.6","31.1","54.2","59.0","106.2"],"我们知道":["8.6","59.12"],"关键字总是指向函数所在的当前对象":["8.6"],"又新增了另一个类似的关键字":["8.6"],"指向当前对象的原型对象":["8.6"],"proto":["8.6","56.5","56.7","57.1"],"hello":["8.6","28.3","28.7"],"obj":["8.6","28.3","28.7","28.10","28.12","28.13","56.8","56.11","56.12","56.13","56.14","56.16","56.18","56.19"],"world":["8.6","28.3","28.7"],"find":["8.6"],"对象不能直接展开":["8.8"],"必须在":["8.8"],"中展开":["8.8"],"apple":["8.9","8.15"],"color":["8.9","141.3"],"红色":["8.9"],"如果展开一个空对象":["8.11"],"如果展开的不是对象":["8.12"],"则会自动将其转为对象":["8.12"],"再将其属性罗列出来":["8.12"],"如果展开运算符后面是字符串":["8.13"],"它会自动转成一个类似数组的对象":["8.13"],"因此返回的不是空对象":["8.13"],"不会展开对象中的对象属性":["8.15"],"userparam":["8.18"],"defaultperam":["8.18"],"is":["8.20","56.15","120.1"],"比较两个值是否相等":["8.20"],"只有两个运算符":["8.20"],"相等运算符":["8.20"],"和严格相等运算符":["8.20"],"它们都有缺点":["8.20"],"前者会自动转换数据类型":["8.20"],"assign":["8.21","56.5","56.6"],"方法用于对象的合并":["8.21"],"将源对象":["8.21"],"source":["8.21","73.0","132.1"],"的所有可枚举属性":["8.21"],"复制到目标对象":["8.21"],"target":["8.21","56.5","56.6","105.0"],"source1":["8.21"],"b":["8.21","28.12"],"source2":["8.21"],"c":["8.21","28.12","111.6"],"注意":["8.21","28.11","43.9"],"keys":["8.22","28.10","56.16"],"values":["8.22","56.19"],"entries":["8.22","56.8"],"返回一个数组":["8.22"],"成员是参数对象自身的":["8.22"],"不含继承的":["8.22"],"所有可遍历":["8.22"],"enumerable":["8.22"],"属性的键名":["8.22"],"方法返回一个数组":["8.22"],"属性的键值":["8.22"],"of":["9.1","25.10","25.11"],"from":["9.2","9.3","82.13","82.14","82.15","84.5","123.3","145.2","146.1","146.2","148.1","152.1","152.2"],"将类数组对象或可迭代对象转化为数组":["9.2"],"arr":["9.3","38.2","43.4"],"查找":["9.8","9.15"],"则返回符合条件的第一个元素":["9.8"],"查找索引":["9.9"],"则返回符合条件的第一个元素的索引":["9.9"],"填充":["9.10"],"覆盖":["9.11"],"开始覆盖的位置索引":["9.11"],"遍历":["9.12"],"遍历键值对":["9.12"],"遍历键名":["9.13"],"遍历键值":["9.14"],"数组是否包含指定值":["9.15"],"嵌套数组转一维数":["9.16"],"先遍历元素":["9.17"],"再对数组执行":["9.17"],"flat":["9.17"],"引入了解构赋值":["10.0"],"数组解构赋值允许我们根据数组的顺序":["10.1"],"numbers":["10.2","43.3"],"我们可以使用逗号将不需要的元素跳过":["10.3"],"如果数组元素不足以匹配变量的个数":["10.4"],"可以为变量指定默认值":["10.4"],"避免出现":["10.4"],"语法可以将剩余的数组元素赋值给一个新数组":["10.5"],"使用解构赋值":["10.6"],"可以非常简洁地交换两个变量的值":["10.6"],"无需使用第三个变量":["10.6"],"对象解构赋值允许我们根据对象的属性名":["10.7"],"person":["10.8","10.11","56.3","99.1","99.6","103.7"],"我们可以通过在解构时为变量指定新的名称":["10.9"],"来实现重命名":["10.9"],"和数组解构一样":["10.10"],"可以为对象解构赋值时":["10.10"],"为变量指定默认值":["10.10"],"对象解构也支持嵌套解构":["10.11"],"从嵌套对象中提取值":["10.11"],"document":["11.0","11.1","19.1","20.6","45.1","139.3"],"获取元素":["11.1"],"获取具有id为":["11.2"],"myelement":["11.2"],"history":["12.0","12.1"],"bom":["13.0"],"browser":["13.0","111.8"],"object":["13.0","19.1","28.2","28.10","42.7","42.9","56.2","56.5","89.1","89.2","104.1"],"model":["13.0","19.1","91.7","92.17"],"是":["13.0","19.4","28.2","66.5","78.22","81.1","81.14","153.1"],"中用于与浏览器交互的一组对象和方法集合":["13.0"],"它提供了访问和控制浏览器窗口及其内容的功能":["13.0"],"location":["14.0","14.1"],"href":["14.1"],"当前窗口的完整":["14.1"],"获取当前窗口的url":["14.2"],"navigator":["15.0","15.1"],"获取用户代理字符串":["15.2"],"screen":["16.0","16.1"],"width":["16.1","69.6","70.1","71.0","72.1","133.1","138.2","152.1","152.2"],"获取屏幕的宽度":["16.2"],"window":["17.0","17.1","31.4","59.3","59.8","152.1","152.2"],"open":["17.1"],"打开一个新窗口":["17.2"],"节点":["18.0","18.1","18.2","19.3"],"在已有的":["18.1"],"dom":["18.1","18.2","18.3","19.0","19.1","20.2","20.11","79.4","79.22","80.6","91.4"],"节点中插入新的":["18.1"],"节点时":["18.1"],"需要关注两个关键因素":["18.1"],"首先要得到新的":["18.1"],"其次在哪个位置插入这个节点":["18.1"],"createelement":["18.1","21.1"],"删除现有的":["18.2"],"childnodes":["18.4"],"获取全部的子节点":["18.4"],"回车换行会被认为是空白文本节点":["18.4"],"children":["18.4"],"只获取元素类型节点":["18.4"],"html":["18.4","19.2","31.5","65.5","65.9","65.14","67.22","67.23","67.24","67.25","69.2","70.0","70.2","73.10","73.11","74.4","75.11","75.13","76.3","76.4","76.5","77.1","79.23","86.17","92.9","123.5","133.1","138.2","141.3","153.3","153.4","153.5","153.7","153.8","153.9","157.7"],"body":["18.4"],"button":["18.4","73.11","75.12","141.3"],"btn1":["18.4"],"所有的子节点":["18.4"],"获取":["18.4","84.4"],"ul":["18.4","75.5"],"previoussibling":["18.5"],"获取前一个节点":["18.5"],"以相对位置查找节点":["18.5"],"是一种用于表示和操作":["19.1"],"树":["19.2"],"doctype":["19.2","67.23","67.24","67.25"],"lang":["19.2","67.25"],"节点是文档树的组成部分":["19.3"],"每一个节点都是一个":["19.3"],"对象":["19.3","28.0","28.2","28.13","55.2","89.2","122.7","123.14","136.6"],"事件处理":["20.0","79.13"],"事件是编程语言中的术语":["20.1"],"结合":["20.2"],"使用事件时":["20.2"],"需要为":["20.2"],"对象添加事件监听":["20.2"],"当我们不再需要一个事件监听器时":["20.3"],"鼠标事件是指跟鼠标操作相关的事件":["20.5"],"如单击":["20.5"],"双击":["20.5"],"移动等":["20.5"],"事件名":["20.5"],"作用":["20.5","65.6"],"click":["20.5"],"当用户点击鼠标左键时触发":["20.5"],"dblclick":["20.5"],"input":["20.6","20.8","75.11","141.3"],"事件":["20.8","32.6","91.4"],"当用户在文本框中输入":["20.8"],"删除或修改文本时触发":["20.8"],"无论是键盘输入":["20.8"],"粘贴":["20.8"],"事件处理程序的第一个参数是事件对象":["20.9"],"event":["20.9","20.10","39.2"],"它包含有关事件的信息":["20.9"],"例如事件类型":["20.9"],"事件冒泡":["20.10"],"默认情况下":["20.10","66.2","66.4"],"事件会从触发它的元素向上冒泡到祖先元素":["20.10"],"你可以使用":["20.10","99.7"],"stoppropagation":["20.10"],"以下是一些常见的":["20.11"],"事件类型":["20.11"],"鼠标事件":["20.11"],"事件委托是一种利用事件冒泡原理来简化事件处理的技术":["20.12"],"通过将事件监听器绑定到一个父元素上":["20.12"],"然后利用事件冒泡机制":["20.12"],"从父元素中捕获和处理子元素触发的事件":["20.12"],"这样可以减少事件处理程序的数量":["20.12"],"并且可以动态地处理后续添加的子元素":["20.12"],"提高性能和代码的可维护性":["20.12"],"创建和操作元素":["21.0"],"设置元素的属性":["21.2"],"setattribute":["21.2"],"将新元素添加到父元素中":["21.3"],"appendchild":["21.3"],"样式和类操作":["22.0"],"修改元素的内联样式":["22.1"],"style":["22.1","73.11","74.5"],"对象来访问和修改元素的样式属性":["22.1"],"添加类名":["22.2"],"classlist":["22.2"],"属性的":["22.2"],"element":["22.2"],"获取和修改元素":["23.0"],"getelementbyid":["23.0","23.1","139.3"],"通过":["23.1","27.3","32.4","32.5","59.8","59.11","66.10","100.2","118.3","118.6","118.8"],"id":["23.1","133.1","138.2","141.3"],"修改元素的文本内容":["23.2"],"textcontent":["23.2"],"属性或":["23.2"],"innertext":["23.2"],"数组":["24.0"],"创建数组有两种方式":["24.1"],"利用":["24.1"],"数组的长度":["24.2"],"数组名":["24.2"],"可以访问数组元素的数量":["24.2"],"数组长度":["24.2"],"数组的索引":["24.2"],"索引":["24.2"],"下标":["24.2"],"下面前三种是对原数组产生影响的增添方法":["24.6"],"方法接收任意数量的参数":["24.7"],"在数组开头添加任意多个值":["24.8"],"传入三个参数":["24.9","24.17"],"分别是开始位置":["24.9","24.14","24.17"],"要删除的元素数量":["24.9"],"首先会创建一个当前数组的副本":["24.10"],"然后再把它的参数添加到副本末尾":["24.10"],"最后返回这个新构建的数组":["24.10"],"不会影响原始数组":["24.10","24.15"],"下面三种都会影响原数组":["24.11"],"方法用于删除数组的最后一项":["24.12"],"同时减少数组的":["24.12","24.13"],"方法用于删除数组的第一项":["24.13"],"传入两个参数":["24.14"],"删除元素的数量":["24.14"],"用于创建一个包含原有数组中一个或多个元素的新数组":["24.15"],"即修改原来数组的内容":["24.16"],"要删除元素的数量":["24.17"],"要插入的任意多个元素":["24.17"],"即查找元素":["24.18"],"返回要查找的元素在数组中的位置":["24.19","24.20"],"如果没找到则返回":["24.19"],"找到返回":["24.20"],"返回第一个匹配的元素":["24.21"],"排序方法":["24.22"],"顾名思义":["24.23"],"将数组元素方向反转":["24.23"],"方法接受一个比较函数":["24.24"],"用于判断哪个值应该排在前面":["24.24"],"compare":["24.24"],"value1":["24.24","56.15"],"value2":["24.24","56.15"],"方法接收一个参数":["24.26"],"即字符串分隔符":["24.26"],"迭代方法":["24.27"],"对数组每一项都运行传入的测试函数":["24.28","24.29"],"如果至少有":["24.28"],"个元素返回":["24.28"],"如果所有元素都返回":["24.29"],"true":["24.29","24.31","28.10","29.9","30.6","31.2","50.2","111.8","114.5"],"对数组每一项都运行传入的函数":["24.30","24.31","24.32"],"没有返回值":["24.30"],"函数返回":["24.31"],"的项会组成数组之后返回":["24.31"],"返回由每次函数调用的结果构成的数组":["24.32"],"流程控制":["25.0"],"语句":["25.1","25.2","25.3","25.5","28.13","78.14"],"流程控制语句可以用来改变程序执行的顺序":["25.1"],"条件判断语句":["25.1"],"else":["25.2","85.2","85.3","85.4","85.6"],"语法":["25.2","25.3"],"条件表达式":["25.2","25.5","29.12"],"条件表达式1":["25.2"],"通过循环语句可以使指定的代码反复执行":["25.4"],"while":["25.6"],"循环":["25.8","25.9","25.10","28.12","38.2"],"in":["25.9","25.11","28.11","28.12"],"用于迭代对象的属性":["25.9"],"通常是迭代对象的键":["25.9"],"属性名":["25.9"],"适用于对象":["25.9"],"用于迭代可迭代对象的值":["25.10"],"例如数组":["25.10"],"字符串":["25.10","30.15","123.14"],"的区别":["25.11"],"循环和":["25.11"],"continue":["25.12","26.9"],"用来终止":["25.12"],"switch":["25.12"],"和循环语句":["25.12"],"执行后":["25.12"],"当前的":["25.12"],"或循环会立刻停止":["25.12"],"函数":["26.0","49.14","59.3","98.8"],"是声明函数的关键字":["26.2"],"函数名":["26.3","26.8"],"函数使用分为两步":["26.3"],"声明函数":["26.3","26.8"],"在声明函数时":["26.6"],"可以在函数名称后面的小括号中添加一些参数":["26.6"],"这些参数被称为":["26.6"],"形参":["26.6"],"在调用该函数时":["26.6"],"参数个数":["26.7"],"说明":["26.7"],"实参个数等于形参个数":["26.7"],"输出正确结果":["26.7"],"实参个数多于形参个数":["26.7"],"只取到形参的个数":["26.7"],"实参个数少于形参个数":["26.7"],"有的时候":["26.8"],"我们会希望函数将值返回给调用者":["26.8"],"此时通过使用":["26.8"],"return":["26.8","26.9","36.5","41.5"],"语句就可以实现":["26.8"],"语法格式":["26.8","121.3","121.6"],"需要返回的值":["26.8"],"调用函数":["26.8","59.8"],"result":["26.8"],"函数可以分为具名函数和匿名函数":["26.10"],"基本语法":["27.0"],"是一种脚本语言":["27.0"],"以下是一个简单的":["27.1"],"程序不能独立运行":["27.2"],"script":["27.3"],"标签包裹":["27.3"],"一般将":["27.4"],"语言的核心概念":["28.2"],"也是最重要的数据类型":["28.2"],"对象的所有键名都是字符串":["28.3"],"又引入了":["28.3"],"symbol":["28.3","104.1"],"值也可以作为键名":["28.3"],"所以加不加引号都可以":["28.3"],"上面的代码也可以写成下面这样":["28.3"],"如果键名是数值":["28.3"],"会被自动转为字符串":["28.3"],"如果不同的变量名指向同一个对象":["28.4"],"那么它们都是这个对象的引用":["28.4"],"也就是说指向同一个内存地址":["28.4"],"修改其中一个变量":["28.4"],"会影响到其他所有变量":["28.4"],"o1":["28.4"],"o2":["28.4"],"对象采用大括号表示":["28.5"],"这导致了一个问题":["28.5"],"如果行首是一个大括号":["28.5"],"它到底是表达式还是语句":["28.5"],"读取对象的属性":["28.7"],"有两种方法":["28.7"],"一种是使用点运算符":["28.7"],"还有一种是使用方括号运算符":["28.7"],"p":["28.7","28.10","65.5","75.2"],"点运算符和方括号运算符":["28.8"],"不仅可以用来读取值":["28.8"],"还可以用来赋值":["28.8"],"查看一个对象本身的所有属性":["28.9"],"delete":["28.10"],"命令":["28.10","124.0","125.3"],"命令用于删除对象的属性":["28.10"],"删除成功后返回":["28.10"],"运算符":["28.11","29.0","29.2","85.5"],"运算符用于检查对象是否包含某个属性":["28.11"],"检查的是键名":["28.11"],"不是键值":["28.11"],"循环用来遍历一个对象的全部属性":["28.12"],"语句的格式如下":["28.13"],"它的作用是操作同一个对象的多个属性时":["28.13"],"提供一些书写的方便":["28.13"],"p1":["28.13"],"p2":["28.13"],"描述":["29.2","29.3","29.7","48.1","73.7","86.18"],"实例":["29.2","29.3","41.4"],"加":["29.2"],"运算符名称":["29.3","29.7"],"赋值":["29.3"],"使用后会使得原来的变量立刻增加":["29.5"],"自增分为前自增":["29.5"],"和后自增":["29.5"],"无论是":["29.5"],"使用后会使得原来的变量立刻减小":["29.6"],"自减分为前自减":["29.6"],"案列":["29.7"],"结果":["29.7","41.2"],"一假即假":["29.9"],"可以对两个值进行与运算":["29.9"],"当":["29.9","29.10","59.1","83.7"],"左右都为":["29.9"],"一真即真":["29.10"],"可以对两个值进行或运算":["29.10"],"左右有":["29.10"],"表达式":["29.12","78.7"],"各种运算符的优先级别":["29.13"],"operator":["29.13","85.3"],"数据类型":["30.0","90.8"],"基本类型":["30.1"],"数值最常见的整数类型格式则为十进制":["30.2"],"还可以设置八进制":["30.2"],"零开头":["30.2"],"十六进制":["30.2"],"0x":["30.2"],"开头":["30.2","122.22"],"类型只有一个值":["30.3"],"就是特殊值":["30.3"],"字符串可以使用双引号":["30.4"],"单引号":["30.4"],"或反引号":["30.4"],"类型同样只有一个值":["30.5"],"即特殊值":["30.5"],"布尔值":["30.6"],"类型有两个字面值":["30.6"],"符号":["30.7"],"是原始值":["30.7"],"且符号实例是唯一":["30.7"],"引用类型":["30.8"],"创建":["30.9","79.24","115.0","119.4","121.16"],"数组是一组有序的数据":["30.10"],"函数实际上是对象":["30.11"],"每个函数都是":["30.11"],"类型的实例":["30.11"],"而":["30.11"],"除了上述说的三种之外":["30.12"],"类型转换":["30.13"],"把数字转换为字符串型":["30.14"],"变量":["30.14","31.0"],"将其他的数据类型转换为数值":["30.15"],"number":["30.15","50.0","50.1","50.2","104.1"],"函数来将其他类型转换为数值":["30.15"],"转换的情况":["30.15","30.16"],"如果字符串是一个合法的数字":["30.15"],"则会自动转换为对应的数字":["30.15"],"如果字符串不是合法数字":["30.15"],"则转换为":["30.15"],"nan":["30.15","50.2"],"如果字符串是空串或纯空格的字符串":["30.15"],"boolean":["30.16","98.3","104.1","114.5"],"函数来将其他类型转换为布尔值":["30.16"],"数字":["30.16"],"存储区别":["30.17"],"obj1":["30.19","59.8"],"声明变量时不同的内存地址分配":["30.20"],"msg":["31.1"],"默认":["31.1","81.4","132.1"],"声明后可以改变类型":["31.1"],"但不推荐":["31.1"],"hi":["31.1"],"声明":["31.2","31.6","31.7"],"声明的范围是块作用域":["31.2"],"if":["31.2","78.14","85.2","85.3","85.4","85.6","86.9"],"name":["31.2","31.3","56.3","99.1","107.3","113.1","113.2","113.3","141.3"],"zhangsan":["31.2","59.8"],"在全局作用域中声明的变量不会成为":["31.4"],"对象的属性":["31.4"],"循环中的":["31.6"],"时变量会渗透到外面":["31.6"],"的行为与":["31.7"],"基本相同":["31.7"],"声明提升":["31.8"],"ajax":["32.0","32.1","32.2","32.8","32.9","41.5","123.5","123.6"],"全称":["32.1"],"async":["32.1"],"实现过程":["32.2"],"实现":["32.2","139.3","139.4","141.3","141.4"],"与服务器建立连接":["32.4"],"xmlhttprequest":["32.4","32.5","32.6","32.8","41.5"],"给服务端发送数据":["32.5"],"绑定":["32.6"],"onreadystatechange":["32.6"],"事件用于监听服务器端的通信状态":["32.6"],"主要监听的属性为":["32.6"],"readystate":["32.6"],"关于":["32.6","108.7"],"封装与使用":["32.7"],"通过上面对":["32.8"],"对象的了解":["32.8"],"下面来封装一个简单的":["32.8"],"请求":["32.8","107.3"],"封装一个ajax请求":["32.8"],"options":["32.8","95.3","121.3","121.6"],"使用方式如下":["32.9"],"code":["33.1","155.3","155.9","155.12","156.5"],"闭包":["34.0"],"要创建一个闭包":["34.1"],"通常需要在一个函数内部定义另一个函数":["34.1"],"并将其返回":["34.1"],"返回的函数就是闭包":["34.1"],"闭包可以捕获并访问其外部函数的变量":["34.2"],"即使外部函数已经执行完毕":["34.2"],"这使得闭包可以在不同的上下文中使用和保留外部变量的状态":["34.2"],"通过使用闭包":["34.3","34.4"],"可以创建私有变量":["34.3"],"这些变量无法从外部访问":["34.3"],"只能通过内部函数提供的公共接口访问和修改":["34.3"],"createperson":["34.3"],"封装私有变量和方法":["34.4"],"可以创建私有变量和方法":["34.4"],"将其封装在函数内部":["34.4"],"只暴露公共接口给外部":["34.4"],"闭包会导致内存占用增加":["34.5"],"因为外部函数的变量和作用域在闭包中被保留":["34.5"],"即使外部函数执行完毕也不会被释放":["34.5"],"深浅拷贝":["35.0"],"浅拷贝是创建一个新对象":["35.1"],"新对象的属性值是原始对象属性值的引用":["35.1"],"也就是说":["35.1"],"新对象和原始对象共享相同的引用类型属性":["35.1"],"深拷贝是创建一个新对象":["35.2"],"新对象的属性值与原始对象的属性值完全独立":["35.2"],"二者互不影响":["35.2"],"由于对象的属性可能是引用类型":["35.2"],"所以需要递归复制对象的所有属性":["35.2"],"包括嵌套的对象和数组":["35.2"],"以下是一些常用的实现深拷贝的方法":["35.2"],"json":["35.2","46.6","47.6","105.0","111.7","119.6","123.14","125.4"],"parse":["35.2","111.8"],"函数柯里化":["36.0"],"函数柯里化是一种将多个参数的函数转化为一系列接受单个参数的函数的过程":["36.1"],"通过函数柯里化":["36.1"],"可以将原始函数分解为多个嵌套的函数":["36.1"],"每个函数都接收一个参数":["36.1"],"并返回一个新函数等待接收下一个参数":["36.1"],"最终":["36.1"],"所有参数都被传递完毕后":["36.1"],"原始函数会被调用执行":["36.1"],"函数柯里化有助于创建可复用和可组合的函数":["36.1"],"提供更灵活和精确的函数调用方式":["36.1"],"参数复用和定制":["36.2"],"通过柯里化":["36.2"],"可以将函数的一部分参数预先设置":["36.2"],"然后在后续调用时只传递剩余的参数":["36.2"],"这使得函数的复用和定制变得更加灵活和方便":["36.2"],"延迟执行":["36.2"],"使用闭包递归":["36.4"],"curry":["36.4","36.5"],"使用递归和占位符":["36.5"],"使用箭头函数和递归":["36.6"],"节流和防抖":["37.0"],"节流函数适用事件":["37.1"],"节流是一种控制函数执行频率的技术":["37.2"],"当一个函数被频繁调用时":["37.2","37.5"],"节流可以限制函数在一定时间间隔内只执行一次":["37.2"],"节流的实现思路是设置一个定时器":["37.2"],"在函数被调用时先检查定时器是否存在":["37.2"],"如果定时器不存在":["37.2"],"使用时间戳写法":["37.3"],"事件会立即执行":["37.3"],"停止触发后没有办法再次执行":["37.3"],"throttled1":["37.3"],"fn":["37.3"],"delay":["37.3","37.7"],"防抖函数适用事件":["37.4"],"防抖是一种控制函数执行频率的技术":["37.5"],"防抖可以延迟函数的执行":["37.5"],"直到某个连续的时间段内没有新的函数调用发生":["37.5"],"防抖如果需要立即执行":["37.6"],"可加入第三个参数用于判断":["37.6"],"实现如下":["37.6"],"debounce":["37.6","37.7"],"导入或定义防抖":["37.7"],"节流函数":["37.7"],"unique":["38.2"],"indexof":["38.3"],"include":["38.4"],"loop":["39.0"],"事件执行机制的过程":["39.1"],"是一门单线程语言":["39.1"],"宏任务和微任务":["39.2"],"同步和异步分别进入到不同的执行场所":["39.2"],"同步进入到主线程":["39.2"],"异步的进入到任务队列":["39.2"],"在执行上下文栈的同步任务执行完后":["39.3"],"首先会去执行微任务队列":["39.3"],"按照队列先进先出的原则":["39.3"],"一次执行完所有":["39.3"],"数组扁平化是指将一个多维数组变为一个一维数组":["40.0"],"利用正则":["40.2"],"reduce":["40.3","43.0","43.3","43.9"],"函数递归":["40.4"],"promise":["41.0","41.1","41.2","41.5"],"是一种异步编程的解决方案":["41.0"],"它可以避免回调地狱":["41.0"],"使代码更加简洁易读":["41.0"],"可以通过":["41.1","48.2"],"通过调用":["41.2"],"链式调用":["41.3"],"的一个重要特性是可以通过链式调用来串联多个异步操作":["41.3"],"通过在":["41.3"],"then":["41.3"],"all":["41.4"],"方法接收一个":["41.4"],"实例数组":["41.4"],"返回一个新的":["41.4"],"该新实例在数组中的所有":["41.4"],"封装一个":["41.5"],"下面是一个使用":["41.5"],"封装的基本":["41.5"],"请求的示例":["41.5"],"url":["41.5","82.14","118.12"],"method":["41.5"],"data":["41.5","108.4","121.6"],"resolve":["41.5"],"reject":["41.5"],"xhr":["41.5"],"原型":["42.0"],"原型是":["42.1"],"原型链是一个对象和它的原型对象之间的连接":["42.2"],"当你访问一个对象的属性或方法时":["42.2"],"会首先查找该对象本身是否有这个属性或方法":["42.2"],"如果没有":["42.2"],"它会沿着原型链向上查找":["42.2"],"直到找到为止":["42.2","57.2"],"每个":["42.3"],"对象都有一个关联的原型对象":["42.3"],"原型继承是":["42.4"],"中对象之间共享属性和方法的一种方式":["42.4"],"当一个对象继承了另一个对象的原型时":["42.4"],"它可以访问该原型对象上的属性和方法":["42.4"],"让我们再次看一个例子":["42.4"],"animal":["42.4"],"中的原型继承方式":["42.5"],"构造函数和原型链":["42.6"],"这是最常见的原型继承方式":["42.6"],"它使用构造函数来创建对象属性":["42.6"],"同时使用原型链来共享方法":["42.6"],"在前面的例子中":["42.6"],"create":["42.7","56.5","56.7","93.4","113.1"],"类继承":["42.8"],"引入了类":["42.8"],"的概念":["42.8"],"setprototypeof":["42.9"],"在使用原型时":["42.14"],"计算数组累积结果":["43.3"],"演示如何使用":["43.3"],"方法来计算数组中所有元素的和":["43.3"],"计算数组中每个元素出现的次数":["43.4"],"one":["43.4"],"two":["43.4"],"three":["43.4","154.0"],"six":["43.4"],"four":["43.4"],"five":["43.4"],"数组去重":["43.5"],"数组扁平化":["43.6","43.7"],"二维转一维":["43.6"],"多维转一维":["43.7"],"对象属性求和":["43.8"],"方法适用于对数组的每个元素执行同一个累积操作":["43.9"],"作用域":["44.0"],"全局作用域是指在代码的任何地方都可访问的变量和函数":["44.1"],"在全局作用域中声明的变量和函数可以被代码中的任何地方访问":["44.1"],"局部作用域是指在特定代码块":["44.2"],"如函数":["44.2"],"循环或条件语句":["44.2"],"内部声明的变量和函数":["44.2"],"这些变量和函数只能在其声明的代码块内部访问":["44.2"],"作用域链是指":["44.3"],"引擎在查找变量时的嵌套作用域链条":["44.3"],"当访问一个变量时":["44.3"],"引擎首先在当前作用域的变量对象中查找":["44.3"],"中的作用域是通过代码的结构和位置来确定的":["44.4"],"而不是通过运行时的状态":["44.4"],"这被称为词法作用域":["44.4"],"函数在定义时就确定了自己的作用域":["44.4"],"而不是在调用时":["44.4"],"cookie":["45.0","45.1","45.2","45.3","45.4","123.13"],"属性来设置":["45.1"],"可以通过将":["45.3"],"每个域名下的":["45.4"],"是相互独立的":["45.4"],"不同域名之间的":["45.4"],"是隔离的":["45.4"],"localstorage":["46.0","46.1","46.2","46.6"],"setitem":["46.1","47.1"],"可以通过重新设置相同的键来更新":["46.3","47.3"],"存储的值必须是字符串类型":["46.6","47.6"],"如果需要存储其他数据类型":["46.6","47.6"],"如对象或数组":["46.6","47.6"],"stringify":["46.6","47.6"],"方法将其转换为字符串存储":["46.6","47.6"],"然后在需要时使用":["46.6","47.6"],"sessionstorage":["47.0","47.1","47.2","47.6"],"date":["48.0","48.2","114.4"],"getdate":["48.1"],"获取日期":["48.1"],"月份中的日期":["48.1"],"返回值为":["48.1"],"到":["48.1","75.1","114.1"],"之间的整数":["48.1"],"getday":["48.1"],"获取星期几":["48.1"],"表示星期日":["48.1"],"对象用于处理日期和时间":["48.2"],"通过使用针对日期对象的方法":["48.3"],"我们可以很容易地对日期进行操作":["48.3"],"在下面的例子中":["48.3"],"我们为日期对象设置了一个特定的日期":["48.3"],"时间戳是指":["48.4"],"年":["48.4"],"01":["48.4"],"月":["48.4"],"math":["49.0","49.1","59.12","139.3"],"abs":["49.3"],"random":["49.4"],"ceil":["49.5"],"floor":["49.6"],"round":["49.7"],"min":["49.8"],"max":["49.9","50.1","59.12"],"pow":["49.10"],"sqrt":["49.11"],"sin":["49.12"],"cos":["49.13"],"trunc":["49.14"],"返回的是一个数的整数部分":["49.14"],"表示":["50.1"],"中能表示的最大数值":["50.1"],"isnan":["50.2"],"num":["50.2"],"判断给定的值是否为":["50.2"],"非数值":["50.2"],"如果是":["50.2"],"则返回":["50.2"],"否则返回":["50.2"],"false":["50.2"],"isfinite":["50.2"],"判断给定的值是否为有限数值":["50.2"],"如果是有限数值":["50.2"],"即不是":["50.2"],"infinity":["50.2"],"或":["50.2","88.3","114.1","118.8","122.22"],"regexp":["51.0","51.1"],"正则表达式":["51.1"],"是一种用于匹配和操作字符串模式的强大工具":["51.1"],"它是一种模式匹配的语法":["51.1"],"使用斜杠":["51.3"],"匹配除换行符之外的任何单个字符":["51.5"],"修饰符用于在正则表达式中添加额外的规则":["51.6"],"影响匹配的行为":["51.6"],"以下是一些常用的正则表达式模式示例":["51.7"],"匹配字母或数字字符":["51.7"],"za":["51.7"],"的字符串对象提供了一些与正则表达式相关的方法来执行匹配":["51.8"],"搜索和替换操作":["51.8"],"以下是一些常用的方法":["51.8"],"match":["51.8"],"在字符串中搜索匹配正则表达式的结果":["51.8"],"并返回一个数组或":["51.8"],"null":["51.8","104.1"],"正则表达式还支持使用圆括号进行分组和捕获":["51.9"],"通过使用圆括号将模式的一部分括起来":["51.9"],"可以创建子模式":["51.9"],"并将匹配到的子串捕获到一个分组中":["51.9"],"以下是一些常用的分组和捕获的示例":["51.9"],"使用括号进行分组":["51.9"],"abc":["51.9"],"会匹配一个或多个连续的":["51.9"],"捕获分组":["51.9"],"使用括号进行分组后":["51.9"],"可以通过编号或名称将捕获的子串提取出来":["51.9"],"除了修饰符外":["51.10"],"正则表达式还支持标志":["51.10"],"flags":["51.10"],"用于提供更多的匹配选项":["51.10"],"正则表达式在":["51.11"],"中具有广泛的应用场景":["51.11"],"例如":["51.11","66.10","74.2","81.3"],"内置对象":["52.0","52.1"],"就是指这个语言自带的一些对象":["52.0"],"的内置对象":["52.1"],"对象说明":["52.1"],"是用于进行正则表达式匹配的对象":["52.9"],"封装和多态":["53.0"],"inheritance":["53.1"],"继承是一种对象间的关系":["53.1"],"它允许一个对象":["53.1"],"称为子类或派生类":["53.1"],"继承另一个对象":["53.1"],"称为父类或基类":["53.1"],"的属性和方法":["53.1"],"子类继承了父类的特性":["53.1"],"可以通过继承来复用代码":["53.1"],"减少重复编写":["53.1"],"encapsulation":["53.2"],"封装是一种将数据和方法包裹在一个单一实体中的概念":["53.2"],"使得外部无法直接访问对象的内部实现细节":["53.2"],"这样的设计有助于隐藏对象的复杂性":["53.2"],"只暴露必要的接口":["53.2"],"提高代码的可维护性和安全性":["53.2"],"封装通常通过将数据设置为私有属性":["53.2"],"polymorphism":["53.3"],"多态是一种允许不同对象对同一方法做出不同响应的特性":["53.3"],"这意味着可以使用相同的方法名":["53.3"],"但针对不同对象实现不同的行为":["53.3"],"多态有助于实现代码的灵活性和可扩展性":["53.3"],"及其之前的版本中":["54.1"],"使用构造函数来创建对象":["54.1"],"构造函数本质上是一个普通的函数":["54.1"],"但通常使用":["54.1"],"及以上的版本中":["54.2"],"引入了":["54.2"],"使得类的定义更加简洁明了":["54.2"],"类定义了对象的结构和行为":["54.2"],"面向对象":["55.0"],"对象是面向对象编程的核心概念":["55.2"],"对象是一个复合的数据类型":["55.2"],"它可以包含属性":["55.2"],"也称为数据成员":["55.2"],"和方法":["55.2"],"张三":["56.3"],"构造函数":["56.4"],"是一种特殊的函数":["56.4"],"主要用来初始化对象":["56.4"],"即为对象成员变量赋初始值":["56.4"],"它总与":["56.4"],"运算符一起使用":["56.4"],"我们可以把对象中一些公共的属性和方法抽取出来":["56.4"],"然后封装到这个函数里面":["56.4"],"sources":["56.5","56.6"],"复制一个或多个对象的属性到目标对象":["56.5"],"freeze":["56.9","56.10"],"getownpropertydescriptor":["56.11"],"getownpropertynames":["56.12"],"getownpropertysymbols":["56.13"],"getprototypeof":["56.14"],"seal":["56.17","56.18"],"hasownproperty":["56.20"],"原型和原型链":["57.0"],"prototype":["57.1","57.2"],"每个对象都有一个特殊的属性":["57.1"],"chain":["57.2"],"原型链是由对象的原型对象构成的链式结构":["57.2"],"当我们访问对象的属性或方法时":["57.2"],"如果对象本身没有找到":["57.2"],"则会继续在原型链上查找":["57.2"],"原型链的最终节点是":["57.2"],"尽量避免直接修改原型对象":["57.4"],"以免对其他对象产生意外的影响":["57.4"],"严格模式":["58.0"],"strict":["58.0"],"mode":["58.0"],"是一种在":["58.0","78.20"],"中启用更严格解析和错误处理的模式":["58.0"],"它旨在帮助开发者编写更安全":["58.0"],"指向":["59.2","59.14"],"函数内":["59.3"],"的指向":["59.3","59.4"],"非常重要":["59.3"],"语法中":["59.3"],"根据函数的调用方式的不同":["59.3"],"会指向不同的对象":["59.3"],"以":["59.3"],"的形式":["59.3"],"包括普通函数":["59.3"],"定时器函数":["59.3"],"立即执行函数":["59.3"],"调用时":["59.3"],"的指向永远都是":["59.3"],"比如":["59.3"],"fun":["59.3"],"相当于":["59.3"],"箭头函数中":["59.4"],"方法的作用":["59.7","59.10","59.14"],"方法举例":["59.8","59.11"],"举例":["59.8","59.11"],"nickname":["59.8"],"fn1":["59.8"],"可以":["59.10"],"调用":["59.10"],"一个函数":["59.10"],"改变":["59.11"],"方法的巧妙应用":["59.12"],"求数组的最大值":["59.12"],"如果想要求数组中元素的最大值":["59.12"],"数组本身是没有自带方法的":["59.12"],"那怎么办呢":["59.12"],"虽然数组里没有获取最大值的方法":["59.12"],"但是数值里有":["59.12"],"不会调用函数":["59.14"],"但是可以改变函数内部的":["59.14"],"qq":["60.0"],"选择器":["65.0","65.4"],"选择页面所有元素":["65.1"],"通过标签名选择元素":["65.2"],"通过类名选择元素":["65.3"],"good":["65.5"],"选中多个选择器对应的元素":["65.6"],"在所有后代节点中选":["65.7"],"只在亲儿子中选":["65.8"],"选择所有指定元素的":["65.9"],"相邻":["65.9"],"后一个兄弟节点":["65.9"],"h1":["65.9","75.1"],"根据元素状态或所处":["65.10"],"css":["65.11","65.14","69.5","69.6","70.1","70.3","71.0","72.1"],"按这个顺序声明":["65.11"],"c3":["65.12","65.13","65.14"],"选择符":["65.12","65.13"],"含义":["65.12","65.13"],"e":["65.12","65.13"],"child":["65.12","92.8"],"第一个子元素":["65.12"],"last":["65.12"],"最后一个子元素":["65.12"],"att":["65.13"],"选择具有":["65.13"],"伪元素选择器利用":["65.14"],"创建新标签元素":["65.14"],"而不需要":["65.14"],"标签":["65.14","73.0","76.0","78.4"],"从而简化":["65.14"],"结构":["65.14"],"before":["65.14"],"after":["65.14"],"一篇搞清伪类和伪元素":["65.15"],"布局":["66.0","66.1","67.0","69.7"],"灵活的网页布局解决方案":["66.0"],"flex":["66.1","66.2","66.4","66.6","66.7","66.8","66.9","66.10","69.7"],"要启用":["66.1"],"布局具有一个主轴和一个交叉轴":["66.2"],"主轴是水平方向":["66.2"],"交叉轴是垂直方向":["66.2"],"justify":["66.3","66.10","67.13","67.14","67.15"],"content":["66.3","67.14","70.1"],"属性控制主轴上的对齐方式":["66.3"],"align":["66.3","66.9","73.11"],"items":["66.3","67.13"],"属性控制交叉轴上的对齐方式":["66.3"],"项目会在一行中排列":["66.4"],"flow":["66.5"],"容器":["66.8"],"在多行":["66.9"],"容器中":["66.9"],"布局非常适合实现常见的网页布局需求":["66.10"],"居中对齐":["66.10"],"理解":["67.1","90.1"],"grid":["67.1","67.3","67.6","67.7","67.8","67.10","67.11","67.12","67.16","67.18","67.19","67.20","67.22","67.23","67.24","67.25","69.8"],"网格容器与网格项":["67.2"],"行与列":["67.3"],"布局的核心是行和列":["67.3"],"网格线与网格跨度":["67.4"],"template":["67.6","67.7","67.8","91.12","95.1","95.2","95.4","141.4"],"columns":["67.6"],"areas":["67.7"],"column":["67.10","67.16"],"gap":["67.10"],"auto":["67.11"],"网格轨道的大小和增长":["67.18"],"网格轨道":["67.18"],"网格模板的定义":["67.19"],"通过使用网格模板":["67.19"],"响应式设计与媒体查询":["67.20"],"布局与响应式设计完美结合":["67.20"],"通过使用媒体查询":["67.20"],"media":["67.20"],"简单网页布局":["67.22"],"布局可以用于创建简单的网页布局":["67.22"],"如标题":["67.22"],"导航栏和内容区域":["67.22"],"复杂网页布局":["67.23"],"布局可以应用于创建复杂的网页布局":["67.23"],"如新闻网站的首页布局":["67.23"],"布局的嵌套与组合":["67.24"],"布局可以嵌套使用":["67.24"],"从而创建更加复杂和多样化的布局":["67.24"],"网格的动态调整":["67.25"],"布局的一个重要特点是网格项目的动态调整":["67.25"],"网格项可以根据内容的大小自动调整":["67.25"],"也可以通过调整网格容器的大小来实现动态布局":["67.25"],"en":["67.25"],"head":["67.25","118.14"],"meta":["67.25"],"最佳实践与优化建议":["67.33"],"一般情况下":["68.0"],"权重":["68.1"],"详细描述":["68.1"],"计算方式":["68.1"],"每个选择器":["68.1"],"都可以算出一组权重":["68.1"],"格式为":["68.1","114.4"],"水平垂直居中":["69.0"],"line":["69.1","150.5","153.3"],"height":["69.1","72.1","138.2","152.2"],"div":["69.2","70.2","73.11","75.7","91.12","92.9","95.1","95.2","138.2","141.4"],"margin":["69.3"],"父元素使用":["69.3"],"box":["69.5","69.6"],"transform":["69.6","131.4","156.4"],"文本溢出隐藏":["70.0"],"webkit":["70.2","71.0"],"内核":["70.2"],"text":["70.2","70.3","73.11"],"这里是多行文本内容":["70.2"],"兼容较好":["70.3"],"滚动条":["71.0"],"scrollbar":["71.0"],"纵向":["71.0"],"8px":["71.0"],"绘制三角形":["72.0"],"使用边框":["72.1"],"朝上的三角形":["72.1"],"arrow":["72.1"],"up":["72.1"],"border":["72.1"],"clip":["72.2"],"path":["72.2","121.3","121.10","121.12","121.13","121.14","153.9"],"音视频标签":["73.0"],"音视频标签中的资源除了可以用":["73.0"],"src":["73.0","111.12"],"属性来指定外":["73.0"],"还可以用":["73.0"],"mime":["73.1"],"format":["73.2"],"格式":["73.3"],"audio":["73.5"],"video":["73.6","75.15"],"标签的属性":["73.7"],"方法名":["73.8"],"音频":["73.10"],"视频":["73.11"],"center":["73.11"],"onclick":["73.11"],"playpause":["73.11"],"超文本标记语言":["74.0"],"的基本结构":["74.1"],"文档由一系列嵌套的":["74.1"],"标签组成":["74.1"],"一个基本的":["74.1"],"标签和元素":["74.2"],"标签用于定义网页的结构和内容":["74.2"],"它们由尖括号包围":["74.2"],"标签通常成对出现":["74.2"],"包含开始标签和结束标签":["74.2"],"tagname":["74.2"],"的新特性":["74.3"],"学习":["74.4"],"最重要的是通过实践来加深理解":["74.4"],"创建简单的网页":["74.4"],"alert":["74.5"],"测试":["74.5"],"xxx":["74.5"],"提示":["74.5"],"note":["74.5"],"nota":["74.5"],"bene":["74.5"],"the":["74.5","74.6","119.6"],"custom":["74.5"],"details":["74.6"],"notice":["74.6"],"带折叠的示例":["74.6"],"rollup":["74.6"],"and":["74.6"],"esbuild":["74.6"],"do":["74.6"],"not":["74.6"],"support":["74.6"],"using":["74.6"],"enforce":["74.6"],"to":["74.6"],"control":["74.6","118.12"],"当描述":["75.0"],"img":["75.4","119.6"],"ol":["75.6"],"span":["75.8"],"table":["75.9","113.2","113.3"],"tr":["75.9"],"th":["75.9"],"br":["75.10"],"form":["75.13"],"脚注和导航标签":["75.14"],"header":["75.14"],"footer":["75.14"],"nav":["75.14"],"block":["76.1"],"level":["76.1"],"elements":["76.1","76.2"],"块级标签通常用于创建页面的大型结构和组织":["76.1"],"它们会单独占据一行":["76.1"],"inline":["76.2"],"内联标签用于包裹文本的一部分":["76.2"],"它们不会独占一行":["76.2"],"标签可以嵌套在其他标签中":["76.3"],"标签可以包含属性":["76.4"],"属性用于为标签提供额外的信息或设置":["76.4"],"html5":["76.5"],"允许开发者创建自定义的标签":["76.5"],"这些标签可能在":["76.5"],"type":["77.1","106.2","141.3"],"password":["77.1"],"浏览器自动填充账号和密码":["77.1"],"jsx":["78.0","78.1","78.15","78.17","79.9","81.3","81.7","81.8","81.9","81.10","81.11","82.11","82.13","82.14","82.15","84.5"],"原理":["78.2"],"并不是直接由浏览器理解的语法":["78.2"],"而是通过":["78.2"],"babel":["78.2"],"等工具进行转换后":["78.2"],"再变成普通的":["78.2"],"嵌套":["78.6"],"注释":["78.8"],"中的组件化开发":["78.9"],"函数组件是一种简单的声明式组件":["78.10"],"它是一个纯函数":["78.10"],"类组件是一种功能更强大的组件":["78.11"],"它是一个":["78.11"],"使用组件时":["78.12"],"中的条件渲染":["78.13"],"中的列表渲染":["78.16"],"中的表单处理":["78.18"],"处理用户输入的表单数据是":["78.18"],"web":["78.18","121.16","154.0"],"应用程序中的常见任务":["78.18"],"react":["78.18","78.19","78.21","78.22","79.1","79.4","80.1","82.1","82.8","82.9","82.10","82.13","82.14","82.15","83.1","83.3","83.6","83.7","84.2","84.3","84.4","84.5","85.2"],"我们可以通过对表单元素的事件监听和状态更新":["78.18"],"中的状态提升":["78.19"],"状态提升是一种在":["78.19"],"中共享状态的技术":["78.19"],"允许将共享的状态提升到共同的父组件":["78.19"],"实现组件之间的数据共享":["78.19"],"中的高阶组件":["78.20"],"hoc":["78.20"],"高阶组件":["78.20","79.18"],"中的上下文":["78.21"],"context":["78.21","134.2","134.3","135.0","136.3","136.4","136.5","137.1","137.2","139.3"],"的上下文允许在组件树中共享数据":["78.21"],"而不必通过":["78.21"],"中的":["78.22"],"hooks":["78.22","79.20"],"用于构建现代":["79.0"],"是由":["79.1"],"facebook":["79.1"],"开源的":["79.1"],"库":["79.1","79.23","88.3","148.3","154.0"],"的特点":["79.2","120.2"],"虚拟":["79.4"],"生态系统丰富":["79.6"],"在学习":["79.7"],"组件":["79.8","80.0","82.13"],"components":["79.8"],"props":["79.10","80.4","81.0","81.1","81.3","81.4","81.5","81.15","83.7","84.4","91.2"],"state":["79.11","83.0","83.1","83.3","83.4","83.5","88.1","88.6"],"列表渲染":["79.15","84.0"],"表单处理":["79.16"],"环境搭建":["79.21"],"本地引入相关的":["79.23"],"入门的时候":["79.23"],"我们建议采取方式一":["79.23"],"如果是本地引入的话":["79.23"],"可以这样写":["79.23"],"引入react相关的js库":["79.23"],"如果是通过":["79.23"],"cdn":["79.23"],"的方式引入的话":["79.23"],"脚手架":["79.24"],"vite":["79.24","111.4","111.10"],"选择":["79.24","93.4"],"生命周期可以分为三个阶段":["80.1"],"组件创建":["80.1"],"组件更新和组件销毁":["80.1"],"组件创建阶段":["80.1"],"constructor":["80.1"],"组件被创建时调用":["80.1"],"是组件创建阶段的第一个方法":["80.3"],"它在组件实例被创建时调用":["80.3"],"getderivedstatefromprops":["80.4","80.8"],"是组件创建和更新阶段的一个静态方法":["80.4"],"在组件每次渲染之前都会被调用":["80.4"],"它接收":["80.4"],"是组件创建阶段的第三个方法":["80.5"],"它用于渲染组件的内容":["80.5"],"是组件创建阶段的最后一个方法":["80.6"],"它在组件挂载到":["80.6"],"后调用":["80.6"],"在组件更新阶段":["80.8"],"的作用和在组件创建阶段是一样的":["80.8"],"用于根据":["80.8"],"是组件更新阶段的第二个方法":["80.9"],"它在组件更新之前调用":["80.9"],"是组件更新阶段的第四个方法":["80.10"],"它在":["80.10"],"render":["80.10","139.3"],"之后":["80.10"],"是组件更新阶段的最后一个方法":["80.11"],"它在组件更新之后调用":["80.11"],"是组件销毁阶段的唯一一个方法":["80.13"],"在组件即将被销毁时调用":["80.13"],"我们应该进行一些清理操作":["80.13"],"比如取消订阅":["80.13"],"的使用":["81.2","83.2","88.4","88.5","88.6"],"传递":["81.3"],"在父组件中":["81.3"],"可以通过在子组件上设置属性来传递":["81.3"],"有时候":["81.4","81.15","82.13"],"使用解构赋值简化":["81.5"],"在组件中访问":["81.5"],"的值类型":["81.6"],"字符串类型":["81.7"],"数字类型":["81.8"],"布尔值类型":["81.9"],"数组类型":["81.10"],"对象类型":["81.11"],"mycomponent":["81.11"],"的传递规则":["81.12"],"的不可变性":["81.13","83.6"],"验证":["81.14"],"为了确保组件接收到正确的":["81.14"],"我们可以使用":["81.14","85.2"],"proptypes":["81.14"],"来对":["81.14"],"进行验证":["81.14"],"我们希望在未传递某个":["81.15"],"时":["81.15","88.4"],"组件能够使用一个默认值":["81.15"],"这时可以通过设置组件的":["81.15"],"defaultprops":["81.15"],"来实现":["81.15"],"路由":["82.0","82.1","82.3","118.4"],"router":["82.2","82.8","82.13","82.14","82.15","87.0","87.3","118.4","118.8"],"路由是":["82.3"],"路由参数":["82.5"],"路由参数允许我们在":["82.5"],"编程式导航":["82.7"],"要开始使用":["82.8"],"创建路由组件":["82.10"],"首先":["82.10"],"我们需要创建几个页面组件":["82.10"],"它们将用于显示不同的页面视图":["82.10"],"定义路由":["82.11"],"接下来":["82.11"],"我们需要在应用中定义路由":["82.11"],"可以在顶层组件":["82.11"],"通常是":["82.11"],"app":["82.11","82.13","82.14","82.15","92.2","118.6","118.7","118.8","144.7","145.2","152.1","152.2"],"中使用":["82.11","123.11"],"route":["82.11","82.13","82.15"],"组件来定义路由":["82.11"],"渲染页面":["82.12"],"最后":["82.12"],"我们希望在一个页面中显示其他页面的内容":["82.13"],"这就需要使用嵌套路由":["82.13"],"允许我们在一个页面组件中定义嵌套的":["82.13"],"在实际开发中":["82.14"],"我们经常需要从":["82.14"],"中获取参数来加载不同的数据或进行页面的定向":["82.14"],"允许我们在":["82.14"],"路径中定义参数":["82.14"],"并将参数传递给页面组件":["82.14"],"提供了":["82.15"],"link":["82.15"],"组件和编程式导航来实现页面之间的导航":["82.15"],"browserrouter":["82.15"],"状态":["83.0","88.1","135.0"],"初始化":["83.3","108.2"],"更新":["83.4"],"要更新":["83.4"],"的值":["83.4","83.6"],"异步更新":["83.5"],"需要注意的是":["83.5","103.5"],"setstate":["83.5"],"方法是异步的":["83.5"],"这意味着在调用":["83.5"],"是不可变的":["83.6"],"意味着我们不应该直接修改":["83.6"],"如果直接修改":["83.6"],"的传递":["83.7"],"通常是在组件的父组件中定义的":["83.7"],"并通过":["83.7"],"传递给子组件":["83.7"],"这样的设计有助于保持组件之间的独立性和可预测性":["83.7"],"需要在多个组件中共享时":["83.7"],"可以将":["83.7"],"提升到共同的父组件中":["83.7"],"列表渲染是指根据数据数组来动态生成多个相似的元素":["84.1"],"方法实现列表渲染":["84.2"],"使用数组的":["84.2"],"方法是实现列表渲染的常见方式":["84.2"],"方法可以遍历数组的每个元素":["84.2"],"在实际应用中":["84.3","84.4","84.5"],"我们可能需要根据特定条件来渲染列表元素":["84.3"],"我们可以在":["84.3"],"方法中使用条件语句来实现条件渲染":["84.3"],"数据通常来自于父组件的状态或从外部":["84.4"],"api":["84.4","90.0","111.12"],"我们可以通过":["84.4"],"将数据传递给子组件":["84.4"],"然后在子组件中使用":["84.4"],"我们可能需要通过用户的交互来添加新的列表项":["84.5"],"我们可以通过修改数据数组的方式来实现添加列表项":["84.5"],"下面是一个示例":["84.5"],"演示了如何通过按钮点击来添加新的列表项":["84.5"],"方法渲染列表项时":["84.6"],"每个列表项都应该有一个唯一的":["84.6"],"条件渲染":["85.0"],"条件渲染是指根据特定条件来决定是否渲染组件或组件的一部分":["85.1"],"实现条件渲染":["85.2","85.4"],"的":["85.2","88.3","98.8","119.6"],"除了使用":["85.3"],"我们还可以使用":["85.3"],"的三元表达式":["85.3"],"ternary":["85.3"],"来实现条件渲染":["85.3","85.4","85.5"],"除了":["85.4"],"和三元表达式":["85.4"],"我们还可以使用逻辑与":["85.4"],"逻辑与在":["85.4"],"除了上述方法":["85.5"],"我们还可以使用条件运算符":["85.5"],"也称为逻辑或":["85.5"],"nullish":["85.5"],"coalescing":["85.5"],"条件运算符是":["85.5"],"使用适合场景的条件渲染方法":["85.6"],"根据具体的场景和需求选择合适的条件渲染方法":["85.6"],"例如使用":["85.6"],"三元表达式":["85.6"],"逻辑与":["85.6"],"vue":["86.1","86.3","86.4","86.7","87.3","89.1","89.2","90.23","90.28","90.30","91.4","91.5","91.12","92.8","92.11","93.3","93.4","94.1","95.1","95.2","95.4","111.8","140.2","141.4","145.1","147.1","151.2"],"您可以通过直接引入":["86.3"],"应用":["86.4"],"使用双花括号":["86.6"],"提供了一些指令":["86.7"],"show":["86.10"],"循环渲染列表中的元素":["86.12"],"v":["86.13","91.7","92.6"],"on":["86.13","113.3"],"定义一个名为":["86.16"],"钩子函数":["86.18"],"阶段":["86.18"],"beforecreate":["86.18"],"创建前":["86.18"],"在实例被创建之前调用":["86.18"],"此时":["86.18"],"组件的数据观察和事件还未初始化":["86.18"],"created":["86.18","90.27"],"创建后":["86.18"],"安装":["87.2","88.3","118.2","122.16","123.2","123.11","123.14","127.2","157.2"],"基本用法":["87.3"],"创建一个":["87.3","88.3"],"实例并将其与":["87.3"],"路由视图":["87.4"],"路由导航":["87.5"],"路由传参":["87.6"],"嵌套路由":["87.7"],"是一个专为":["88.0"],"vuex":["88.1","88.2","88.3","88.4","88.6"],"状态即应用程序中需要共享的数据":["88.1"],"它类似于组件的":["88.1"],"集中式管理":["88.2"],"所有的状态都集中在":["88.2"],"npm":["88.3","93.2","93.6","102.7","118.2","122.17","122.18","123.11","123.14","125.1","125.2","125.3","125.5","125.6","126.0","148.3","157.2"],"yarn":["88.3","112.1","124.0","127.1","127.2","157.2"],"在终端中运行以下命令":["88.3"],"install":["88.3","111.10","118.2","123.11","123.14"],"当使用":["88.4"],"通常会将状态的修改拆分为两个部分":["88.4"],"actions":["88.4"],"用于处理异步操作":["88.5"],"并且可以包含任意异步代码":["88.5"],"它们不直接修改状态":["88.5"],"而是通过调用":["88.5"],"mutations":["88.5"],"来间接修改状态":["88.5"],"通常":["88.5"],"在组件中通过":["88.5"],"dispatch":["88.5"],"用于派生出":["88.6"],"store":["88.6"],"中的状态":["88.6"],"类似于组件的计算属性":["88.6"],"computed":["88.6"],"但是":["88.6","90.31","101.7"],"可以被多个组件共用":["88.6"],"避免了重复逻辑代码":["88.6"],"可以对":["88.6"],"进行处理和过滤":["88.6"],"返回一个新的衍生状态":["88.6"],"而不改变原始状态":["88.6"],"以下是一个使用":["88.6"],"响应式原理":["89.0"],"的响应式原理主要是基于":["89.1"],"defineproperty":["89.1","89.2"],"实现的":["89.1"],"以下是":["89.1","89.2"],"响应式系统的核心原理":["89.1"],"的响应式原理使用了":["89.2"],"proxy":["89.2"],"相比":["89.2"],"使用的":["89.2"],"有一些重要的改进和性能优化":["89.2"],"vue在线学习工具":["90.0"],"vue3":["90.1","90.16","91.2","91.8","111.7"],"reactive":["90.2"],"函数用来根据给定的值创建一个响应式的数据对象":["90.2"],"函数调用的返回值是一个对象":["90.2"],"这个对象上只包含一个":["90.2"],"判断是不是一个ref对象":["90.4"],"ref":["90.4","91.9"],"创建一个跟踪自身":["90.5"],"变化的":["90.5"],"强制更新页面dom":["90.6"],"自定义ref":["90.7"],"是个工厂函数要求我们返回一个对象":["90.7"],"并且实现":["90.7"],"reactive是不可以绑定普通的":["90.8"],"只能对浅层的数据":["90.10"],"如果是深层的数据只会改变值":["90.10"],"把一个响应式对象转换成普通对象":["90.12"],"该普通对象的每个":["90.12"],"torefs相当于对对象内每个属性调用toref":["90.13"],"torefs返回的对象内的属性使用时需要加":["90.13"],"将响应式对象修改为普通对象":["90.14"],"的作用和":["90.16"],"监听ref定义的一个响应式数据":["90.17"],"监听多个ref":["90.18"],"写法变为数组的形式":["90.18"],"监听reactive定义的响应式对象":["90.19"],"使用reactive监听深层对象开启和不开启deep":["90.19"],"监听reactive":["90.20"],"定义响应式对象的单一属性":["90.20"],"立即执行传入的一个函数":["90.21"],"watcheffect":["90.22"],"watcheffect的第二个参数":["90.24"],"用来定义副作用刷新时机":["90.24"],"简单来说就是一个组件从创建":["90.25"],"元素初始化的时候":["90.27"],"这里有一个需要注意的限制":["90.28"],"必须以":["90.28"],"vnameofdirective":["90.28"],"的形式来命名本地自定义指令":["90.28"],"以使得它们可以直接在模板中使用":["90.28"],"vmovedirective":["90.28"],"el":["90.29"],"当前绑定的dom":["90.29"],"元素":["90.29"],"第二个":["90.29"],"binding":["90.29"],"instance":["90.29"],"使用指令的组件实例":["90.29"],"自定义拖拽指令":["90.30"],"vue2":["90.31","91.1","91.6","92.13"],"中有个东西叫":["90.31"],"mixins":["90.31"],"他可以将多个组件中相同的逻辑抽离出来":["90.31"],"实现一次写代码":["90.31"],"多组件受益的效果":["90.31"],"的副作用就是引用的多了变量的来源就不清晰了":["90.31"],"而且还会有变量来源不明确":["90.31"],"组件通信方式":["91.0"],"通信仓库地址":["91.1"],"项目地址":["91.1"],"不管是":["91.1"],"可以实现父子组件通信":["91.2"],"中我们可以通过":["91.2"],"自定义事件":["91.3","91.5"],"原生":["91.4"],"代码如下":["91.4"],"自定义事件可以实现子组件给父组件传递数据":["91.5"],"在项目中是比较常用的":["91.5"],"比如在父组件内部给子组件":["91.5"],"event2":["91.5"],"绑定一个自定义事件":["91.5"],"全局事件总线":["91.6"],"全局事件总线可以实现任意组件通信":["91.6"],"指令可是收集表单数据":["91.7"],"数据双向绑定":["91.7"],"除此之外它也可以实现父子组件数据同步":["91.7"],"useattrs":["91.8"],"中可以利用":["91.8"],"parent":["91.9"],"提及到":["91.9"],"provide":["91.10"],"piniapinia":["91.11"],"slot":["91.12","92.9","95.4"],"插槽":["91.12"],"默认插槽":["91.12"],"具名插槽":["91.12"],"作用域插槽可以实现父子组件通信":["91.12"],"在子组件内部的模板中书写":["91.12"],"全局组件标签":["91.12"],"在父组件内部提供结构":["91.12"],"todo":["91.12"],"深入组件":["92.0"],"main":["92.2"],"ts":["92.2","98.1","98.2","98.3","98.9","98.10","98.12","98.13","99.1","99.6","99.8","99.9","100.2","100.3","100.5","101.2","101.4","101.6","101.7","102.1","103.2","103.3","103.7","106.1","106.2","111.10","152.1"],"引入组件跟随在":["92.2"],"createapp":["92.2"],"局部注册的组件需要在使用它的父组件中显式导入":["92.5"],"父组件通过":["92.6"],"bind":["92.6"],"绑定一个数据":["92.6"],"然后子组件通过":["92.6"],"defineprops":["92.6"],"在子组件放置一个插槽":["92.8"],"具名插槽其实就是给插槽取个名字":["92.9"],"一个子组件可以放多个插槽":["92.9"],"而且可以放在不同的地方":["92.9"],"而父组件填充内容时":["92.9"],"可以根据这个名字把内容填充到对应插槽中":["92.9"],"插槽内容可以访问到父组件的数据作用域":["92.10"],"因为插槽内容本身是在父组件模板中定义的":["92.10"],"插槽可以是一个变量名":["92.11"],"在大型应用中":["92.12"],"需要将应用分割成小一些的代码块":["92.12"],"允许应用程序在等待异步组件时渲染一些其它内容":["92.13"],"必须使用条件判断":["92.13"],"传送组件":["92.14"],"是一种能够将我们的模板渲染至指定dom节点":["92.14"],"不受父级style":["92.14"],"alive":["92.15"],"缓存组件":["92.15"],"事件挂载的方法等":["92.15"],"只执行一次的放在":["92.15"],"onmounted中":["92.15"],"组件每次进去执行的方法放在":["92.15"],"onactivated中":["92.15"],"inject":["92.16"],"可以在祖先组件中指定我们想要提供给后代组件的数据或方法":["92.16"],"而在任何后代组件中":["92.16"],"升级":["92.17"],"在vue3":["92.17"],"是破坏性更新的":["92.17"],"是props":["92.17"],"使用vue":["93.1"],"my":["93.4"],"project":["93.4"],"然后的步骤":["93.4"],"please":["93.4"],"pick":["93.4"],"preset":["93.4"],"manually":["93.4"],"select":["93.4","123.3"],"使用vite创建":["93.5"],"推荐":["93.5"],"vite的优势":["93.5"],"使用vite初始化一个项目":["93.6"],"bash":["93.6","102.7","109.1","109.3","109.4","109.8","109.10","109.11","109.13","109.15","109.21","111.10","118.2","122.17","123.11","123.14","148.3","157.2","157.11"],"了解相关信息":["94.1"],"性能提升":["94.2"],"新增特性":["94.3"],"composition":["94.3"],"组合":["94.3"],"父组件":["95.1","95.2","95.4"],"主要是用来定义":["95.3"],"用来约束":["95.4"],"navlinks":["97.2"],"支持十六进制":["98.2"],"十进制":["98.2"],"八进制和二进制":["98.2"],"b1":["98.3"],"typescript":["98.4","98.14","99.10","102.7","103.0"],"像":["98.4"],"tuple":["98.5"],"元组类型允许表示一个已知":["98.5"],"元素数量":["98.5"],"类型":["98.5"],"的数组":["98.5"],"各元素的类型不必相同":["98.5"],"enum类型是对":["98.6"],"标准数据类型的一个补充":["98.6"],"使用枚举类型可以为一组数值赋予友好的名字":["98.6"],"枚举的值可以是数字":["98.6"],"任意类型":["98.7"],"没有强制限定哪种类型":["98.7"],"随时切换类型都可以":["98.7"],"我们可以对":["98.7"],"可以用":["98.8"],"表示没有":["98.8"],"任何返回值":["98.8"],"u":["98.9"],"定义undefined":["98.9"],"类型表示的是那些永不存在的值的类型":["98.10"],"void":["98.11"],"联合类型用":["98.12"],"分隔":["98.12"],"表示取值可以为多种类型中的一种":["98.12"],"a可以为数字或者布尔类型":["98.12"],"交叉类型就是跟联合类型相反":["98.13"],"用":["98.13","99.11"],"操作符表示":["98.13"],"交叉类型就是两个类型必须存在":["98.13"],"通过类型断言这种方式可以告诉编译器":["98.14"],"相信我":["98.14"],"我知道自己在干什么":["98.14"],"类型断言好比其它语言里的类型转换":["98.14"],"但是不进行特殊的数据检查和解构":["98.14"],"它没有运行时的影响":["98.14"],"只是在编译阶段起作用":["98.14"],"会假设你":["98.14"],"es6提供了更接近传统语言的写法":["99.0"],"引入了class":["99.0"],"类的基本定义与使用":["99.1"],"声明属性":["99.1"],"在typescript":["99.2"],"里":["99.2","100.4"],"我们可以使用常用的面向对象模式":["99.2"],"基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类":["99.2"],"总共有三个":["99.3"],"public":["99.4","99.6","119.6"],"private":["99.5"],"protected":["99.6"],"修饰符":["99.6","99.7"],"代表定义的变量私有的只能在内部和继承的子类中访问":["99.6"],"不能在外部访问":["99.6"],"静态属性":["99.8"],"静态方法":["99.8"],"我们用static":["99.8"],"定义的属性":["99.8"],"不可以通过this":["99.8"],"去访问":["99.8"],"只能通过类名去调用":["99.8"],"定义":["99.9","123.14"],"类":["99.9"],"定义类":["99.9"],"使用关键字":["99.9"],"支持通过":["99.10"],"getters":["99.10"],"setters":["99.10"],"来截取对对象成员的访问":["99.10"],"它能帮助你有效的控制对对象成员的访问":["99.10"],"下面来看如何把一个简单的类改写成使用":["99.10"],"抽象类做为其它派生类的基类使用":["99.11"],"它们一般":["99.11"],"不会直接被实例化":["99.11"],"只能实例化实现了所有抽象方法的子类":["99.11"],"不同于接口":["99.11"],"抽象类可以包含成员的实现细节":["99.11"],"abstract":["99.11"],"函数涉及的类型实际上指的是":["100.0"],"js的函数":["100.1"],"命名函数":["100.1"],"表示该参数为可选参数":["100.2"],"必要参数":["100.4"],"默认参数和可选参数有个共同点":["100.4"],"它们表示某一个参数":["100.4"],"有时":["100.4"],"你想同时操作多个参数":["100.4"],"或者你并不知道会有多少参数传递进来":["100.4"],"重载是方法名字相同":["100.5"],"而参数不同":["100.5"],"返回类型可以相同也可以不同":["100.5"],"重载函数声明":["100.5"],"string":["100.5","104.1"],"指在定义函数":["101.0"],"下面这是两个函数":["101.2"],"除了类型的不同":["101.2"],"实现的功能是一样的":["101.2"],"语法为函数名字后面跟一个":["101.3"],"参数名":["101.3"],"参数名可以随便写":["101.3"],"例如我这儿写了":["101.3"],"t":["101.3"],"一个函数可以定义多个泛型参数":["101.4"],"在定义接口时":["101.5"],"为接口中的属性或方法定义泛型类型":["101.5"],"在使用接口时":["101.5"],"再指定具体的泛型类型":["101.5"],"在定义类时":["101.6"],"为类中的属性或方法定义泛型类型":["101.6"],"在创建类的实例时":["101.6"],"再指定特定的泛型类型":["101.6"],"我们期望在一个泛型的变量上面":["101.7"],"获取其length参数":["101.7"],"有的数据类型是没有length属性的":["101.7"],"typescript中文网":["102.0"],"对比于js":["102.2"],"ts是js的":["102.2"],"属于动态编程语言":["102.3"],"增强代码的可维护性":["102.5"],"需要一定的学习成本":["102.6"],"使用tsc":["102.9"],"使用ts":["102.10"],"在typescript中":["103.1"],"我们定义对象的方式要用关键字interface":["103.1"],"接口":["103.1"],"会合并":["103.2"],"interface":["103.3","103.7"],"一旦定义了任意属性":["103.5"],"那么确定属性和可选属性的类型都必须是它的类型的子集":["103.5"],"readonly":["103.6"],"readonly只读属性是不允许被赋值的":["103.6"],"只能读取":["103.6"],"这里所说的对象类型":["104.0"],"类型用于表示所有的非原始类型":["104.1"],"即我们不能把":["104.1"],"等":["104.1"],"原始类型赋值给":["104.1"],"在严格模式下":["104.1"],"配置文件":["105.0","111.8"],"compileroptions":["105.0"],"基本选项":["105.0"],"指定":["105.0"],"ecmascript":["105.0"],"目标版本":["105.0"],"es2015":["105.0"],"es2016":["105.0"],"or":["105.0"],"esnext":["105.0"],"module":["105.0","111.8","122.7"],"commonjs":["105.0"],"指定使用模块":["105.0"],"amd":["105.0"],"system":["105.0"],"类型别名":["106.0"],"typescript里":["106.1"],"在有些没有明确指出类型的地方":["106.1"],"类型推论会帮助提供类型":["106.1"],"可以给一个类型定义一个名字":["106.2"],"多用于复合类型":["106.2"],"定义类型别名":["106.2"],"axios":["107.1","107.3","107.5","108.0","108.2","111.11"],"使用npm":["107.2"],"执行":["107.3"],"zs":["107.3"],"我们大致可以分为两类":["107.4"],"一类是":["107.4"],"请求接口前的统一处理":["107.4"],"请求拦截":["107.4"],"请求接口后的统一处理":["107.4"],"user":["107.5"],"catch":["107.5"],"封装目的":["108.1"],"设置请求拦截":["108.3"],"创建请求拦截":["108.3"],"service":["108.3","108.4"],"interceptors":["108.3","108.4"],"request":["108.3"],"use":["108.3","108.4","118.6","118.8"],"config":["108.3","111.10","157.9"],"设置响应拦截":["108.4"],"创建响应拦截":["108.4"],"response":["108.4"],"res":["108.4","118.12"],"处理自己的业务逻辑":["108.4"],"封装常见的方法":["108.5"],"示例":["108.6","144.7"],"param":["108.6"],"配置全局账户":["109.1"],"对所有":["109.1"],"git":["109.1","109.5","109.6","109.7","109.8","109.10","109.15"],"仓库有效":["109.1"],"commit":["109.6","109.16"],"提交所有变更":["109.6"],"diff":["109.7"],"比较工作区和暂存区的所有差异":["109.7"],"只能查看旧文件的变更":["109.7"],"包括修改和删除":["109.7"],"不能查看新文件":["109.7"],"因为新文件还为被":["109.7"],"查看简要日志信息":["109.8"],"基于当前分支创建分支":["109.10"],"安全删除本地分支":["109.12"],"merge":["109.14"],"rebase":["109.14"],"的区别有待学习实践":["109.14"],"worried":["109.14"],"将":["109.14"],"工作区指定文件恢复成和暂存区一样":["109.15"],"checkout":["109.15"],"file1":["109.15"],"file2":["109.15"],"tips":["109.15"],"记录":["109.16"],"remote":["109.18"],"查看所有远程仓库地址别名":["109.18"],"clone":["109.19"],"pull":["109.20"],"push":["109.21"],"推送本地指定分支到仓库指定分支":["109.21"],"配置用户名和邮箱":["110.3"],"执行命令生成ssh":["110.4"],"tortoisegit安装和配置详细说明":["110.7"],"项目配置文档":["111.0"],"搭建后台管理系统模板":["111.1"],"项目初始化":["111.2"],"搭建一个":["111.2"],"初始化项目":["111.4","124.0","127.2"],"本项目使用":["111.4"],"eslint":["111.6","111.7","111.8"],"配置":["111.6"],"中文官网":["111.6"],"http":["111.6","118.12","121.16","121.17"],"cn":["111.6"],"最初是由":["111.6"],"nicholas":["111.6"],"zakas":["111.6"],"于":["111.6"],"环境代码校验插件":["111.7"],"让所有与prettier规则存在冲突的eslint":["111.7"],"rules失效":["111.7"],"并使用prettier进行代码检查":["111.7"],"修改":["111.8"],"eslintrc":["111.8"],"cjs":["111.8"],"see":["111.8"],"https":["111.8","111.10","119.4","119.6"],"bootcss":["111.8"],"com":["111.8","111.10","119.6"],"docs":["111.8","157.6","157.7","157.11"],"rules":["111.8"],"exports":["111.8"],"env":["111.8"],"es2021":["111.8"],"node":["111.8","119.0","120.1","120.3","122.12","122.15","125.0"],"jest":["111.8"],"指定如何解析语法":["111.8"],"parser":["111.8"],"优先级低于":["111.8"],"的语法解析配置":["111.8"],"集成":["111.9"],"sass":["111.9"],"我们目前在组件内部已经可以使用":["111.9"],"scss":["111.9"],"样式":["111.9"],"因为在配置":["111.9"],"stylelint":["111.9"],"工具的时候":["111.9"],"项目当中已经安装过":["111.9"],"mock":["111.10"],"数据":["111.10"],"安装依赖":["111.10"],"www":["111.10"],"npmjs":["111.10"],"package":["111.10"],"plugin":["111.10"],"pnpm":["111.10"],"d":["111.10"],"mockjs":["111.10"],"配置文件启用插件":["111.10"],"二次封装":["111.11"],"在开发项目的时候避免不了与后端进行交互":["111.11"],"因此我们需要使用":["111.11"],"插件实现发送网络请求":["111.11"],"在开发项目的时候":["111.11","111.12"],"我们经常会把":["111.11"],"进行二次封装":["111.11"],"目的":["111.11"],"接口统一管理":["111.12"],"接口可能很多需要统一管理":["111.12"],"目录下去创建":["111.12"],"部署刷新":["112.0"],"问题":["112.0"],"build打包项目":["112.1"],"数据库的常用命令":["113.0"],"database":["113.1","113.3"],"创建一个新的数据库":["113.1"],"drop":["113.1"],"insert":["113.2"],"into":["113.2"],"grant":["113.3"],"privileges":["113.3"],"字段的数据类型":["114.0"],"tinyint":["114.1"],"一个非常小的整数":["114.1"],"范围为":["114.1","114.2"],"有符号":["114.1"],"float":["114.2"],"单精度浮点数":["114.2"],"char":["114.3"],"固定长度的字符串":["114.3"],"存储日期":["114.4"],"yyyy":["114.4"],"mm":["114.4"],"存储布尔值":["114.5"],"数据库是用于组织和存储大量结构化数据的集合":["115.0"],"它是一种数据管理系统":["115.0"],"允许用户定义":["115.0"],"mysql是一种开源的关系型数据库管理系统":["115.1"],"由瑞典公司mysql":["115.1"],"ab开发并最终由oracle":["115.1"],"corporation收购":["115.1"],"mysql被广泛用于各种规模的应用程序和网站":["115.1"],"基本使用":["117.0","145.0"],"连接到":["117.1"],"mysql":["117.1","123.2","123.3"],"服务器":["117.1","121.16"],"创建数据库":["117.2"],"创建表":["117.4"],"插入数据":["117.5","123.3"],"使用以下命令向表中插入数据":["117.5"],"查询数据":["117.6","123.3"],"更新数据":["117.7"],"删除数据":["117.8"],"官网传送门":["118.0"],"初体验":["118.1"],"express":["118.2","118.3","118.7","118.8"],"创建服务器":["118.2"],"监听客户端请求":["118.2"],"并返回内容":["118.2"],"方法可创建静态资源服务器":["118.3"],"向外开放访问静态资源":["118.3"],"在指定的静态目录中查找文件":["118.3"],"并对外提供资源的访问路径":["118.3"],"创建路由模块":["118.4"],"require":["118.4","118.7","119.4","121.4","121.12","121.16","121.17","122.21","122.22","122.23"],"中间件":["118.5","123.11"],"中间件是指流程的中间处理环节":["118.5"],"服务器收到请求后":["118.5"],"定义的中间件为全局中间件":["118.6"],"定义中间件函数":["118.7"],"应用级别的中间件":["118.8"],"post":["118.8","118.14","118.15"],"绑定到":["118.8"],"实例上的中间件":["118.8"],"路由级别的中间件":["118.8"],"叫做路由级别的中间件":["118.8"],"用法和应用级别中间件没有区别":["118.8"],"跨域资源共享":["118.9"],"中间件解决跨域":["118.10"],"cross":["118.11"],"origin":["118.11","118.12"],"resource":["118.11"],"sharing":["118.11"],"常见响应头":["118.12"],"access":["118.12"],"allow":["118.12"],"制定了允许访问资源的外域":["118.12"],"setheader":["118.12"],"请求分类":["118.13"],"请求方式":["118.14"],"请求方式为":["118.15"],"安装插件":["119.2"],"index":["119.4","157.7"],"文件并编写代码":["119.4"],"引入模块":["119.4"],"cheerio":["119.4"],"爬取成功":["119.6"],"这时会多出来一个名叫":["119.6"],"files":["119.6"],"文件":["119.6"],"里面就是爬取出来的内容了":["119.6"],"title":["119.6"],"肖申克的救赎":["119.6"],"shawshank":["119.6"],"redemption":["119.6"],"star":["119.6"],"pic":["119.6"],"img2":["119.6"],"doubanio":["119.6"],"view":["119.6"],"photo":["119.6"],"s":["119.6"],"ratio":["119.6"],"poster":["119.6"],"p480747492":["119.6"],"jpg":["119.6"],"霸王别姬":["119.6"],"img1":["119.6"],"p2561716440":["119.6"],"阿甘正传":["119.6"],"forrest":["119.6"],"gump":["119.6"],"介绍":["120.0"],"nodejs":["120.1"],"an":["120.1"],"异步":["120.2","121.7"],"非阻塞":["120.2"],"io":["120.2","157.11"],"模型":["120.2"],"文件系统模块":["121.1"],"模块中所有的操作都有两种形式可供选择":["121.1"],"同步和异步":["121.1"],"同步文件系统会阻塞程序的执行":["121.1"],"也就是除非操作完毕":["121.1"],"fs":["121.3","121.4","121.6","121.9","121.10"],"readfile":["121.3"],"callback":["121.3","121.6","121.10"],"文件路径":["121.3"],"简单文件读取的方式会一次性读取文件内容到内存中":["121.4"],"若文件较大":["121.4"],"会占用过多内存影响系统性能":["121.4"],"且读取速度慢":["121.4"],"大文件适合用流式文件读取":["121.4"],"它会分多次将文件读取到内存中":["121.4"],"创建一个可读流":["121.4"],"writefile":["121.6"],"file":["121.6"],"同步":["121.7"],"简单文件的写入都不适合大文件的写入":["121.7"],"性能较差":["121.7"],"容易导致内存溢出":["121.7"],"缓冲区":["121.8"],"缓冲区文档":["121.8"],"的结构与数组类似":["121.8"],"操作方法也与数组类似":["121.8"],"dirname":["121.9"],"模块操作文件时":["121.9"],"验证路径是否存在":["121.10"],"exists":["121.10"],"existssync":["121.10"],"获取文件信息":["121.10"],"stat":["121.10"],"删除文件":["121.10"],"路径模块":["121.11"],"join":["121.12"],"basename":["121.13"],"extname":["121.14"],"模块":["121.15","123.2"],"服务器实例":["121.16"],"server":["121.17"],"createserver":["121.17"],"概念":["122.2"],"避免命名空间的冲突":["122.3"],"中模块化":["122.4"],"自定义模块中都有一个":["122.7"],"模块化规范":["122.8"],"模块第一次加载后会被缓存":["122.9"],"内置模块加载优先级最高":["122.10"],"加载自定义模块时":["122.11","122.21"],"路径要以":["122.11"],"若导入第三方模块":["122.12"],"会从":["122.12"],"当前模块的父目录":["122.12"],"开始":["122.12"],"当把目录作为模块标识符进行加载的时候":["122.13"],"有三种加载方式":["122.13","122.23"],"在被加载的目录下查找":["122.13"],"与包":["122.14"],"中的第三方模块又叫做":["122.15"],"在项目中安装包的命令":["122.16"],"的下包速度慢的问题":["122.17"],"注册":["122.18","126.1"],"账号":["122.18"],"初始化包的基本结构":["122.18"],"模块在第一次加载后会被缓存":["122.19"],"内置模块的加载优先级最高":["122.20"],"必须指定以":["122.21"],"如果传递给":["122.22"],"的模块标识符不是一个内置模块":["122.22"],"也没有以":["122.22"],"则":["122.22"],"当把目录作为模块标识符":["122.23"],"传递给":["122.23"],"进行加载的时候":["122.23"],"操作":["123.1"],"数据库":["123.3"],"db":["123.3"],"query":["123.3"],"users":["123.3"],"err":["123.3"],"results":["123.3"],"表示占位符":["123.3"],"sql":["123.3"],"开发模式":["123.4"],"服务器发送给客户端的":["123.5"],"页面":["123.5"],"是在服务器通过字符串的拼接动态生成的":["123.5"],"因此客户端不需要使用":["123.5"],"前后端分离的开发模式":["123.6"],"依赖于":["123.6"],"技术的广泛应用":["123.6"],"企业级网站":["123.7"],"认证机制":["123.9","123.12"],"工作原理":["123.10","123.13"],"session":["123.11","123.13"],"认证":["123.11"],"配置中间件":["123.11"],"认证的局限性":["123.13"],"认证机制需要配合":["123.13"],"才能实现":["123.13"],"由于":["123.13","130.7"],"默认不支持跨域访问":["123.13"],"jwt":["123.14"],"jsonwebtoken":["123.14"],"用于生成":["123.14"],"用于将":["123.14"],"字符串解析还原成":["123.14"],"secret":["123.14"],"密钥":["123.14"],"为保证":["123.14"],"的命令对比":["124.0"],"下面是一个包含":["124.0"],"命令对比的":["124.0"],"markdown":["124.0"],"表格":["124.0"],"以下是一些常用的":["125.3"],"init":["125.3","157.2"],"初始化一个新的":["125.3"],"项目":["125.3"],"是每个":["125.4"],"不仅可以帮助你管理项目的依赖项":["125.6"],"准备发布文件":["126.4"],"发布包":["126.5"],"更新和维护":["126.6"],"的安装与使用":["127.0"],"在开始之前":["127.1"],"后":["127.2"],"你可以使用以下常用命令来管理依赖关系和执行其他操作":["127.2"],"进入你的项目目录":["127.2"],"并运行以下命令来初始化项目":["127.2"],"shell":["127.2","157.3"],"x创建":["128.1"],"uniapp官网":["128.2"],"canvas":["130.0","130.1","130.2","130.6","130.7","130.8","133.1","138.2","139.3"],"坐标系统":["130.3"],"绘图上下文":["130.4"],"绘图元素":["130.5"],"创造交互式效果":["130.6"],"创造动画":["130.7"],"的局限性":["130.8"],"图像变换":["131.0"],"以下方法用于图像变换":["131.0"],"rotate":["131.1","139.3"],"canvasrenderingcontext2d":["131.1","131.2","131.3","131.4","131.5","134.1","134.2","134.4","136.6"],"scale":["131.2"],"方法用于缩放图像":["131.2"],"它接受两个参数":["131.2"],"分别是":["131.2"],"轴方向的缩放因子和":["131.2"],"translate":["131.3","139.3"],"方法接受一个变换矩阵的六个元素作为参数":["131.4"],"完成缩放":["131.4"],"旋转":["131.4"],"移动和倾斜等变形":["131.4"],"它的使用格式如下":["131.4"],"settransform":["131.5"],"方法取消前面的图形变换":["131.5"],"将画布恢复到该方法指定的状态":["131.5"],"该方法的参数与":["131.5"],"图像合成":["132.0"],"在默认情况之下":["132.0"],"over":["132.1"],"在目标图像上显示源图像":["132.1"],"atop":["132.1"],"在目标图像顶部显示源图像":["132.1"],"源图像位于目标图像之外的部分是不可见的":["132.1"],"strokestyle":["133.2"],"设置或返回描边颜色":["133.2"],"fillstyle":["133.2","135.0"],"设置或返回填充颜色":["133.2"],"stroke":["133.2"],"样式控制":["134.0"],"线性":["134.1"],"以下的方法和属性控制线条的视觉特征":["134.1"],"linewidth":["134.1"],"指定线条的宽度":["134.1"],"默认为":["134.1"],"渐变色":["134.2"],"以下方法用于设置渐变效果和图像填充效果":["134.2"],"createlineargradient":["134.2"],"定义线性渐变样式":["134.2"],"createradialgradient":["134.2"],"定义辐射渐变样式":["134.2"],"createpattern":["134.2","134.3"],"定义图像填充样式":["134.2"],"方法按照给定直线":["134.2"],"生成线性渐变的样式":["134.2"],"x0":["134.2"],"图像填充":["134.3"],"方法定义一个图像填充样式":["134.3"],"在指定方向上不断重复该图像":["134.3"],"填充指定的区域":["134.3"],"image":["134.3","136.5"],"阴影":["134.4"],"以下属性用于设置阴影":["134.4"],"shadowblur":["134.4"],"阴影的模糊程度":["134.4"],"save":["135.0","139.3"],"保存当前环境的状态":["135.0"],"restore":["135.0"],"返回之前保存过的路径状态和属性":["135.0"],"绘制图形":["136.0","150.0"],"绘制矩形fillrect":["136.2"],"strokerect":["136.2"],"位置x":["136.2"],"位置y":["136.2"],"宽度":["136.2"],"圆弧":["136.3"],"arc":["136.3","150.4"],"圆心x":["136.3"],"圆心y":["136.3"],"半径":["136.3"],"开始的角度":["136.3"],"结束的角度":["136.3"],"顺时针false":["136.3"],"逆时针true":["136.3"],"默认值false":["136.3"],"beginpath":["136.4"],"moveto":["136.4","137.1","137.2"],"三种绘制图片的的方式":["136.5"],"drawimage":["136.5"],"dx":["136.5"],"dy":["136.5"],"以下方法和属性用于绘制文本":["136.6"],"filltext":["136.6"],"在指定位置绘制实心字符":["136.6"],"stroketext":["136.6"],"在指定位置绘制空心字符":["136.6"],"measuretext":["136.6"],"返回一个":["136.6"],"textmetrics":["136.6"],"font":["136.6"],"指定字型大小和字体":["136.6"],"贝塞尔曲线":["137.0"],"聊天框":["137.1"],"爱心":["137.2"],"cbtn":["138.1","141.4"],"ggk":["138.2"],"谢谢惠顾":["138.2"],"mycanvas":["138.2"],"当前浏览器不支持canvas":["138.2"],"请下载最新的浏览器":["138.2"],"clock":["139.1"],"getcontext":["139.3"],"2d":["139.3"],"clearrect":["139.3"],"存档":["139.3"],"保存当前坐标位置和上下文对象":["139.3"],"参考视频教程":["140.0"],"plum":["140.1"],"draw":["141.1"],"boldbtn":["141.3"],"粗线条":["141.3"],"thinbtn":["141.3"],"细线条":["141.3"],"savebtn":["141.3"],"保存签名":["141.3"],"inputcolor":["141.3"],"clearbtn":["141.3"],"橡皮擦":["141.3"],"btns":["141.4"],"该内容正在努力建设中":["142.0"],"事件交互":["143.0"],"为精灵添加交互事件":["143.1"],"sprite":["143.1","146.2","149.3"],"创建矩形":["143.2"],"rect":["143.2","153.4"],"pixijs":["144.0","144.1","144.7"],"是一个基于":["144.1"],"下面是一个简单的":["144.7"],"展示了如何创建一个基本的场景并添加一个可交互的精灵":["144.7"],"创建一个场景":["144.7"],"类详解":["145.2"],"导入pixi":["145.2","146.1","148.1","149.1","152.1","152.2"],"pixi":["145.2","146.1","146.2","148.1","148.3","152.1","152.2"],"创建应用":["145.2","146.1","149.1","152.1","152.2"],"文字与遮罩":["146.0"],"创建一个精灵":["146.2"],"滤镜特效":["148.0"],"创建模糊滤镜":["148.2"],"blurfilter":["148.2"],"filters":["148.3"],"精灵与动画":["149.0"],"创建纹理与精灵":["149.2"],"设置属性":["149.3"],"锚点":["149.3"],"ellipse":["150.1"],"polygon":["150.2","153.7"],"roundedrectangle":["150.3"],"谷歌恐龙小游戏素材":["151.1"],"资源管理":["152.0"],"application":["152.1","152.2"],"innerwidth":["152.1","152.2"],"svg":["153.1","153.7","153.9"],"scalable":["153.1"],"circle":["153.5"],"cllipse":["153.6"],"polyline":["153.8"],"threejs":["154.0"],"学习指南":["154.0"],"中文官方文档":["154.0"],"是一种用于在":["154.0"],"浏览器中创建交互式":["154.0"],"3d":["154.0"],"图形的":["154.0"],"它允许开发人员在":["154.0"],"应用程序中轻松地渲染":["154.0"],"scene1":["155.2"],"scene2":["155.5"],"group":["155.9","155.12","156.5"],"scene":["155.11"],"位移和旋转":["156.0"],"例如设置x轴放大3倍":["156.1"],"直接设置旋转属性":["156.3"],"从":["157.0"],"创建项目":["157.1","157.3"],"vitepress":["157.2","157.7"],"运行":["157.4"],"基本配置":["157.5"],"在目录下新建":["157.6"],"文件夹":["157.6"],"在其中新建":["157.6"],"配置首页":["157.7"],"支持用户使用":["157.7"],"yaml":["157.7"],"配置页面的内容":["157.7"],"中可以开始我们的配置":["157.9"],"先写上如下内容":["157.9"],"这是网站的标题和描述":["157.9"],"标题会在浏览器标签上展示":["157.9"],"themeconfig":["157.10"],"省略前面的内容":["157.10"],"部署到":["157.11"],"github":["157.11"],"新建脚本文件":["157.11"],"deploy":["157.11"],"sh":["157.11"],"文件夹处于同一级":["157.11"],"usr":["157.11"]},{"0":["5.10","8.18","8.20","9.3","24.2","25.5","25.12","28.3","28.13","32.6","34.2","34.3","38.2","43.3","43.6","43.7","67.25","83.7","111.7","130.3","131.2","134.4","135.0","136.3","149.3","153.9","157.0"],"1":["0.6","1.14","1.16","5.6","5.10","5.12","8.17","9.3","9.10","10.3","10.5","13.0","19.3","20.6","20.12","24.19","24.24","24.31","24.32","25.11","26.3","28.4","29.7","29.12","30.15","32.6","38.0","43.5","43.6","43.7","48.3","51.8","56.6","67.25","70.1","84.5","88.5","88.6","89.1","89.2","90.29","104.1","109.20","114.2","138.2","141.3","152.1","152.2","154.0"],"2":["0.6","1.14","1.15","5.5","5.6","5.10","5.12","5.18","8.5","9.3","10.2","10.3","10.5","20.12","24.32","28.3","28.4","29.7","34.4","43.5","43.7","43.9","50.1","59.8","65.9","66.10","67.31","74.6","84.6","85.6","88.1","88.6","90.0","90.1","109.7","109.8","109.21","111.5","111.7","112.1","123.2","136.3","138.2","139.3","141.3","153.1"],"3":["0.6","1.15","5.3","5.10","5.12","9.11","9.16","10.2","24.32","25.1","29.2","39.3","43.7","50.2","67.32","85.6","94.1","109.8"],"4":["0.2","1.15","3.4","10.2","24.32","28.13","43.3","43.5","43.7","50.2","119.6"],"5":["0.2","3.4","10.2","25.12","28.13","31.6","50.2","131.2","149.3"],"6":["0.2","5.12","48.1","111.6","111.7"],"8":["19.2","67.23","67.24","67.25","78.22","111.7","139.3"],"9":["51.7"],"10":["29.3","30.14","30.18","48.3","50.1","50.2","150.5"],"12":["139.3"],"13":["49.14"],"16":["78.22","121.8"],"18":["8.3","8.4","8.22","31.2","56.3","99.8"],"23":["48.1"],"24":["8.4"],"27":["111.7"],"28":["10.11"],"30":["56.18"],"32":["114.1"],"38":["114.2"],"50":["131.2","131.5","136.2"],"55":["30.2"],"79":["50.1"],"100":["28.3","135.0","136.2"],"120":["137.2"],"150":["136.2","136.3"],"170":["139.3"],"190":["139.3"],"200":["41.5"],"234":["28.3"],"255":["114.1","114.3"],"300":["41.5","136.4","137.2"],"308":["50.1"],"400":["133.1"],"404":["121.17"],"600":["141.3","144.7"],"768":["114.1"],"800":["144.7"],"1000":["141.3"],"1999":["3.4"],"2009":["3.4"],"123456":["108.6"],"2357490894":["60.0"],"是":["0.1","3.3","20.2","46.0","47.0","49.0","52.2","67.8","78.1","79.20","87.1","102.1","130.1"],"判断":["0.2"],"中是否包含指定的键":["0.2"],"返回布尔值":["0.2"],"delete":["0.2","117.8"],"从":["0.2"],"中删除指定键及其对应的值":["0.2"],"返回一个布尔值":["0.2"],"表示是否删除成功":["0.2"],"clear":["0.2"],"清空":["0.2"],"中的所有键值对":["0.2"],"size":["0.2"],"属性":["0.2","28.10","65.14","72.2","79.10","81.0","90.2"],"用于获取":["0.2"],"value1":["0.4","1.12","113.2"],"key2":["0.4"],"value2":["0.4","1.12","113.2"],"可以将":["0.4"],"二维":["0.4"],"new":["0.5","1.12","1.13","1.14","1.16","5.17","9.4","23.2","32.8","48.5","88.6","143.2","144.7","145.2","146.1","148.1","148.2","150.1"],"map":["0.5","1.6","9.15","84.4"],"key1":["0.5"],"one":["0.6"],"two":["0.6"],"three":["0.6"],"对象是值的集合":["1.1"],"对象尾部添加一个元素":["1.3"],"返回该":["1.3"],"对象":["1.3","3.4","5.10","6.18","6.19","8.6","11.0","12.0","13.0","14.0","15.0","16.0","17.0","48.2"],"js":["1.3","1.4","1.7","1.8","1.10","2.1","2.2","2.3","2.5","4.9","4.11","4.12","4.13","4.14","4.23","4.25","5.17","5.19","6.4","6.6","6.8","6.9","6.11","6.16","6.20","8.22","9.2","9.8","9.13","9.14","9.17","10.6","20.9","21.1","21.2","23.1","23.2","24.7","24.8","24.9","24.10","24.14","24.17","24.19","24.23","24.26","24.28","24.29","24.30","24.31","25.1","25.4","25.8","25.10","25.12","26.0","26.2","26.7","27.1","27.4","30.4","30.7","30.15","31.4","32.4","35.2","38.1","38.3","38.4","38.5","40.1","40.2","40.3","49.14","56.2","56.7","56.10","56.11","56.12","56.13","56.14","56.15","56.16","56.19","56.20","59.5","59.11","82.10","86.1","88.0","88.3","88.6","90.8","90.18","90.19","90.20","92.2","94.1","102.3","108.2","118.3","118.8","120.2","120.3","121.13","123.2","123.5","123.11","123.14","125.2","127.1","131.1","131.5","133.1","138.2","148.3","149.2","149.4","157.6"],"对象内的所有元素":["1.4"],"const":["1.4","1.7","1.8","1.10","2.2","4.16","4.19","4.21","4.22","4.23","5.11","5.16","7.2","7.3","7.4","8.8","8.22","10.4","10.5","10.9","10.10","20.9","23.1","32.8","35.2","38.1","38.3","38.4","38.6","40.0","40.2","40.3","41.4","51.9","56.6","56.8","56.11","56.12","56.13","56.14","56.16","56.19","56.20","57.2","78.19","78.21","81.3","82.15","87.6","88.6","103.7","108.6","118.8","121.14","123.11","123.14","146.1"],"s":["1.4","1.7","8.4","74.6","106.2"],"set":["1.5","1.7","1.14","1.16","90.7","99.10","149.3","157.11"],"prototype":["1.5","42.2","42.4","50.2"],"has":["1.5","9.15"],"会在此之后返回":["1.5"],"false":["1.5","24.20","28.11","29.9","30.6","30.15","30.16","88.6","114.5","123.11","136.3"],"value":["1.6","9.12","28.2","46.1","47.1","56.5","90.13","92.17","98.14","101.6"],"数组":["1.6"],"为了使这个方法和":["1.6"],"对象保持相似":["1.6"],"中存在与否":["1.7"],"对象中的按插入顺序排列的所有元素的值":["1.8"],"set1":["1.8"],"与":["1.9","91.6"],"对象中的值的个数":["1.10"],"实现的一些方法":["1.11"],"value3":["1.12"],"myset":["1.13"],"b":["1.15","9.12","28.3","28.4","30.18","36.1","68.1","131.4"],"在":["2.0","3.4","22.0","35.1","41.0","51.1","53.1","65.14","66.8","67.30","78.7","78.9","78.16","79.15","79.16","80.5","80.6","81.0","81.12","81.13","83.0","84.0","84.1","85.0","87.4","90.29","91.3","91.5","93.5","111.9","117.2","125.5"],"类名通常首字母大写":["2.1"],"person":["2.1","4.18","8.3","8.4","8.22","10.9","10.10","42.2","53.2","54.2","57.2","99.8","99.10"],"关键字":["2.2"],"extends":["2.3","42.8","78.18","80.3","80.13","81.3","81.7","81.8","81.9","81.10","81.11","81.15","83.7","84.5","111.8"],"关键字来继承另一个类的属性和方法":["2.3"],"class":["2.3","2.4","2.5","2.6","4.18","69.1","69.2","70.0","78.18","80.3","80.8","80.13","81.3","81.5","81.7","81.8","81.9","81.15","83.4","83.7","84.3","84.5","85.3","99.2","99.7","99.10"],"student":["2.4"],"而不是类的实例":["2.5"],"mathutils":["2.5"],"circle":["2.6"],"constructor":["2.6","4.18","54.2","78.18","83.7","84.5","99.1","99.6","99.8"],"radius":["2.6"],"this":["2.6","4.18","7.3","42.2","42.4","42.6","54.1","56.4","59.10","83.3","83.6","83.7","84.5","92.9"],"阮一峰ecmascript":["3.1"],"是一种由":["3.2"],"ecma":["3.2"],"国际":["3.2"],"european":["3.2"],"computer":["3.2"],"是一个脚本语言":["3.3"],"注意":["3.3","56.4","121.12"],"也是脚本语言":["3.3"],"通常可以看作是":["3.3"],"的基础上做了大量改进":["3.4"],"包括正则表达式":["3.4"],"异常处理":["3.4"],"更严格的错误定义等":["3.4"],"es4":["3.4"],"未完成":["3.4"],"被放弃":["3.4"],"在制定过程中遇到了较大的争议和复杂性":["3.4"],"最终被放弃":["3.4"],"相关特性后来分别在后续版本中被引入":["3.4"],"es5":["3.4"],"添加了严格模式":["3.4"],"strict":["3.4"],"mode":["3.4","121.6"],"提供更安全的编程环境":["3.4"],"新增了":["3.4"],"json":["3.4","41.5","122.13","122.18","122.23","125.3","127.2","157.2"],"使得操作":["3.4"],"作为一种脚本语言":["4.1"],"其应用范围也越来越广泛":["4.1"],"代码中":["4.2"],"所有的变量":["4.2"],"函数和类等都只在当前模块的作用域内有效":["4.3"],"每个模块都有自己的职责":["4.4"],"提高了代码的可重用性":["4.5"],"es6":["4.6","4.24","4.28","57.1","78.11"],"export":["4.7","4.8","4.17","4.19","4.21","111.10","157.9"],"关键字导出一个函数":["4.8"],"module1":["4.9"],"import":["4.10","4.14","81.15","82.10","84.2","84.3","84.4","85.2","85.3","85.4","85.5","87.3","90.17","90.18","90.19","90.20","108.2","111.7","111.12","149.1","155.6"],"关键字导入其他模块中的单个变量":["4.11"],"关键字导入其他模块中的函数":["4.12"],"main":["4.13","4.14"],"一个模块还可以有一个默认导出":["4.15"],"age":["4.16","5.10","7.2","8.18","8.22","10.8","10.11","31.2","34.3","46.6","47.6","53.2","56.3","56.18","98.13","99.1","99.6","99.8"],"default":["4.17","111.10","157.9"],"function":["4.17","5.19","26.3","26.7","26.12","31.1","31.8","34.1","36.1","42.6","44.2","44.4","53.1","53.2","53.3","54.1","59.3","78.14","78.17","78.19","98.8","100.2","101.2","101.3","101.7","107.3","118.8","119.4"],"name":["4.18","4.19","5.10","7.2","7.4","8.22","10.8","10.10","10.11","17.1","24.21","34.3","42.2","42.4","42.6","46.6","47.6","53.1","53.2","54.2","57.2","59.3","67.23","67.24","67.25","92.9","99.6","99.8","103.3","109.1","125.3"],"as":["4.20","82.11","82.13","82.14","98.14","149.1"],"myage":["4.22"],"这样可以优化代码加载":["4.23"],"提高页面的响应速度":["4.23"],"需要在":["4.26"],"无需显式指定":["4.27"],"总结":["4.28","120.2"],"模块化是一种优雅":["4.28"],"就用传递的参数":["5.2"],"if":["5.3","24.24","36.4","36.5","41.5","43.4","53.3","92.13","107.5","108.3","108.4","123.3"],"typeof":["5.3","30.5"],"undefined":["5.3","5.4","5.6","10.4","26.7","28.10","29.3","30.15","59.8","104.1"],"或者明确的传递":["5.4"],"typeerror":["5.5"],"cannot":["5.5"],"read":["5.5"],"property":["5.5","90.12"],"of":["5.5","9.10","9.12","65.12","74.6"],"上面代码只使用了对象的解构赋值默认值":["5.5"],"没有使用函数参数的默认值":["5.5"],"只有当函数":["5.5"],"的参数是一个对象时":["5.5"],"y":["5.6","100.1"],"return":["5.6","5.12","5.15","8.6","24.24","36.1","36.4","37.3","37.6","37.7","43.3","56.4","81.11","100.1","108.4","108.5","111.10","123.3"],"options":["5.7","121.10"],"再优化":["5.7"],"rest":["5.9"],"syntax":["5.9"],"arrlike":["5.10"],"job":["5.10"],"而它所对应的数组应该是这样子的":["5.10"],"arr":["5.10","9.9","9.10","38.0","38.3","38.4","38.6","40.0","40.4","43.5","43.6","43.7","101.6"],"这里我们说类数组对象与数组的性质相似":["5.10"],"是因为类数组对象在":["5.10"],"访问":["5.10"],"赋值":["5.10"],"获取长度":["5.10"],"上的操作与数组是一致的":["5.10"],"具体内容可查阅相关的类数组使用":["5.10"],"在函数体中定义了":["5.10"],"也不能省略圆括号":["5.11"],"add":["5.11","36.1","100.2","100.3","101.3","101.6","124.0","157.2"],"也可以":["5.12"],"console":["5.12","6.4","6.13","7.5","8.3","8.12","8.13","8.14","8.22","14.2","15.2","25.6","25.12","28.12","28.13","29.11","31.3","31.6","42.4","43.3","43.4","56.15","59.3","90.28","98.8","106.2","107.3","107.5","118.7","118.8","123.3"],"log":["5.12","7.5","8.13","8.14","8.22","14.2","15.2","25.6","25.12","28.12","28.13","31.3","31.6","42.4","43.3","43.4","56.15","59.3","90.28","98.8","106.2","118.7","118.8","123.3"],"与解构赋值结合使用":["5.12"],"函数中的":["5.13"],"arguments":["5.13","100.4"],"引入了箭头函数":["5.14"],"arrow":["5.14"],"parameter1":["5.15"],"parameter2":["5.15"],"函数体":["5.15","26.3"],"没有参数":["5.16"],"greet":["5.16"],"比如函数是否作为对象的方法调用":["5.17"],"是否使用":["5.17"],"关键字等":["5.17"],"而在箭头函数中":["5.17"],"继承自上层作用域":["5.17"],"指向的是定义箭头函数的外层函数或代码块的":["5.17"],"传统函数中的this":["5.17"],"如果箭头函数的函数体为空或只有一个表达式":["5.18"],"可以省略花括号和":["5.18"],"都不允许最后一个参数后面出现逗号":["5.19"],"clownseverywhere":["5.19"],"param1":["5.19"],"param2":["5.19"],"结构":["5.20"],"以前明确要求":["5.20"],"命令后面必须跟参数":["5.20"],"我们也可将字符串常用的操作方法归纳为增":["6.1"],"而是创建字符串的一个副本":["6.2","6.5"],"let":["6.3","6.4","6.8","6.9","6.13","6.16","6.20","9.4","9.5","9.8","9.9","10.6","24.8","24.9","24.10","24.14","24.17","24.19","24.23","24.26","24.29","24.30","24.31","25.12","30.2","30.3","30.4","37.3","37.6","38.2","43.6","53.2","90.4","98.1","98.5","98.12","104.1","106.1","106.2","139.3","141.3"],"stringvalue":["6.3","6.4","6.8","6.9"],"hello":["6.3","6.4","51.9","79.22"],"这三个方法都返回调用它们的字符串的一个子字符串":["6.4"],"而且都接收一或两个参数":["6.4"],"world":["6.4","51.9","79.22"],"再进行操作":["6.5"],"后或前后所有空格符":["6.6"],"再返回新的字符串":["6.6"],"表示要将字符串复制多少次":["6.7"],"然后返回拼接所有副本后的结果":["6.7"],"直至满足长度条件":["6.8"],"没有第二个参数默认空格":["6.8"],"由传给方法的整数参数指定":["6.11"],"如果没找到":["6.12"],"则返回":["6.12","29.9","29.10"],"message":["6.13","92.9","108.4","123.3"],"foobarbaz":["6.13"],"返回参数指定位置的字符":["6.14"],"支持负索引":["6.14"],"针对正则表达式":["6.17"],"regexp":["6.18","6.19","51.4"],"返回数组":["6.18"],"找到则返回匹配索引":["6.19"],"可用函数":["6.20"],"引入了模板字符串":["7.1"],"john":["7.2","10.8","46.6","47.6","57.2"],"multilinetext":["7.3"],"is":["7.3","92.9"],"a":["7.3","8.17","9.12","28.4","31.8","36.1","56.6","56.8","65.11","74.5","76.2","92.9","98.12","99.10","101.2","101.4","103.2","103.3","104.1","121.4","122.23","131.4"],"multi":["7.3"],"javascript":["7.4","8.8","8.11","8.12","8.20","10.4","10.10","18.4","27.3","28.11","31.5","32.1","34.1","35.1","36.3","41.3","41.4","42.6","42.8","44.2","45.1","45.3","46.6","47.6","49.0","51.1","51.2","51.9","53.1","57.2","59.3","78.2","78.8","87.3","87.6","87.7","88.5","88.6","102.2","105.0","111.6","120.1","125.1","130.7"],"values":["7.5","24.23","113.2","123.3"],"包含模板字符串中的文本部分":["7.5"],"等同于":["8.1","28.13"],"上面代码中":["8.1","8.6","28.10"],"变量":["8.1"],"直接写在大括号里面":["8.1"],"这时":["8.1"],"属性名就是变量名":["8.1"],"属性值就是变量值":["8.1"],"sex":["8.4","8.18","56.3"],"man":["8.4"],"ex2":["8.4"],"属性名由数字":["8.5"],"字母":["8.5"],"object":["8.6","28.3","28.9","52.1","57.1","57.2","57.4"],"setprototypeof":["8.6"],"方法之中":["8.6"],"通过":["8.6","30.6","67.3","89.2","92.12"],"apple":["8.8"],"shape":["8.9"],"球形":["8.9"],"taste":["8.9","8.15"],"甜":["8.9","8.15"],"pen":["8.9","8.15"],"则没有任何效果":["8.11"],"没有属性便为空":["8.12"],"字符串在对象中展开":["8.13"],"alex":["8.13","8.22"],"feature":["8.15"],"x":["8.17","10.6","48.5","98.5","100.1","100.2","100.3","131.3","137.2"],"zhangsan":["8.18","59.11"],"male":["8.18"],"param":["8.18"],"后者的":["8.20"],"nan":["8.20","30.16","98.2"],"不等于自身":["8.20"],"以及":["8.20"],"等于":["8.20"],"缺乏一种运算":["8.20"],"如果目标对象与源对象有同名属性":["8.21"],"或多个源对象有同名属性":["8.21"],"则后面的属性会覆盖前面的属性":["8.21"],"汇总":["8.21"],"基本用法":["8.21","8.22"],"属性的键值对数组":["8.22"],"返回键数组":["8.22"],"数组新增方法":["9.0"],"将参数中所有值作为元素形成数组":["9.1"],"没有参数则返回空数组":["9.1"],"array":["9.6","9.9","9.10","24.0","38.1","52.1","90.28"],"复制起始位置":["9.11"],"可选":["9.11","50.2"],"复制结束位置":["9.11"],"key":["9.12","28.2","46.1","46.2","47.1","47.2","56.5","110.4"],"for":["9.13","9.14","25.12","93.4","97.2","139.3"],"的":["9.15","28.10","88.2","90.31"],"方法用于查找值":["9.15"],"指定转换的嵌套层数":["9.16"],"方法":["9.17","32.5","35.2","41.4","43.0","49.10","59.12","83.4"],"参数1":["9.17"],"遍历函数":["9.17"],"destructuring":["10.0"],"assignment":["10.0"],"将数组的元素提取出来并赋值给变量":["10.1"],"numbers":["10.3","10.4","10.5","24.30","24.31","24.32","84.5"],"将对象的属性值提取出来并赋值给变量":["10.7"],"fullname":["10.9"],"bob":["10.11"],"address":["10.11"],"getelementbyid":["11.1","138.2","141.3"],"id":["11.1","23.0","68.1","74.6","88.6"],"获取具有指定":["11.1"],"的元素":["11.2"],"var":["11.2","25.5","28.8","30.3","30.14","31.4","34.1","34.2","34.3","44.1","44.2","44.3","44.4","46.6","47.6","56.2","59.3","59.11","121.7","138.2","141.3"],"element":["11.2","21.2","22.1","23.1","23.2"],"document":["11.2","20.7","23.1","28.13","45.2","45.4","138.2","141.3","144.7","152.1","152.2"],"back":["12.1"],"导航到上一个页面":["12.1","12.2"],"history":["12.2"],"以下是一些常见的":["13.0"],"window":["13.0","17.2","37.1","37.4","145.2","146.1","148.1"],"它是":["13.0","81.1"],"的顶级对象":["13.0"],"表示浏览器窗口或标签页":["13.0"],"url":["14.1","17.1","73.7","82.5","108.5","118.3","121.17"],"protocol":["14.1"],"location":["14.2","112.0"],"useragent":["15.1"],"包含用户代理字符串":["15.1"],"navigator":["15.2"],"屏幕的宽度":["16.1"],"屏幕宽度":["16.2"],"screen":["16.2"],"width":["16.2","67.25","69.5","70.3","72.2","73.7","141.3","144.7","145.2","146.1","148.1"],"像素":["16.2"],"获取屏幕的高度":["16.2"],"specs":["17.1"],"open":["17.2","32.4","32.6","41.5","120.1"],"https":["17.2","79.23","91.11","146.2"],"动态创建任意":["18.1"],"clonenode":["18.1"],"复制现有的":["18.1"],"传入参数":["18.1"],"true":["18.1","24.20","24.28","28.3","28.11","29.7","29.10","30.15","30.16","98.3","105.0","143.1","157.7"],"会复制所有子节点":["18.1"],"appendchild":["18.1","152.1","152.2"],"也需要关注两个因素":["18.2"],"首先由父节点删除子节点":["18.2"],"其次是要删除哪个子节点":["18.2"],"removechild":["18.2"],"树中的任意节点都不是孤立存在的":["18.3"],"的子节点":["18.4"],"li":["18.4","75.5","75.6"],"css":["18.4","65.3","65.5","65.7","65.8","67.18","67.19","67.20","69.3","69.7","72.2","74.4"],"基础":["18.4"],"web":["18.4","27.0","46.0","47.0","79.0","118.2"],"实际应用中非常灵活":["18.5"],"nextsibling":["18.5"],"获取后一个节点":["18.5"],"html":["19.1","20.10","27.2","27.3","69.1","73.0","75.0","75.1","75.2","75.3","75.4","75.5","75.6","75.7","75.8","75.9","75.10","75.12","75.14","75.15","78.12","86.4","86.10","86.12","153.6"],"xml":["19.1","32.1","78.1","79.9"],"等文档结构的编程接口":["19.1"],"它将文档表示为一个树状结构":["19.1"],"每个节点都是文档中的一个元素":["19.1"],"en":["19.2","67.22","67.23","67.24"],"head":["19.2","67.22","67.23","67.24","74.1","118.15"],"meta":["19.2","67.22","67.23","67.24","74.1"],"charset":["19.2","67.22","67.23","67.24","67.25","74.1"],"utf":["19.2","67.22","67.23","67.24","67.25"],"主要分为元素节点":["19.3"],"属性节点":["19.3"],"文本节点等":["19.3"],"元素节点":["19.3"],"其实就是":["19.3"],"内置的专门用于":["19.4"],"dom":["19.4","65.10","65.14","80.11","82.11","82.13","82.14","82.15","84.6","86.13","91.8","91.9"],"的对象":["19.4"],"该对象包含了若干的属性和方法":["19.4"],"它是用来描述程序的行为或状态的":["20.1"],"一旦行为或状态发生改变":["20.1"],"等待事件发生":["20.2"],"触发":["20.2"],"时":["20.2","29.9","29.10","48.4","59.1","81.4","81.5"],"便立即调用一个函数":["20.2"],"addeventlistener":["20.2"],"应该将其从元素上移除":["20.3"],"当用户双击鼠标左键时触发":["20.5"],"mousedown":["20.5"],"当用户按下鼠标按钮时触发":["20.5"],"此事件在按下任何鼠标按钮时都会触发":["20.5"],"包括左键":["20.5"],"中键和右键":["20.5"],"mouseup":["20.5"],"当用户释放鼠标按钮时触发":["20.5"],"mousemove":["20.5","20.11"],"当用户移动鼠标指针时触发":["20.5"],"queryselector":["20.6","20.7"],"input":["20.7"],"剪切还是使用其他输入方法":["20.8"],"只要文本框内容发生变化":["20.8"],"就会触发":["20.8"],"change":["20.8"],"目标元素等":["20.9"],"你可以在事件处理程序中使用这些信息来执行逻辑操作":["20.9"],"btn":["20.9"],"方法来停止事件冒泡":["20.10"],"body":["20.10","152.1","152.2"],"h3":["20.10"],"事件流":["20.10"],"p":["20.10","65.9"],"click":["20.11","91.4","141.4"],"mouseover":["20.11"],"mouseout":["20.11"],"tip":["20.12","25.2","26.8","35.2"],"使用事件委托的过程如下":["20.12"],"选择一个合适的父元素":["20.12"],"该元素包含你希望委托处理的子元素":["20.12"],"将事件监听器绑定到父元素上":["20.12"],"监听你希望处理的事件类型":["20.12"],"createelement":["21.0","78.2"],"创建新的元素节点":["21.0"],"方法创建新元素":["21.1"],"attributename":["21.2"],"attributevalue":["21.2"],"parentelement":["21.3"],"newelement":["21.3"],"这将把":["21.3"],"backgroundcolor":["22.1","145.2","148.1","152.1","152.2"],"red":["22.1","24.10","24.15","98.6","135.0"],"这里的":["22.1"],"classname":["22.2"],"移除类名":["22.2"],"remove":["22.2"],"根据元素的":["23.0"],"获取元素节点":["23.0"],"传入元素的":["23.1"],"content":["23.2","41.5","65.14","66.9","66.10","67.24","67.25","72.2","92.9"],"或者":["23.2","102.7"],"创建数组":["24.1"],"利用数组字面量创建数组":["24.1"],"数组的字面量是方括号":["24.1"],"用来访问数组元素的序号":["24.2"],"数组下标从":["24.2"],"开始":["24.2"],"数组可以通过索引来访问":["24.2"],"设置":["24.2","89.2"],"修改对应的数组元素":["24.2"],"我们可以通过数组名":["24.2"],"的形式来获取数组中的元素":["24.2"],"数组基本操作可以归纳为":["24.5"],"第四种则不会对原数组产生影响":["24.6"],"并将它们添加到数组末尾":["24.7"],"返回数组的最新长度":["24.7"],"然后返回新的数组长度":["24.8"],"插入的元素":["24.9"],"返回空数组":["24.9"],"colors":["24.10","24.14","24.15"],"最后一项不影响原数组":["24.11"],"length":["24.12","24.13","38.2"],"值":["24.12","24.13","32.6","98.14"],"返回被删除的项":["24.12","24.13"],"返回包含删除元素的数组":["24.14"],"green":["24.15"],"blue":["24.15"],"yellow":["24.15"],"purple":["24.15"],"常用":["24.16"],"返回删除元素的数组":["24.17"],"对原数组产生影响":["24.17"],"返回元素坐标或者元素值":["24.18"],"否则":["24.20","85.4"],"people":["24.21","98.13"],"matt":["24.21"],"数组有两个方法可以用来对元素重新排序":["24.22"],"else":["24.24","43.4","86.9"],"常见的转换方法有":["24.25"],"返回包含所有项的字符串":["24.26"],"常用来迭代数组的方法":["24.27"],"则这个方法返回":["24.28","24.29"],"条件分支语句":["25.1"],"循环语句":["25.1"],"i":["25.1","25.5","25.12","28.12","38.2","51.10","111.6","139.3"],"条件表达式2":["25.2"],"执行流程":["25.2"],"表达式":["25.3"],"case":["25.3"],"表达式1":["25.3"],"代码":["25.3","27.3","78.2"],"break":["25.3"],"中一共有三种循环语句":["25.4"],"包括数组和其他可枚举属性的对象":["25.9"],"不适用于迭代数组元素的值":["25.9"],"迭代的顺序不一定是按照属性在对象中的顺序":["25.9"],"可能会有不可预测的结果":["25.9"],"通常不推荐用于迭代数组":["25.9"],"因为它可能会迭代数组的原型链上的属性":["25.9"],"语法":["25.9","25.10","65.5","78.0","86.6","98.14","111.9"],"等":["25.10","80.11"],"迭代的顺序是按照对象的迭代协议定义的顺序":["25.10"],"通常是按照对象中元素的顺序":["25.10"],"不会迭代对象的属性":["25.10"],"只迭代值":["25.10"],"循环虽然都是用于迭代对象的方法":["25.11"],"但它们有一些不同之处":["25.11"],"迭代对象的内容不同":["25.11"],"循环迭代对象的是键名":["25.11"],"会终止离他最近的循环":["25.12"],"里面":["26.0"],"必须小写":["26.2"],"是把一个或者多个功能通过函数的方式封装起来":["26.4"],"同样也需要传递相应的参数":["26.6"],"实参":["26.6"],"参数的作用":["26.6"],"在函数内部某些值不能固定":["26.6"],"我们可以通过参数在调用函数时传递不同的值进去":["26.6"],"多的参数定义为":["26.7"],"函数形参实参个数匹配":["26.7"],"getsum":["26.7"],"num1":["26.7","30.2"],"num2":["26.7"],"此时调用函数就可以得到函数体内return":["26.8"],"后面的值":["26.8"],"注意事项":["26.8"],"在使用":["26.8","43.9"],"语句时":["26.8"],"函数会停止执行":["26.8"],"语句之后的代码不被执行":["26.8"],"并返回指定的值":["26.8"],"只能返回一个值":["26.8"],"如果用逗号隔开多个值":["26.8"],"的区别":["26.9"],"结束当前的循环体":["26.9"],"声明":["26.11"],"通常用于在":["27.0"],"浏览器中编写交互式前端代码":["27.0"],"示例":["27.1","54.1","54.2","57.2"],"它需要被嵌入":["27.2"],"doctype":["27.3","67.22","74.1","79.23","86.4"],"代码写在独立的以":["27.4"],"注释单行代码":["27.6"],"注释多行代码":["27.7"],"什么是对象":["28.2"],"简单说":["28.2"],"对象就是一组":["28.2"],"键值对":["28.2"],"的集合":["28.2"],"1e2":["28.3"],"1e":["28.3"],"0xff":["28.3"],"01":["28.3"],"引擎读到上面这行代码":["28.5"],"会发现可能有两种含义":["28.5"],"第一种可能是":["28.5"],"这是一个表达式":["28.5"],"表示一个包含":["28.5"],"属性的对象":["28.5"],"第二种可能是":["28.5"],"这是一个语句":["28.5"],"上面代码分别采用点运算符和方括号运算符":["28.7"],"读取属性":["28.7"],"请注意":["28.7"],"如果使用方括号运算符":["28.7"],"键名必须放在引号里面":["28.7"],"否则会被当作变量处理":["28.7"],"foo":["28.7","28.8"],"bar":["28.7"],"obj":["28.8","35.2","56.5","56.9","56.10","56.17","56.20","104.1"],"keys":["28.9"],"命令删除对象":["28.10"],"删除后":["28.10"],"再读取":["28.10"],"属性就会返回":["28.10"],"如果包含就返回":["28.11"],"否则返回":["28.11","29.9","29.10"],"它的左边是一个字符串":["28.11"],"表示属性名":["28.11"],"右边是一个对象":["28.11"],"键名":["28.12"],"键值":["28.12"],"例二":["28.13"],"links":["28.13"],"href":["28.13"],"也被称为":["29.1"],"操作符":["29.1"],"减":["29.2"],"乘":["29.2"],"空赋值":["29.3"],"br":["29.3","74.2","141.3"],"只有当变量的值为":["29.3"],"null":["29.3","30.15","80.4"],"或":["29.3","30.3","80.9","87.2","114.5","121.9","122.11","122.21"],"还是":["29.5","29.6","91.1"],"都会使原变量立刻增加":["29.5"],"不同的是":["29.5"],"和后自减":["29.6"],"无论是":["29.6"],"小于号":["29.7"],"precedence":["29.13"],"是不一样的":["29.13"],"优先级高的运算符先执行":["29.13"],"优先级低的运算符后执行":["29.13"],"基本类型主要为以下":["30.1"],"intnum":["30.2"],"10进制的55":["30.2"],"070":["30.2"],"8进制的56":["30.2"],"当使用":["30.3"],"声明了变量但没有初始化时":["30.3"],"标示":["30.4"],"逻辑上讲":["30.5"],"值表示一个空对象指针":["30.5"],"这也是给":["30.5"],"和":["30.6","35.2","41.1","59.10","66.10","67.6","67.10","67.11","67.13","67.14","67.15","67.16","75.9","80.10","88.3","92.17","104.1","118.2","134.2","144.1"],"不可变的":["30.7"],"符号的用途是确保对象属性使用唯一标识符":["30.7"],"不会发生属性冲突的危险":["30.7"],"复杂类型统称为":["30.8"],"常用方式为对象字面量表示法":["30.9"],"但跟其他语言不同的是":["30.10"],"数组中每个槽位可以存储任意类型的数据":["30.10"],"也有属性和方法":["30.11"],"跟其他引用类型一样":["30.11"],"函数存在三种常见的表达方式":["30.11"],"函数声明":["30.11"],"还包括":["30.12"],"类型转换指将一种数据类型转换为其他类型":["30.13"],"tostring":["30.14"],"num":["30.14","98.12","101.2"],"布尔值":["30.15"],"转换为":["30.15","30.16","78.2"],"其余是":["30.16"],"字符串":["30.16"],"空串":["30.16"],"基本数据类型和引用数据类型存储在内存中的位置不同":["30.17"],"obj2":["30.19","59.3"],"简单类型的值存放在栈中":["30.20"],"在栈中存放的是对应的值":["30.20"],"合法":["31.1"],"声明作用域":["31.1"],"一个函数内部定义一个变量":["31.1"],"在函数退出时被销毁":["31.1"],"test":["31.1"],"局部变量":["31.1"],"会被提升":["31.3"],"声明的变量则会":["31.4"],"引擎会自动将多余的声明在作用域顶部合并为一个声明":["31.5"],"循环逻辑":["31.6"],"之后则不会":["31.6"],"因为遇到":["31.6"],"就会形成作用域块":["31.6"],"但是他是常量":["31.7"],"声明之后不能修改":["31.7"],"尝试修改":["31.7"],"声明的变量会导致运行时错误":["31.7"],"tom":["31.8"],"and":["32.1"],"异步交互需要服务器逻辑进行配合":["32.2"],"需要完成以下步骤":["32.2"],"创建":["32.2","32.3","109.14","118.2","125.6"],"xmlhttprequest":["32.3"],"对象的":["32.4","32.5"],"方法与服务器建立连接":["32.4"],"xhr":["32.4","32.8"],"send":["32.5"],"将客户端页面的数据发送给服务端":["32.5"],"属性有五个状态":["32.6"],"如下显示":["32.6"],"状态":["32.6","79.11"],"描述":["32.6"],"unsent":["32.6"],"未打开":["32.6"],"方法还未被调用":["32.6"],"opened":["32.6"],"创建xmlhttprequest对象":["32.8"],"初始化参数的内容":["32.8"],"type":["32.8","32.9","41.5","65.12","73.2","73.3","75.11"],"post":["32.9","118.2"],"datatype":["32.9"],"group":["33.1","155.3"],"closure":["34.0"],"它可以访问其外部函数中的变量和参数":["34.1"],"outerfunction":["34.1","44.2","44.4"],"counter":["34.2"],"count":["34.2","83.7"],"increaseage":["34.3"],"这种方式可以避免全局命名冲突":["34.4"],"并提供了一种模块化的封装方式":["34.4"],"创建工厂函数":["34.4"],"可以创建工厂函数":["34.4"],"用于生成对象实例":["34.4"],"因此":["34.5","83.5"],"在使用闭包时要注意内存管理":["34.5"],"避免过度使用闭包导致内存泄漏":["34.5"],"对其中一个对象的修改会影响到另一个对象":["35.1"],"中":["35.1","41.0","51.1","53.1","78.4","78.5","78.7","80.6","82.10","85.1","88.2","90.0","90.29","118.3"],"stringify":["35.2"],"deepcopy":["35.2"],"以下是一个简单的示例来说明":["36.1"],"函数柯里化的概念和用法":["36.1"],"可以将函数的执行延迟到后续的调用中":["36.2"],"这在需要等待特定条件满足或事件发生时非常有用":["36.2"],"函数组合":["36.2"],"可以轻松地将多个函数组合成一个新的函数":["36.2"],"curried":["36.4","36.5","36.6"],"args":["36.4","36.5","36.6","37.3","37.7","90.28"],"includes":["36.5"],"placeholder":["36.5","77.1"],"curry":["36.6"],"func":["36.6","37.6"],"节流":["37.0"],"throttling":["37.0"],"和防抖":["37.0"],"debouncing":["37.0"],"则立即执行函数并设置定时器":["37.2"],"如果定时器存在":["37.2"],"则忽略该次函数调用":["37.2"],"当定时器触发后":["37.2"],"清除定时器":["37.2","80.13"],"以便在下次函数调用时重新开始计时":["37.2"],"以下是一个简单的节流函数的实现示例":["37.2"],"oldtime":["37.3"],"date":["37.3","48.5"],"now":["37.3"],"newtime":["37.3"],"防抖的实现思路是设置一个定时器":["37.5"],"在函数被调用时先清除之前的定时器":["37.5"],"并设置一个新的定时器":["37.5"],"如果在指定的时间内没有新的函数调用发生":["37.5"],"wait":["37.6"],"immediate":["37.6"],"timeout":["37.6"],"timerid":["37.7"],"cleartimeout":["37.7"],"settimeout":["37.7"],"len":["38.2"],"unique":["38.3","38.4","38.6"],"filter":["38.5","74.6"],"事件循环机制":["39.0"],"在执行代码时会按照代码语句的顺序执行形成一个执行栈":["39.1"],"默认会从上到下依次执行":["39.1"],"执行过程中会将任务分成两类":["39.1"],"table":["39.2"],"并注册函数":["39.2"],"异步任务又可以分为宏任务和微任务":["39.2"],"微任务":["39.2"],"process":["39.2"],"nexttick":["39.2"],"microtask":["39.3"],"微任务队列任务":["39.3"],"当前微任务执行完后":["39.3"],"判断是否有":["39.3"],"ui":["39.3","79.1"],"渲染如果有就执行渲染过程":["39.3"],"没有就跳过":["39.3"],"flat":["40.1"],"res2":["40.2"],"flatten":["40.3"],"res5":["40.4"],"fn":["40.4"],"对象代表一个异步操作的最终完成或失败":["41.0"],"并返回一个值":["41.0"],"构造函数来创建":["41.1"],"它接收一个带有两个参数的回调函数":["41.1"],"回调函数包含两个参数":["41.1"],"resolve":["41.1"],"reject":["41.1"],"实例的":["41.2"],"then":["41.2","41.4","107.3"],"方法可以处理异步操作成功的结果":["41.2"],"方法中返回新的":["41.3"],"实例":["41.3","88.3","108.2"],"可以将多个异步操作连接起来":["41.3"],"实例都成功完成时才会成功":["41.4"],"并将所有":["41.4"],"实例的结果作为一个数组传递给":["41.4"],"promises":["41.4"],"promise1":["41.4"],"setrequestheader":["41.5"],"application":["41.5","144.7","145.2","146.1","148.1"],"onload":["41.5"],"status":["41.5"],"responsetext":["41.5"],"中每个对象的基础":["42.1"],"每个":["42.1","83.1"],"sayhello":["42.2"],"你可以通过":["42.3"],"proto":["42.3"],"属性来访问对象的原型对象":["42.3"],"eat":["42.4"],"我们已经看到了这种方式的示例":["42.6"],"animal":["42.6","53.1","53.3","99.2"],"方法是一种更简单的方式来创建一个对象并指定其原型":["42.7"],"它接受一个原型对象作为参数":["42.7"],"然后返回一个新对象":["42.7"],"它提供了一种更简单的方式来实现原型继承":["42.8"],"类可以使用":["42.8"],"关键字继承另一个类的属性和方法":["42.8"],"方法允许你在运行时更改对象的原型":["42.9"],"这个方法接受两个参数":["42.9"],"要更改原型的对象和新的原型对象":["42.9"],"中的原型继承与传统面向对象编程语言中的继承有一些重要区别":["42.10"],"动态性":["42.11"],"原型链":["42.12"],"对象与类":["42.13"],"有一些最佳实践可以帮助你编写更清晰":["42.14"],"避免直接修改内建对象的原型":["42.15"],"将方法添加到原型上":["42.16"],"注意原型链中的属性和方法覆盖":["42.17"],"使用":["42.18","57.4","66.10","99.4","99.5","117.1","117.8"],"reduce":["43.1","43.4"],"callbackfn":["43.1"],"initialvalue":["43.1"],"sum":["43.3"],"prev":["43.3"],"cur":["43.3","43.4"],"newarr":["43.4"],"pre":["43.4","91.4"],"in":["43.4","109.15","132.1"],"result":["43.8","107.3"],"subject":["43.8"],"math":["43.8","136.3"],"score":["43.8"],"并将结果返回为单个值的情况":["43.9"],"方法时":["43.9"],"作用域是指变量和函数在代码中可访问的范围":["44.0"],"globalvariable":["44.1","44.3"],"global":["44.1","44.3","44.4","109.1","110.3"],"outervariable":["44.2"],"如果找不到":["44.3"],"就会向上一级作用域继续查找":["44.3"],"直到找到该变量或达到全局作用域":["44.3"],"variable":["44.4"],"是一种在客户端浏览器上存储数据的机制":["45.0"],"允许开发者在用户计算机中存储和检索有关网站的信息":["45.0"],"属性是一个字符串":["45.1"],"包含一个或多个以分号分隔的键值对":["45.1"],"属性来获取存储在浏览器中的所有":["45.2"],"的过期时间设置为过去的时间来删除":["45.3"],"返回的是一个字符串":["45.4"],"包含当前域名下的所有":["45.4"],"需要自行解析和处理字符串来获取特定":["45.4"],"方法将数据存储到":["46.1","47.1"],"getitem":["46.2","47.2"],"方法根据键从":["46.2","47.2"],"localstorage":["46.3","46.4","46.5"],"parse":["46.6","47.6"],"方法将其还原":["46.6","47.6"],"user":["46.6","47.6","109.1"],"sessionstorage":["47.3","47.4","47.5"],"表示星期六":["48.1"],"getfullyear":["48.1"],"获取四位数的年份":["48.1"],"返回值为一个年份":["48.1"],"gethours":["48.1"],"获取小时数":["48.1"],"getmilliseconds":["48.1"],"获取毫秒数":["48.1"],"关键词来定义":["48.2"],"以下代码定义了名为":["48.2"],"年":["48.3","111.6"],"月":["48.3"],"日":["48.3","48.4"],"00":["48.4"],"分":["48.4"],"pi":["49.1","136.3","139.3"],"函数":["49.4","49.13"],"返回一个浮点":["49.4"],"伪随机数范围从":["49.4"],"返回的是一个数字四舍五入的整数":["49.7"],"返回基数":["49.10"],"base":["49.10","157.9"],"的指数":["49.10"],"不管正数还是负数":["49.14"],"直接去掉小数点及之后的部分":["49.14"],"约为":["50.1"],"parseint":["50.2"],"string":["50.2","99.1","99.6","99.8","99.10","106.2"],"radix":["50.2"],"将字符串转换为整数":["50.2"],"表示进制数":["50.2"],"默认为":["50.2","134.4"],"parsefloat":["50.2"],"将字符串转换为浮点数":["50.2"],"可以用来搜索":["51.1"],"替换和提取字符串中的特定部分":["51.1"],"将正则表达式模式包围起来":["51.3"],"后面可以跟上一些修饰符":["51.3"],"构造函数创建正则表达式":["51.4"],"匹配字符串的开头":["51.5"],"以下是常用的修饰符":["51.6"],"g":["51.6","51.10","102.7"],"z0":["51.7"],"匹配多个字母或数字字符":["51.7"],"search":["51.8"],"并返回第一个匹配的索引":["51.8"],"如果没有找到则返回":["51.8"],"replace":["51.8","74.5"],"使用新的字符串替换匹配正则表达式的结果":["51.8"],"并返回替换后的字符串":["51.8"],"使用编号访问捕获的子串":["51.9"],"str":["51.9","106.2"],"pattern":["51.9"],"match":["51.9"],"以下是常用的正则表达式标志":["51.10"],"全局匹配":["51.10"],"找到所有匹配项而不仅仅是第一个":["51.10"],"表单验证":["51.11"],"使用正则表达式验证用户输入的表单数据":["51.11"],"如邮箱":["51.11"],"电话号码":["51.11"],"供开发者使用":["52.0"],"这些对象提供了一些常用或者基本而必要的功能":["52.0"],"属性和方法":["52.0"],"基础对象":["52.1"],"是用于表示和操作数组的对象":["52.3"],"是用于表示和操作字符串的对象":["52.4"],"是用于表示和操作数字的对象":["52.5"],"是表示和操作布尔值的对象":["52.6"],"是用于表示日期和时间的对象":["52.7"],"是用于进行数学计算的对象":["52.8"],"它提供了一系列与正则表达式相关的方法":["52.9"],"如匹配":["52.9"],"替换等":["52.9"],"可以通过原型链实现继承":["53.1"],"子类的原型对象指向父类的实例":["53.1"],"从而继承了父类的属性和方法":["53.1"],"父类":["53.1"],"并提供公有方法来访问和操作这些私有属性来实现":["53.2"],"私有属性":["53.2"],"由于其动态类型特性":["53.3"],"多态是天然支持的":["53.3"],"animalsound":["53.3"],"类是一种用于创建对象的模板或蓝图":["54.0"],"而构造函数是用于创建类的实例的特殊函数":["54.0"],"它们是面向对象编程的两种不同方式":["54.0"],"关键字来实例化对象":["54.1"],"构造函数内部使用":["54.1"],"关键字来引用新创建的对象":["54.1"],"并定义对象的属性和方法":["54.1"],"构造函数定义":["54.1"],"而对象则是类的实例":["54.2"],"类的方法在原型上定义":["54.2"],"因此实例共享相同的方法":["54.2"],"es6类定义":["54.2"],"面向对象是一种编程范式":["55.1"],"也称为函数成员":["55.2"],"类":["55.2","78.11"],"类是对象的模板或蓝图":["55.2"],"它定义了对象将具有的属性和方法":["55.2"],"类是一种抽象的概念":["55.2"],"它描述了对象的共同特征":["55.2"],"创建对象":["56.2"],"男":["56.3"],"sayhi":["56.3"],"构造函数约定首字母大写":["56.4"],"函数内的属性和方法前面需要添加":["56.4"],"表示当前对象的属性和方法":["56.4"],"构造函数中不需要":["56.4"],"返回结果":["56.4"],"当我们创建对象的时候":["56.4"],"必须用":["56.4"],"propertiesobject":["56.5","56.7"],"创建一个新对象":["56.5"],"使用现有的对象作为新对象的原型":["56.5"],"entries":["56.5"],"返回一个给定对象自身可枚举属性的":["56.5"],"obj1":["56.6","59.3","59.11"],"sym":["56.13"],"myproto":["56.14"],"及以上版本中":["57.1"],"可以使用":["57.1","66.2","66.4","122.7"],"getprototypeof":["57.1"],"来访问原型":["57.1"],"它指向该对象的原型对象":["57.1"],"它是所有对象的根原型":["57.2"],"共享属性和方法":["57.3"],"原型允许多个对象共享相同的属性和方法":["57.3"],"create":["57.4","157.3"],"规范":["58.0"],"优化和可靠的代码":["58.0"],"并避免一些常见的错误":["58.0"],"严格模式对于旧版":["58.0"],"代码的兼容性考虑较少":["58.0"],"因此需要显式地启用它":["58.0"],"严格模式可以应用到整个脚本文件或单个函数中":["58.0"],"启用整个脚本文件的严格模式":["58.0"],"函数执行":["59.1"],"解析器在调用函数每次都会向函数内部传递进一个隐含的参数":["59.2"],"全局的name属性":["59.3"],"smyh":["59.3"],"sayname":["59.3"],"vae":["59.3"],"中的箭头函数并不使用上面的准则":["59.4"],"而是会继承外层函数调用的":["59.4"],"指向":["59.5","59.8","59.10","59.11"],"可以":["59.7"],"调用":["59.7","88.4","88.5"],"一个函数":["59.7"],"与此同时":["59.7","59.10"],"this的指向并没有被改变":["59.8"],"此时相当于":["59.8"],"改变":["59.8"],"它还可以改变这个函数内部的":["59.10"],"这一点":["59.10"],"nickname":["59.11"],"数字1":["59.12"],"数字2":["59.12"],"数字3":["59.12"],"可以获取":["59.12"],"多个数值中的最大值":["59.12"],"另外":["59.12"],"由于":["59.12"],"方法在传递实参时":["59.12"],"把":["59.14","123.14"],"call":["59.14"],"apply":["59.14"],"这三个方法做一下对比":["59.14"],"你会发现":["59.14"],"实际开发中":["59.14"],"用于清除内外边距":["65.1"],"优点":["65.2"],"通过元素":["65.4"],"beaauty":["65.5"],"中间没有空格":["65.5"],"又称":["65.6"],"分组选择器":["65.6"],"p0":["65.9"],"link":["65.11","82.11","82.13","82.14","87.5"],"链接一开始的样式":["65.11"],"nth":["65.12"],"n":["65.12","98.9"],"第":["65.12"],"个子元素":["65.12"],"指定元素":["65.12"],"属性的":["65.13"],"元素":["65.13","134.3"],"创建了一个行内元素":["65.14"],"树中无法找到":["65.14"],"故为伪元素":["65.14"],"必须有":["65.14"],"选择器":["65.14"],"含义":["65.14"],"在元素内部前面插入内容":["65.14"],"只需在要成为":["66.1"],"direction":["66.2","66.5","136.6"],"属性更改主轴方向":["66.2"],"定义":["66.3"],"flex":["66.3","69.3"],"项目在主轴上的对齐方式":["66.3"],"start":["66.3","136.6"],"默认值":["66.3","134.1"],"如果项目超出了容器的宽度":["66.4"],"它们会缩小以适应":["66.4"],"grow":["66.6"],"属性可以控制项目在剩余空间中的放大比例":["66.6"],"basis":["66.7"],"属性定义了项目的基准尺寸":["66.7"],"项目内部可以再创建一个新的":["66.8"],"属性控制交叉轴上多行的对齐方式":["66.9"],"定义多行":["66.9"],"align":["66.10","67.13","67.14","67.15"],"items":["66.10"],"属性实现水平和垂直居中对齐":["66.10"],"两端对齐":["66.10"],"现代网页布局的终极解决方案":["67.0"],"布局":["67.1","67.2","67.27","67.28","69.8","74.4"],"布局是一种二维布局模型":["67.1"],"可以将网页划分为网格":["67.1"],"要使用":["67.2"],"grid":["67.2","67.4","67.5","67.9","67.21","67.26","67.27","67.28","67.30","67.33"],"通过定义网格的行和列":["67.3"],"我们可以创造出复杂的网页布局":["67.3"],"在网格容器中":["67.3"],"布局中":["67.4"],"网格线":["67.4"],"lines":["67.4"],"rows":["67.6","67.11"],"允许通过指定网格区域的名称来创建更具语义的布局":["67.7"],"通过在网格容器中使用网格区域名称":["67.7"],"而不是使用行和列属性":["67.7"],"columns":["67.8","67.11"],"gap":["67.9"],"row":["67.10","67.16"],"auto":["67.12"],"flow":["67.12"],"self":["67.15"],"创建网格布局":["67.17"],"track":["67.18"],"是相邻网格线之间的空间":["67.18"],"包括行轨道和列轨道":["67.18"],"我们可以通过设置网格轨道的大小和增长方式来控制网格布局":["67.18"],"template":["67.19","67.33","90.7","90.10","90.14","90.30","91.5","92.8","92.11","139.4","140.2","145.1","147.1","151.2"],"我们可以更加直观地定义网格布局":["67.19"],"使得布局结构更加清晰":["67.19"],"queries":["67.20"],"我们可以在不同的屏幕尺寸和设备上应用不同的网格布局":["67.20"],"container":["67.20","69.1","69.2","69.7"],"display":["67.20","69.3"],"lang":["67.22","67.23","67.24","111.9"],"viewport":["67.23","67.24","67.25"],"device":["67.25"],"initial":["67.25"],"scale":["67.25"],"title":["67.25","74.5","157.7","157.9"],"布局与":["67.26"],"适用场景":["67.27"],"布局的差异与共同点":["67.28"],"常见问题与最佳实践":["67.29"],"网格项目的排序与定位":["67.30"],"跨浏览器兼容性":["67.31"],"性能考虑":["67.32"],"使用网格模板":["67.33"],"和网格区域":["67.33"],"选择器的优先级为":["68.0"],"important":["68.0"],"c":["68.1","112.0","121.4","131.4"],"格式":["68.1"],"选择器的个数":["68.1"],"div":["69.1","70.0","76.1","86.17","90.7","90.30","91.5","92.8","92.11","95.4","140.2"],"400px":["69.5","69.6","70.3"],"height":["69.5","69.6","71.0","98.13","133.1","141.3","144.7","145.2","146.1","148.1","152.1"],"200px":["69.6"],"background":["69.6","71.0"],"skyblue":["69.6"],"position":["69.6","156.2"],"100px":["70.1"],"设置元素的宽度":["70.1"],"限定宽度":["70.3"],"border":["70.3"],"solid":["70.3","72.1"],"横向":["71.0"],"color":["71.0"],"ededed":["71.0"],"滚动条上的按钮":["71.0"],"left":["72.1"],"5px":["72.1"],"transparent":["72.1"],"right":["72.1"],"bottom":["72.1"],"而且可以指定多个":["73.0"],"可以用来解决某些兼容问题":["73.0"],"h2":["73.0"],"音频示例":["73.0"],"audio":["73.0","75.15"],"类型":["73.1","98.14"],"mime":["73.2","73.3"],"标签":["73.5","73.6"],"src":["73.7","88.3"],"要播放的视频的":["73.7"],"作用":["73.8"],"controls":["73.10"],"source":["73.10","120.1"],"播放":["73.11"],"暂停":["73.11"],"makebig":["73.11"],"放大":["73.11"],"makesmall":["73.11"],"文档通常包含以下结构":["74.1"],"内容":["74.2"],"有些标签是空标签":["74.2"],"没有结束标签":["74.2"],"用于插入换行":["74.2"],"引入了许多新特性":["74.3"],"如语义化标签":["74.3"],"添加样式和图像":["74.4"],"然后逐渐增加复杂性":["74.4"],"学习如何使用":["74.4"],"will":["74.5"],"regular":["74.5"],"just":["74.5"],"quick":["74.5"],"order":["74.6"],"plugins":["74.6","111.8","111.10"],"users":["74.6","112.0","121.4"],"need":["74.6"],"maintain":["74.6"],"manually":["74.6"],"webpack":["74.6"],"h6":["75.1"],"td":["75.9"],"action":["75.13"],"submit":["75.13"],"method":["75.13","118.15"],"h1":["75.14","91.5","91.12","95.1","95.2"],"网站标题":["75.14"],"并且在前后都会产生换行":["76.1"],"常见的块级标签包括":["76.1"],"最通用的容器标签":["76.1"],"用于将一组元素包裹在一起":["76.1"],"而是按照文本的自然流动排列":["76.2"],"常见的内联标签包括":["76.2"],"锚链接标签":["76.2"],"形成树状的结构":["76.3"],"例如":["76.3","76.4","90.29","92.13"],"可以将一段文本包裹在":["76.3"],"属性以键值对的形式出现":["76.4"],"放在标签的开始标签中":["76.4"],"规范中没有定义":["76.5"],"但可以在特定的应用中使用":["76.5"],"自定义标签应以":["76.5"],"data":["76.5","88.1","89.1","95.4"],"为前缀":["76.5"],"请输入登录密码":["77.1"],"v":["77.1","86.7","86.14","90.29","92.13","92.14","97.2","101.4","109.18"],"model":["77.1","86.14"],"react":["78.1","78.2","78.9","78.20","79.3","79.6","79.7","79.8","79.12","79.13","79.15","79.20","79.24","80.13","81.1","81.3","81.9","81.10","81.11","81.13","81.14","81.15","82.3","82.11","83.5","84.6","85.1","85.3","85.5","105.0","111.8"],"这个转换过程将":["78.2"],"jsx":["78.4","78.5","78.6","78.7","78.8","78.14","80.3","80.8","80.11","80.13","81.5","81.15","82.10","83.4","83.7","84.2","84.3","84.4","85.2","85.3","85.4","85.5","105.0","111.8"],"我们可以像写":["78.4"],"可以通过属性来传递数据给组件":["78.5"],"支持标签的嵌套":["78.6"],"可以将多个标签组合在一起形成复杂的":["78.6"],"支持在大括号内使用":["78.8"],"接受一个":["78.10"],"props":["78.10","78.15","78.17","78.21","80.1","80.8","80.9","84.5","91.7"],"对象作为参数":["78.10"],"继承自":["78.11"],"我们可以像使用":["78.12"],"支持条件渲染":["78.13"],"greeting":["78.14","78.15"],"productlist":["78.17"],"来收集用户的输入并实时更新组件的状态":["78.18"],"formexample":["78.18"],"component":["78.18","80.13","81.3","81.10","81.11","83.7","84.5","86.16"],"temperatureconverter":["78.19"],"celsius":["78.19"],"setcelsius":["78.19"],"usestate":["78.19"],"中实现组件的复用逻辑的技术":["78.20"],"是一个函数":["78.20"],"接受一个组件作为参数":["78.20"],"一层层传递":["78.21"],"上下文提供了一种便捷的方式来在组件之间共享数据":["78.21"],"尤其对于跨多层级的组件共享数据非常有用":["78.21"],"引入的新特性":["78.22"],"用于在函数组件中添加状态":["78.22"],"副作用和其他":["78.22"],"用于构建用户界面":["79.1"],"它专注于构建高性能":["79.1"],"可维护且可复用的":["79.1"],"组件":["79.1","82.12"],"使开发者能够轻松构建交互性的用户界面":["79.1"],"组件化开发":["79.3"],"采用了虚拟":["79.4"],"技术":["79.4"],"它在内存中维护了一个虚拟的":["79.4"],"单向数据流":["79.5"],"拥有一个庞大的生态系统":["79.6"],"组件是":["79.8"],"中最重要的概念之一":["79.8"],"它是构建用户界面的基本单元":["79.8"],"是一种类似":["79.9"],"生命周期":["79.12","80.0"],"允许处理用户的交互事件":["79.13"],"如点击":["79.13"],"条件渲染":["79.14"],"条件渲染是根据条件来决定是否渲染组件或显示不同的内容":["79.14"],"处理用户输入的表单数据是常见的任务":["79.16"],"状态提升":["79.17"],"hoc":["79.18"],"高阶组件是一个函数":["79.18"],"上下文":["79.19"],"context":["79.19","131.4","131.5","136.2","141.3"],"利用":["79.21","130.7"],"为了通过":["79.22"],"写一个":["79.22"],"程序":["79.22"],"可以使用网站":["79.23"],"www":["79.23"],"bootcdn":["79.23"],"cn":["79.23","111.4"],"提供的":["79.23"],"链接":["79.23"],"完整代码举例":["79.23"],"shell":["79.24","119.2","157.4"],"npm":["79.24","87.2","93.7","118.10","119.2","123.2","125.4","126.1","126.5"],"init":["79.24","93.6","124.0","127.2"],"latest":["79.24","93.6","111.8"],"用于初始化状态和绑定方法":["80.1"],"static":["80.1"],"getderivedstatefromprops":["80.1"],"在组件创建和更新阶段调用":["80.1"],"用于根据":["80.1"],"更新状态":["80.1"],"render":["80.1","81.3","81.10","81.11","155.8"],"我们可以初始化组件的状态":["80.3"],"state":["80.3","80.4","80.8","80.9","84.5"],"和绑定方法":["80.3"],"mycomponent":["80.3","80.8","80.13","81.7","81.8","81.9","81.10","81.15","83.4"],"作为参数":["80.4","80.10"],"并返回一个对象来更新":["80.4"],"或者返回":["80.4"],"表示不需要更新":["80.4"],"方法中":["80.5"],"我们可以进行一些副作用操作":["80.6","80.11"],"比如发送网络请求":["80.6","80.11"],"订阅事件":["80.6","80.11"],"更新":["80.8"],"我们可以根据新的":["80.9"],"判断是否需要重新渲染组件":["80.9"],"返回":["80.9"],"更新之前调用":["80.10"],"它接收":["80.10"],"prevprops":["80.10"],"prevstate":["80.10"],"操作":["80.11"],"释放资源等":["80.13"],"中用于向组件传递数据的一种机制":["81.1"],"properties":["81.1"],"父组件":["81.3","92.6"],"parentcomponent":["81.3","83.7"],"我们希望在未传递某个":["81.4"],"组件能够使用一个默认值":["81.4"],"这时可以通过设置组件的":["81.4"],"可以使用解构赋值来简化代码":["81.5"],"可以接收各种类型的数据":["81.6"],"提供的一种机制":["81.14"],"用于对组件的":["81.14"],"进行类型检查":["81.14"],"在开发过程中":["81.14"],"可以帮助我们及时发现和修复传递错误类型的":["81.14"],"增加代码的健":["81.14"],"壮性和可维护性":["81.14"],"proptypes":["81.15"],"from":["81.15","82.11","84.2","84.3","84.4","85.2","85.3","85.5","90.4","90.6","90.17","111.10","111.12","149.1"],"prop":["81.15"],"types":["81.15","98.6"],"实现单页应用的导航":["82.0"],"路由是指在":["82.1"],"应用中实现页面之间导航的技术":["82.1"],"的基本概念":["82.2"],"router":["82.3","82.9","82.11","87.1","87.5"],"中的核心概念之一":["82.3"],"嵌套路由":["82.4"],"嵌套路由是指在一个页面组件中嵌套另一个页面组件":["82.4"],"路径中传递参数":["82.5"],"并将参数传递给页面组件进行处理":["82.5"],"路由链接":["82.6"],"路由链接是用于在页面中生成导航链接的组件":["82.6"],"除了使用路由链接进行页面导航外":["82.7"],"还可以通过编程式导航的方式实现页面切换":["82.7"],"首先需要在项目中安装":["82.8"],"一旦安装了":["82.9"],"每个页面都是一个独立的组件":["82.10"],"可以使用函数组件或类组件来定义":["82.10"],"home":["82.10","82.11","82.13","82.14","82.15","95.1","95.2","157.7"],"browserrouter":["82.11","82.13","82.14"],"在顶层组件中渲染":["82.12"],"route":["82.12","82.14"],"从而实现页面导航":["82.12"],"about":["82.13","82.14","82.15"],"contact":["82.15"],"userprofile":["82.15"],"是组件内部的一种特殊变量":["83.1"],"用于存储组件的可变数据":["83.1"],"通常在组件的构造函数中初始化":["83.3"],"可以通过":["83.3"],"属性来定义组件的":["83.3"],"setstate":["83.4","83.6","83.7"],"这样做的原因是为了确保组件在更新":["83.4"],"后能够重新渲染":["83.4"],"并显示更新后的数据":["83.4"],"后":["83.5"],"并不会立即更新":["83.5"],"的值":["83.5"],"而是会放入一个更新队列中":["83.5"],"等待":["83.5"],"合并更新后再进行重新渲染":["83.5"],"如果需要在":["83.5"],"无法检测到":["83.6"],"的变化":["83.6"],"并进行重新渲染":["83.6"],"为了正确地更新":["83.6"],"我们应该始终使用":["83.6"],"super":["83.7","84.5"],"handleincrement":["83.7"],"并将它们渲染到用户界面上":["84.1"],"并根据每个元素生成一个新的元素":["84.2"],"下面是一个简单的示例":["84.2","85.2"],"演示了如何使用":["84.2","84.4"],"方法来渲染一个包含数字的列表":["84.2"],"下面是一个示例":["84.3","84.4"],"演示了如何根据数字的奇偶性来渲染不同样式的列表项":["84.3"],"listrendering":["84.3","84.5"],"方法来实现列表渲染":["84.4"],"并在子组件中实现列表渲染":["84.4"],"属性帮助":["84.6"],"正确地更新":["84.6"],"并提高列表渲染的性能":["84.6"],"fragment":["84.6"],"我们可以使用":["85.1"],"语句来实现条件渲染":["85.2"],"演示了如何根据条件来渲染不同的内容":["85.2"],"三元表达式是一种简洁的写法":["85.3"],"用于在一行代码中根据条件返回不同的值":["85.3"],"下面是一个使用三元表达式的示例":["85.3"],"conditionalrendering":["85.3"],"中是一种短路逻辑":["85.4"],"当第一个条件为真时":["85.4"],"会返回第二个条件":["85.4"],"返回第一个条件的值":["85.4"],"我们可以利用这个特性来实现条件渲染":["85.4"],"下面是一个使用逻辑与的示例":["85.4"],"es2020":["85.5"],"中的新特性":["85.5"],"用于简化条件判断":["85.5"],"下面是一个使用条件运算符的示例":["85.5"],"条件运算符等":["85.6"],"抽象逻辑":["85.6"],"如果条件渲染逻辑较复杂":["85.6"],"建议将其抽象成函数或组件":["85.6"],"以提高代码的可读性和复用性":["85.6"],"使用默认值":["85.6"],"脚本文件或使用":["86.3"],"mustache":["86.6"],"用于在模板中实现特定的行为":["86.7"],"bind":["86.7"],"将元素属性与":["86.7"],"根据条件渲染元素":["86.9"],"根据条件显示或隐藏元素":["86.10"],"ul":["86.12"],"指令监听":["86.13"],"事件":["86.13","121.16"],"my":["86.16","90.29"],"的组件":["86.16"],"在实例创建完成后调用":["86.18"],"可以在这里进行数据初始化":["86.18"],"调用异步请求等操作":["86.18"],"但模板还未被编译":["86.18"],"渲染":["86.18"],"beforemount":["86.18","90.27","90.28"],"挂载前":["86.18"],"在模板编译":["86.18"],"渲染之前调用":["86.18"],"学习指南":["87.0"],"vue":["87.1","87.4","88.0","88.3","90.4","90.5","90.7","90.10","90.14","91.2","91.3","95.3","111.9","111.10","139.4","157.2"],"yarn":["87.2","102.7","157.4","157.11"],"应用关联":["87.3"],"定义路由表":["87.3"],"包含不同路径与对应组件的映射":["87.3"],"组件创建导航链接":["87.5"],"使用路由参数传递数据给组件":["87.6"],"在组件中定义嵌套的子路由":["87.7"],"路由守卫":["87.8"],"使用路由守卫来处理导航前后的逻辑":["87.8"],"动态路由":["87.9"],"使用动态路由来根据不同条件加载组件":["87.9"],"路由懒加载":["87.10"],"使用路由懒加载来优化页面加载性能":["87.10"],"更多配置":["87.12"],"但是不限于某个组件":["88.1"],"而是存储在":["88.1"],"的全局状态树中":["88.1"],"使得不同组件可以共享和访问这些数据":["88.1"],"getters":["88.1"],"store":["88.2","88.3"],"在应用的根目录":["88.3"],"通常是":["88.3"],"目录":["88.3"],"下创建一个名为":["88.3"],"的文件":["88.3","122.13","122.23"],"用于创建":["88.3"],"在该文件中":["88.3"],"需要引入":["88.3"],"并创建一个新的":["88.3"],"可以设置":["88.3"],"用于同步地修改状态":["88.4"],"它们是唯一允许直接修改状态的地方":["88.4"],"而且是一个纯函数":["88.4"],"不应该有副作用":["88.4"],"通常":["88.4"],"在组件中通过":["88.4"],"commit":["88.4","109.14"],"中的方法来修改状态":["88.4"],"中的方法":["88.5"],"继续上面的计数器应用":["88.5"],"假设我们需要在点击增加按钮后":["88.5"],"延迟":["88.5"],"秒再修改状态":["88.5"],"以下是使用":["88.5"],"的例子":["88.5"],"的示例":["88.6"],"todos":["88.6"],"text":["88.6","138.1","141.4"],"buy":["88.6"],"groceries":["88.6"],"done":["88.6"],"数据劫持":["89.1"],"observation":["89.1"],"当你创建一个":["89.1"],"实例时":["89.1"],"会遍历":["89.1"],"对象中的所有属性":["89.1"],"响应式系统的核心原理":["89.2"],"引入了":["89.2"],"对象作为响应式系统的基础":["89.2"],"可以用来监听对象的读取":["89.2"],"删除等操作":["89.2"],"以及数组的变化":["89.2"],"我们只需在":["90.0"],"中一个新的配置项":["90.1"],"值为一个函数":["90.1"],"只在setup函数内部访问":["90.2"],"函数需要加":["90.2"],"其用途创建独立的原始值":["90.2"],"函数接收一个普通对象":["90.2"],"返回一个响应式的数据对象":["90.2"],"ref":["90.5","90.6","90.7","90.12","90.17","90.18","90.19","90.20","94.3"],"但不会使其值也变成响应式的":["90.5"],"修改其属性是非响应式的这样是不会改变的":["90.5"],"shallowref":["90.6"],"适合去做防抖之类的":["90.7"],"这样是不允许":["90.8"],"会给我们报错":["90.8"],"接受一个对象":["90.9"],"不会改变视图":["90.10"],"都是一个":["90.12"],"主要是方便我们解构使用":["90.13"],"vue2":["90.15","90.16"],"中的":["90.15","90.16"],"作用是一样的":["90.16"],"watch":["90.17","90.18","90.20"],"效果一样":["90.19"],"同时":["90.21"],"的第一个参数":["90.22"],"effect函数":["90.22"],"当":["90.23"],"watcheffect":["90.23"],"可以作为一个调试器来使用":["90.24"],"flush":["90.24"],"到":["90.25","114.2"],"销毁的":["90.25"],"指令绑定到元素后调用":["90.27"],"directive":["90.28","90.29"],"created":["90.28"],"初始化":["90.28"],"传递给指令的值":["90.29"],"不利于阅读":["90.31"],"容易使代码变得难以维护":["90.31"],"vue3":["90.31","91.1","111.2","111.8"],"hook函数":["90.31"],"相当于":["90.31"],"mixin":["90.31"],"不同在与":["90.31"],"hooks":["90.31"],"是函数":["90.31"],"组件通信方式很重要":["91.1"],"不管是项目还是面试都是经常用到的知识点":["91.1"],"比如":["91.1","98.5","111.12"],"defineprops":["91.2"],"获取父组件传递的数据":["91.2"],"且在组件内部不需要引入":["91.2"],"方法可以直接使用":["91.2"],"父组件给子组件传递数据":["91.2"],"框架中事件分为两种":["91.3"],"handler":["91.4"],"我是祖国的老花骨朵":["91.4"],"当前代码级给":["91.4"],"xxx":["91.5"],"handler3":["91.5"],"子组件内部触发这个自定义事件":["91.5"],"中可以根据":["91.6"],"vm":["91.6"],"vc":["91.6","91.9"],"关系推出全局事件总线":["91.6"],"而":["91.7"],"实指利用":["91.7"],"modelvalue":["91.7"],"与自定义事件":["91.7"],"update":["91.7","117.7"],"方法获取组件的属性与事件":["91.8"],"包含":["91.8","118.5","121.6"],"原生":["91.8"],"事件或者自定义事件":["91.8"],"次函数功能类似于":["91.8"],"可能会想到它可以获取元素的":["91.9"],"或者获取子组件实例的":["91.9"],"既然可以在父组件内部通过":["91.9"],"获取子组件实例":["91.9"],"inject":["91.10"],"提供":["91.10"],"官网":["91.11"],"即为子组件":["91.12"],"在父组件内部使用的时候":["91.12"],"在双标签内部书写结构传递给子组件":["91.12"],"注意开发项目的时候默认插槽一般只有一个":["91.12"],"我是默认插槽填充的结构":["91.12"],"顾名思义":["91.12"],"此插槽带有名字在组件内部留多个指定名字的插槽":["91.12"],"下面是一个子组件内部":["91.12"],"模板中留两个插槽":["91.12"],"后面":["92.2"],"切记不能放到":["92.2"],"mount":["92.2"],"并且只能在该父组件中使用":["92.5"],"它的优点是使组件之间的依赖关系更加明确":["92.5"],"接受传过来的值":["92.6"],"传递非字符串类型需要加":["92.6"],"简写":["92.6"],"冒号":["92.6"],"msg":["92.9"],"在子组件":["92.10"],"动态绑定":["92.10"],"参数":["92.10"],"并且减少主包的体积":["92.12"],"else等":["92.13"],"来检查数据是否已加载并显示一些其它内容":["92.13"],"但是":["92.13"],"show等属性影响":["92.14"],"但data":["92.14"],"prop数据依旧能够共用的技术":["92.14"],"类似于":["92.14"],"作用和vue2一致":["92.15"],"只是生命周期名称有所更改":["92.15"],"初次进入时":["92.15"],"onmounted":["92.15"],"onactivated":["92.15"],"退出后触发":["92.15"],"deactivated":["92.15"],"再次进入":["92.15"],"我们都可以使用":["92.16"],"来接收":["92.16"],"提供的数据或方法":["92.16"],"emit":["92.17"],"组合而成的语法糖":["92.17"],"vue3中":["92.17"],"有以下改动":["92.17"],"变更":["92.17"],"cli创建":["93.1"],"install":["93.2","102.7","123.2","124.0","125.3","148.3"],"cli":["93.3"],"features":["93.4"],"check":["93.4"],"the":["93.4","109.15"],"needed":["93.4"],"your":["93.4","109.1"],"选择上":["93.4"],"typescript":["93.4","100.4","111.8"],"特别注意点空格是选择":["93.4"],"点回车是下一步":["93.4"],"冷服务":["93.5"],"默认的构建目标浏览器是能":["93.5"],"vite":["93.6"],"打包大小减少41":["94.2"],"api":["94.3","95.3","107.3","123.6"],"setup":["94.3"],"新特性":["95.0"],"child":["95.1","95.2","95.4"],"的选项":["95.3"],"list":["95.4"],"普通声明":["98.1"],"notanumber":["98.2"],"number":["98.2","98.13","99.1","99.6","99.8","100.2","100.5","101.2"],"可以直接使用布尔值":["98.3"],"b2":["98.3"],"一样可以操作数组元素":["98.4"],"有两种方式可以定义数组":["98.4"],"第一种":["98.4"],"如果一个方法需要返回多个值":["98.5"],"可以把这多个值作为元组返回":["98.5"],"而不需要创建额外的类来表示":["98.5"],"可以定义一对值分别为string和number类型的元组":["98.5"],"ts":["98.5","98.6","98.7","98.8","98.11","99.2","99.7","99.10","101.3","101.5","103.5","103.6","104.1","111.12"],"也可以是字符串":["98.6"],"数字枚举":["98.6"],"enum":["98.6","114.5"],"进行任何操作":["98.7"],"不需要检查类型":["98.7"],"voidfn":["98.8"],"定义null":["98.9"],"默认情况下":["98.9","118.12","131.2"],"返回never的函数必须存在无法达到的终点":["98.10"],"因为必定抛出异常":["98.10"],"所以":["98.10","123.13"],"的差异":["98.11"],"void类型只是没有返回值":["98.11"],"不能为字符串类型":["98.12"],"因为定义的联合类型只有数字和布尔值并没有字符串":["98.12"],"boolean":["98.12"],"interface":["98.13","101.5","103.2","103.6"],"程序员":["98.14"],"已经进行了必须的检查":["98.14"],"方式一":["98.14"],"这个概念":["99.0"],"构造方法":["99.1"],"类的继承":["99.2"],"run":["99.2"],"public":["99.3","99.8"],"private":["99.6","101.6"],"some":["99.6"],"any":["99.6","152.1","152.2"],"关键字将属性设置为只读的":["99.7"],"只读属性必须在声明时或构造函数里被初始化":["99.7"],"implements":["99.9"],"后面跟interface的名字多个用逗号隔开":["99.9"],"继承还是用extends":["99.9"],"personclass":["99.9"],"首先":["99.10"],"我们从一个没有使用存取器的例子开始":["99.10"],"firstname":["99.10"],"关键字声明的类叫做":["99.11"],"声明的方法叫做":["99.11"],"抽象方法":["99.11"],"指不能被实例化":["99.11"],"因为它里面包含一个或多个抽象方法":["99.11"],"函数参数":["100.0"],"你可以使用":["100.4"],"来访问所有传入的参数":["100.4"],"你可以把所有参数收集到一个变量里":["100.4"],"剩余参数会被当做个数不限的可选参数":["100.4"],"可以一个都没有":["100.4"],"定义函数实现":["100.5"],"接口或类的时候":["101.0"],"当我们使用这个函数的时候把参数的类型传进去就可以了":["101.3"],"也就是动态类型":["101.3"],"swap":["101.4"],"k":["101.4"],"keyvalue":["101.5"],"t":["101.5","101.6","101.7"],"clacarray":["101.6"],"没有泛型约束":["101.7"],"getlen":["101.7"],"arg":["101.7"],"超集":["102.2"],"简单的说就是在":["102.2"],"而ts":["102.3"],"属于静态编程语言":["102.3"],"尤其在大型项目的时候效果显著":["102.5"],"和一些插件库的兼容并不是特别完美":["102.6"],"w进行随时热更新watch":["102.9"],"node直接运行ts的node项目":["102.10"],"首先全局安装ts":["102.10"],"的核心原则之一是对值所具有的结构进行类型检查":["103.0"],"我们使用接口":["103.0"],"我的理解是使用interface来定义一种约束":["103.1"],"让数据的结构满足约束的格式":["103.1"],"定义方式如下":["103.1"],"可选属性的好处之一是可以对可能存在的属性进行预定义":["103.4"],"好处之二是可以捕获引用了不存在的属性时的错误":["103.4"],"可选属性的含义是该属性可以不存在":["103.4"],"在这个例子当中我们看到接口中并没有定义c但是并没有报错":["103.5"],"应为我们定义了":["103.5"],"这样写是会报错的":["103.6"],"应为a是只读的不允许重新赋值":["103.6"],"cb":["103.7"],"void":["103.7"],"就是我们常说的":["104.0"],"类型也不能赋给":["104.1"],"报错":["104.1"],"原始类型":["104.1"],"umd":["105.0"],"lib":["105.0"],"指定要包含在编译中的库文件":["105.0"],"allowjs":["105.0"],"允许编译":["105.0"],"文件":["105.0","125.3","127.2"],"checkjs":["105.0"],"报告":["105.0"],"文件中的错误":["105.0"],"preserve":["105.0"],"代码的生成":["105.0"],"native":["105.0"],"定义变量时赋值了":["106.1"],"推断为对应的类型":["106.1"],"n1":["106.1"],"abcd":["106.2"],"是一个基于":["107.1"],"bash":["107.2","109.5","109.6","109.7","109.12","109.14","109.18","109.19","111.6","122.16","123.2"],"xxxx":["107.3"],"响应拦截":["107.4"],"请求调整":["107.4"],"用户标识":["107.4"],"网络错误处理":["107.4"],"授权错误处理":["107.4"],"error":["107.5","108.4"],"response":["107.5"],"发出请求后":["107.5"],"服务器用状态码进行响应":["107.5"],"这超出了2xx的范围":["107.5"],"实现一个简单的封装":["108.1"],"主要实现以下目的":["108.1"],"如果开启":["108.3"],"token":["108.3","108.4"],"认证":["108.3","123.13"],"serverconfig":["108.3"],"usetokenauthorization":["108.3"],"headers":["108.3","118.12"],"authorization":["108.3"],"比如判断":["108.4"],"是否过期等等":["108.4"],"代码块":["108.4"],"switch":["108.4"],"getaction":["108.5"],"parameter":["108.5"],"service":["108.5"],"zs":["108.6"],"password":["108.6","123.3"],"定义接口方法":["108.6"],"login":["108.6"],"params":["108.6"],"axios":["108.7"],"的再再再封装":["108.7"],"config":["109.1","110.3","111.7","122.17","157.6"],"git":["109.3","109.4","109.11","109.12","109.13","109.14","110.3"],"将当前目录及其子目录下所有变更添加到暂存区":["109.5"],"追踪":["109.7"],"比较指定文件工作区和暂存区的差异":["109.7"],"reflog":["109.8"],"查看详细日志信息":["109.8"],"branch":["109.10"],"新分支":["109.10"],"基于指定分支创建分支":["109.10"],"分支合并到当前分支":["109.14"],"且为":["109.14"],"use":["109.15","113.1","123.11"],"restore":["109.15"],"file":["109.15"],"to":["109.15","113.3"],"往最后一次":["109.16"],"追加记录":["109.16"],"克隆远程仓库到本地":["109.19"],"别名":["109.21"],"本地分支":["109.21"],"远程分支":["109.21"],"如果远程分支被省略":["109.21"],"git官网下载安装git客户端":["110.1"],"安装完成后":["110.2"],"pub":["110.4"],"ssh":["110.4"],"打开生成后的id":["110.5"],"本地拉取代码":["110.6"],"版本的后台管理系统":["111.2"],"一个项目要有统一的规范":["111.2"],"需要使用":["111.2"],"进行构建":["111.4"],"官方中文文档参考":["111.4"],"vitejs":["111.4","111.10"],"dev":["111.4","157.2"],"guide":["111.4"],"月创建的开源项目":["111.6"],"它的目标是提供一个插件化的":["111.6"],"代码检测工具":["111.6"],"首先安装":["111.6"],"pnpm":["111.6"],"d":["111.6","131.4"],"生成配置文件":["111.6"],"prettier":["111.7","111.8"],"plugin":["111.7","111.8"],"parseroptions":["111.8"],"ecmaversion":["111.8"],"sourcetype":["111.8"],"jsxpragma":["111.8"],"ecmafeatures":["111.8"],"继承已有的规则":["111.8"],"recommended":["111.8"],"essential":["111.8"],"off":["111.8"],"loader":["111.9"],"因此我们再组件内可以使用":["111.9"],"需要加上":["111.9"],"接下来我们为项目添加一些全局的样式":["111.9"],"userconfigexport":["111.10"],"configenv":["111.10"],"vitemockserve":["111.10"],"command":["111.10"],"localenabled":["111.10"],"serve":["111.10"],"在根目录创建":["111.10"],"文件夹":["111.10"],"使用请求拦截器":["111.11"],"可以在请求拦截器中处理一些业务":["111.11"],"开始进度条":["111.11"],"请求头携带公共参数":["111.11"],"使用响应拦截器":["111.11"],"可以在响应拦截器中处理一些业务":["111.11"],"进度条结束":["111.11"],"简化服务器返回的数据":["111.11"],"处理":["111.11"],"http":["111.11","118.11","118.14"],"网络错误":["111.11"],"在根目录下创建":["111.11"],"utils":["111.11","111.12"],"request":["111.11","111.12","121.16","121.17"],"文件夹去统一管理项目的接口":["111.12"],"下面方式":["111.12"],"统一管理咱们项目用户相关的接口":["111.12"],"root":["112.0"],"打开nginx":["112.1"],"conf文件":["112.1"],"删除一个数据库":["113.1"],"选择要使用的数据库":["113.1"],"show":["113.1"],"column1":["113.2"],"column2":["113.2"],"username":["113.3","123.3"],"hostname":["113.3"],"授予用户特定数据库或表的权限":["113.3"],"revoke":["113.3"],"无符号":["114.1"],"smallint":["114.1"],"较小的整数":["114.1"],"402823466e":["114.2"],"175494351e":["114.2"],"最大长度为":["114.3"],"dd":["114.4"],"time":["114.4"],"存储时间":["114.4"],"hh":["114.4"],"操作和控制访问数据的方法":["115.0"],"数据库的设计和使用旨在提供高效的数据存储":["115.0"],"快速的数据检索和安全的数据管理":["115.0"],"数据库通常由数据表":["115.0"],"因其易用性":["115.1"],"性能和可靠性而受到广泛欢迎":["115.1"],"以下是mysql的一些关键特点":["115.1"],"开源性":["115.1"],"mysql是开源软件":["115.1"],"的基本使用包括连接到":["117.0"],"客户端工具":["117.1"],"如命令行客户端或图形化客户端工具":["117.1"],"mysql":["117.2","123.1"],"选择数据库":["117.3"],"使用以下命令选择要在其中执行操作的数据库":["117.3"],"在所选的数据库中创建一个新的表":["117.4"],"定义表的列和数据类型":["117.4"],"sql":["117.4","117.5","117.6","117.7"],"insert":["117.5","123.3"],"into":["117.5","123.3"],"select":["117.6"],"语句从表中检索数据":["117.6"],"语句更新表中的数据":["117.7"],"基于":["118.0"],"node":["118.0","120.2","122.22","125.2","127.1"],"require":["118.2","118.6","121.7","121.14","123.11","123.14"],"服务器":["118.2"],"app":["118.2","118.3","123.5","123.11","146.1","148.1"],"监听客户端的":["118.2"],"get":["118.2","118.4","119.4","122.17","123.5"],"请求":["118.2"],"存放静态文件的目录名不会出现在":["118.3"],"访问静态资源时":["118.3"],"会根据托管顺序查找文件":["118.3"],"可为静态资源访问路径添加前缀":["118.3"],"创建路由对象":["118.4"],"挂载具体路由":["118.4"],"可先调用中间件进行预处理":["118.5"],"中间件是一个函数":["118.5"],"express":["118.6"],"定义第一个全局中间件":["118.6"],"mw1":["118.7"],"req":["118.7","118.8","121.17"],"res":["118.7","118.8","121.17"],"next":["118.7","118.8"],"调用了第一个局部生效的中间件":["118.7"],"应用级别中间件是绑定到":["118.8"],"实例上":["118.8"],"路由级别中间件绑定到":["118.8"],"安装中间件":["118.10"],"跨域资源共享":["118.11"],"解决跨域":["118.11"],"是通过":["118.11"],"响应头决定浏览器是否阻止前端":["118.11"],"bruceblog":["118.12"],"io":["118.12"],"仅支持客户端向服务器发送如下的":["118.12"],"三者之一":["118.14"],"头部信息不超过以下几种字段":["118.14"],"无自定义头部字段":["118.14"],"之外的请求":["118.15"],"做一个简单的爬虫":["119.0"],"初始化项目":["119.1","126.2"],"cheerio":["119.2"],"访问要爬取的网站":["119.3"],"爬取豆瓣网":["119.3"],"fs":["119.4","121.7","121.12"],"movie":["119.4"],"douban":["119.4"],"com":["119.4","146.2"],"top250":["119.4"],"运行脚本":["119.5"],"p2372307693":["119.6"],"泰坦尼克号":["119.6"],"titanic":["119.6"],"img9":["119.6"],"p2889314814":["119.6"],"这个杀手不太冷":["119.6"],"léon":["119.6"],"p511118051":["119.6"],"千与千寻":["119.6"],"千と千尋の神隠し":["119.6"],"p2557573348":["119.6"],"官网传送门":["120.0"],"cross":["120.1"],"platform":["120.1"],"事件循环":["120.2"],"单线程":["120.2"],"轻量和高效":["120.2"],"否则不会向下执行代码":["121.1"],"异步文件系统不会阻塞程序的执行":["121.1"],"而是在操作完成时":["121.1"],"通过回调函数将结果返回":["121.1"],"实际开发很少用同步方式":["121.1"],"因此只介绍异步方式":["121.1"],"打开模式":["121.1"],"配置选项":["121.3","121.6"],"若是字符串则指定编码格式":["121.3"],"encoding":["121.3","121.6"],"编码格式":["121.3"],"flag":["121.3"],"打开方式":["121.3"],"回调函数":["121.3"],"err":["121.3"],"错误信息":["121.3"],"rs":["121.4"],"createreadstream":["121.4"],"笔记":["121.4"],"mp3":["121.4"],"创建一个可写流":["121.4","121.7"],"ws":["121.4"],"createwritestream":["121.4"],"文件路径":["121.6"],"写入内容":["121.6"],"数组不能存储二进制文件":["121.8"],"是专门存储二进制数据的":["121.8"],"存储的是二进制数据":["121.8"],"显示时以":["121.8"],"如果提供的操作路径是以":["121.9"],"开头的相对路径时":["121.9"],"容易出现路径动态拼接错误的问题":["121.9"],"unlink":["121.10"],"unlinksync":["121.10"],"列出文件":["121.10"],"readdir":["121.10"],"readdirsync":["121.10"],"会抵消前面的路径":["121.12"],"可以获取路径中的最后一部分":["121.13"],"常通过该方法获取路径中的文件名":["121.13"],"server":["121.16"],"createserver":["121.16"],"为服务器实例绑定":["121.16"],"监听客户端的请求":["121.16"],"on":["121.16","121.17"],"设置默认的响应内容为":["121.17"],"模块化是指解决一个复杂问题时":["122.2"],"自顶向下逐层把系统划分为若干模块的过程":["122.2"],"提高代码的复用性":["122.3"],"中模块的分类":["122.5"],"中的模块作用域":["122.6"],"存储了和当前模块有关的信息":["122.7"],"在自定义模块中":["122.7"],"每个模块内部":["122.8"],"module":["122.8"],"即多次调用":["122.9"],"开头":["122.11"],"否则会作为内置模块或第三方模块加载":["122.11"],"尝试从":["122.12","122.22"],"modules":["122.12","122.22"],"文件夹中加载第三方模块":["122.12","122.22"],"如果没有找到对应的第三方模块":["122.12","122.22"],"则移动到再":["122.12"],"上一层父目录":["122.12"],"package":["122.13","122.18","122.23","125.0","125.3","125.5","126.4","127.2","157.2"],"并寻找":["122.13"],"不同于":["122.15"],"新建文件夹":["122.18"],"包名":["122.18"],"新建如下三个文件":["122.18"],"包管理配置文件":["122.18"],"index":["122.18","123.5"],"多次调用":["122.19"],"开头的路径标识符":["122.21"],"在加载自定义模块时":["122.21"],"如果没有指定":["122.21"],"nodejs":["122.22"],"会从当前模块的父目录开始":["122.22"],"则移动到再上一层父目录中":["122.22"],"在被加载的目录下查找一个叫做":["122.23"],"建立连接":["123.2"],"使用数组的形式为占位符指定具体的值":["123.3"],"额外请求页面的数据":["123.5"],"后端只负责提供":["123.6"],"接口":["123.6"],"前端使用":["123.6"],"主要功能是展示":["123.7"],"没有复杂交互":["123.7"],"服务端渲染推荐使用":["123.9"],"secret":["123.11"],"bruce":["123.11"],"的值为任意字符串":["123.11"],"resave":["123.11"],"前后端分离推荐使用":["123.12"],"当涉及到前端跨域请求后端接口的时候":["123.13"],"需要做很多额外的配置":["123.13"],"才能实现跨域":["123.13"],"当前端请求后端接口不存在跨域问题的时候":["123.13"],"推荐使用":["123.13"],"身份认证机制":["123.13"],"当前端需要跨域请求后端接口的时候":["123.13"],"字符串的安全性":["123.14"],"防止其在网络传输过程中被破解":["123.14"],"需定义用于加密和解密的":["123.14"],"生成":["123.14"],"字符串时":["123.14"],"使用密钥加密信息":["123.14"],"得到加密好的":["123.14"],"对象时":["123.14"],"使用密钥解密":["123.14"],"expressjwt":["123.14"],"安装依赖项":["124.0","127.2"],"添加依赖项":["124.0"],"pkg":["124.0"],"是一个用于管理和共享":["125.1"],"代码的工具":["125.1"],"是随同":["125.2"],"生成一个":["125.3"],"项目的核心文件":["125.4"],"其中包含了项目的配置信息":["125.4"],"依赖项":["125.4"],"你可以轻松地安装和管理项目的依赖项":["125.5"],"还可以帮助你开发和发布自己的包":["125.6"],"通过编写代码":["125.6"],"上":["126.0"],"账号":["126.1","126.5"],"编写代码":["126.3"],"确保在你的项目中包含以下文件":["126.4"],"使用终端登录到你的":["126.5"],"如果你的包需要更新或有新的版本":["126.6"],"你可以按照以下步骤进行更新和维护":["126.6"],"使用你的包":["126.7"],"其他开发者可以使用以下命令来安装和使用你的包":["126.7"],"请确保你已经安装了":["127.1"],"这将引导你提供有关项目的一些信息":["127.2"],"并生成一个":["127.2"],"在项目目录中":["127.2"],"创建uni":["128.2"],"html5":["130.1"],"的基础知识":["130.2"],"canvas":["130.3","130.4","130.5","134.3","141.3"],"使用直角坐标系":["130.3"],"原点坐标为":["130.3"],"可以绘制":["130.4"],"svg":["130.4","153.3","153.4","153.5","153.6","153.8"],"和其他类型的矢量图形":["130.4"],"提供了多种绘图元素":["130.5"],"包括路径和图形":["130.5"],"除了基本的绘图功能之外":["130.6"],"还可以创造交互式效果":["130.6"],"用来展示和操控数据":["130.6"],"非常适合处理像素级别的控制":["130.7"],"虽然在":["130.8"],"canvasrenderingcontext2d":["131.0"],"rotate":["131.0"],"方法用于图像旋转":["131.1"],"它接受一个弧度值作为参数":["131.1"],"表示顺时针旋转的度数":["131.1"],"轴方向的缩放因子":["131.2"],"一个单位就是一个像素":["131.2"],"缩放因子可以缩放单位":["131.2"],"比如缩放因子":["131.2"],"表示将大小缩小为原来的":["131.2"],"缩放因子":["131.2"],"方法用于平移图像":["131.3"],"它接受两个参数":["131.3"],"分别是":["131.3"],"e":["131.4","157.11"],"f":["131.4"],"水平缩放":["131.4"],"transform":["131.5"],"方法完全一致":["131.5"],"translate":["131.5"],"如果在":["132.0"],"之中将某个物体":["132.0"],"在目标图像中显示源图像":["132.1"],"只有目标图像内的源图像部分会显示":["132.1"],"目标图像是透明的":["132.1"],"out":["132.1"],"在目标图像之外显示源图像":["132.1"],"您的浏览器不支持":["133.1"],"描边已定义绘图":["133.2"],"路径":["133.2"],"fill":["133.2","136.3","153.9"],"填充当前绘图":["133.2"],"linecap":["134.1"],"指定线条末端的样式":["134.1"],"有三个可能的值":["134.1"],"butt":["134.1"],"末端为矩形":["134.1"],"round":["134.1"],"末端为圆形":["134.1"],"square":["134.1"],"末端为突出的矩形":["134.1"],"矩形宽度不变":["134.1"],"y0":["134.2"],"x1":["134.2"],"y1":["134.2"],"方法接受四个参数":["134.2"],"是起点的横坐标和纵坐标":["134.2"],"是终点的横坐标和纵坐标":["134.2"],"通过不同的坐标值":["134.2"],"可以生成从上至下":["134.2"],"repetition":["134.3"],"该方法接受两个参数":["134.3"],"第一个参数是图像数据":["134.3"],"它可以是":["134.3"],"img":["134.3"],"也可以是另一个":["134.3"],"或者一个表示图像的":["134.3"],"shadowcolor":["134.4"],"阴影的颜色":["134.4"],"black":["134.4"],"fillrect":["135.0"],"图像":["136.0"],"高度":["136.2"],"绘制笑脸":["136.3"],"beginpath":["136.3","139.3"],"lineto":["136.4","139.3"],"dwidth":["136.5"],"dheight":["136.5"],"sx":["136.5"],"默认值为":["136.6"],"10px":["136.6"],"sans":["136.6"],"serif":["136.6"],"textalign":["136.6"],"文本的对齐方式":["136.6"],"文本的方向":["136.6"],"inherit":["136.6"],"quadraticcurveto":["137.1"],"控制点x":["137.1"],"控制点y":["137.1"],"终点x":["137.1"],"终点y":["137.1"],"beziercurveto":["137.2"],"控制点1":["137.2"],"再来一次":["138.1"],"找到画布":["138.2"],"绘制小时的刻度":["139.3"],"moveto":["139.3"],"linewidth":["139.3"],"strokestyle":["139.3"],"gray":["139.3"],"stroke":["139.3","153.9"],"closepath":["139.3"],"nullbtn":["141.3"],"清空画布":["141.3"],"c1":["141.3"],"当前浏览器不支持canvas":["141.3"],"请下载最新的浏览器":["141.3"],"获取canvas画布和绘制的上下文对象":["141.3"],"getcontext":["141.3"],"2d":["141.3"],"获取输入框和按钮":["141.3"],"boldbtn":["141.4"],"粗线条":["141.4"],"thinbtn":["141.4"],"interactive":["143.1"],"精灵派加点击事件":["143.1"],"pixi":["143.2","144.7","148.2","149.1","150.1","150.2","150.3","150.4","150.5","152.0"],"graphics":["143.2","150.1","150.2","150.3","150.4","150.5","153.1"],"beginfill":["143.2","150.2","150.3","150.4"],"官方网站":["144.0"],"webgl":["144.1"],"快速高效":["144.3"],"pixijs":["144.3","144.5"],"简单易用":["144.4"],"丰富的功能":["144.5"],"跨平台支持":["144.6"],"innerwidth":["145.2","146.1","148.1"],"innerheight":["145.2","148.1","152.1","152.2"],"0x1099bb":["145.2","152.1","152.2"],"resolution":["145.2","152.1","152.2"],"pic":["146.2"],"rmb":["146.2"],"bdstatic":["146.2"],"05b0ea405c9e690ab51627853a13de56":["146.2"],"jpeg":["146.2"],"设置模糊滤镜的模糊程度":["148.2"],"创建轮廓滤镜":["148.3"],"创建一个纹理":["149.2"],"anchor":["149.3"],"实现动画":["149.4"],"0x66ccff":["150.3"],"0x660000":["150.4"],"linestyle":["150.5"],"devicepixelratio":["152.1","152.2"],"像素比":["152.1","152.2"],"将应用画布添加到dom中":["152.1","152.2"],"view":["152.1","152.2"],"添加资源":["152.1"],"添加场景1的资源":["152.2"],"assets":["152.2"],"addbundle":["152.2"],"scene1":["152.2"],"pic1":["152.2"],"vector":["153.1"],"的缩写":["153.1"],"意为可缩放矢量图形":["153.1"],"不设置样式属性":["153.3"],"style":["153.3"],"不设置样式属性style是看不出效果的":["153.7"],"并且polygon默认为填充需要把fill属性设置为none":["153.7"],"points":["153.8"],"opacity":["153.9"],"场景":["154.0"],"创建各种":["154.0"],"效果":["154.0"],"包括动画":["154.0"],"模拟":["154.0"],"游戏和虚拟现实等":["154.0"],"提供了许多功能和工具":["154.0"],"使得构建复杂的":["154.0"],"场景变得更加简单和高效":["154.0"],"以下是":["154.0"],"的一些主要特性和组成部分":["154.0"],"渲染器":["154.0"],"renderer":["154.0"],"如果后期需要控制器带有阻尼效果":["155.8"],"visual":["155.9","155.12","156.5"],"threejs":["155.9","155.12","156.5"],"components":["155.9","155.12"],"y轴方向放大2倍":["156.1"],"z轴方向不变":["156.1"],"cube":["156.2","156.3"],"例如围绕x轴旋转90度":["156.3"],"rotation":["156.3"],"开始搭建个人网站":["157.0"],"gitbub":["157.1"],"上新建项目":["157.1"],"添加":["157.2"],"script":["157.2"],"vitepress":["157.3","157.6"],"文件夹和":["157.6"],"写下如下内容":["157.7"],"更多配置请查看":["157.7"],"md":["157.7"],"layout":["157.7"],"选项卡标题":["157.7"],"titletemplate":["157.7"],"选项卡描述":["157.7"],"editlink":["157.7"],"配置网站":["157.8"],"defineconfig":["157.9"],"docs":["157.9"],"和github项目名称保持一致":["157.9"],"标题":["157.9"],"侧边栏":["157.10"],"sidebar":["157.10"],"articles":["157.10"],"other":["157.10"],"bin":["157.11"],"env":["157.11"],"确保脚本抛出遇到的错误":["157.11"],"生成静态文件":["157.11"],"build":["157.11"],"进入生成的文件夹":["157.11"],"cd":["157.11"]},{"0":["8.13","9.12","24.24","40.4","49.4","51.9","67.23","67.24","88.5","94.1","111.8","114.2","121.8","131.5","134.2","138.2","150.3","150.5","153.7"],"1":["1.13","6.12","6.19","8.12","8.13","8.14","8.22","9.2","9.9","10.4","24.15","24.23","24.29","24.30","25.12","26.6","26.7","26.8","28.7","28.11","29.3","36.1","38.2","40.0","43.4","49.4","56.3","56.8","67.23","67.24","83.7","90.24","98.6","111.10","126.6","133.1","134.2","145.2","146.1","148.1","156.2"],"2":["1.13","1.16","8.14","8.17","8.22","9.9","9.10","10.4","13.0","24.23","24.28","24.29","24.30","24.31","25.5","28.7","29.3","29.12","31.1","32.6","38.1","40.0","43.6","56.6","56.8","57.3","59.3","70.3","84.5","90.29","98.6","109.14","109.18"],"3":["1.14","1.16","5.18","6.4","9.3","9.10","10.3","10.5","20.12","24.23","24.29","24.30","24.31","29.3","30.15","32.6","34.4","38.1","43.6","43.9","66.10","84.5","88.6","98.6","109.7","112.1","118.8","123.11","123.14","131.2","153.1"],"4":["5.12","9.10","9.16","10.3","10.5","20.12","24.31","29.2","29.13","39.3","84.5","85.6","109.8","118.8"],"5":["5.6","5.12","9.16","10.3","10.5","24.31","24.32","25.6","29.2","29.13","39.3","43.6","50.1","56.15","84.5","111.7","148.3"],"6":["3.1","3.4","29.13","30.1","43.3","43.7","50.2","54.0","150.5"],"7":["0.2","5.10","43.7","50.2"],"8":["0.2","29.2","67.22","74.1","79.20","79.23"],"9":["0.2","118.12","150.3"],"10":["0.2","10.6","25.5","29.2","43.3","43.8","98.5","106.1","131.2","148.2","153.9"],"11":["48.1","111.7"],"12":["6.16"],"16":["79.20"],"17":["38.0"],"18":["31.7"],"20":["43.8","118.2","153.7"],"25":["4.22","7.5","10.10","46.6","47.6"],"27":["24.21"],"28":["59.11"],"30":["4.16","7.2","10.8","10.9","31.7","81.3"],"31":["45.1"],"35":["152.2"],"37":["49.14"],"42":["1.8","49.14"],"45":["131.1"],"50":["69.6","153.8"],"59":["48.1"],"60":["18.4","139.3"],"65":["114.1"],"84":["49.14"],"100":["131.5","136.3"],"123":["30.15","69.1","98.2","98.12"],"150":["136.4","137.1"],"180":["139.3"],"200":["123.14","136.4"],"255":["28.3"],"300":["143.2","153.8"],"302":["108.4"],"321":["98.2"],"350":["136.2"],"370":["153.5"],"400":["108.4","153.4"],"401":["108.4"],"535":["114.1"],"767":["114.1"],"999":["48.1"],"2015":["2.0","3.4"],"2100":["48.5"],"2224":["152.2"],"4870":["111.10"],"12087":["152.2"],"23739":["152.2"],"55520":["123.3"],"1415926":["30.15"],"es6":["0.1","3.4","5.10","5.13","8.20","54.0"],"中键值对的数量":["0.2"],"keys":["0.2"],"返回一个包含":["0.2"],"中所有键的迭代器":["0.2"],"values":["0.2","1.9","24.24"],"中所有值的迭代器":["0.2"],"entries":["0.2"],"中所有键值对的迭代器":["0.2"],"foreach":["0.2","3.4"],"callbackfn":["0.2"],"thisarg":["0.2"],"遍历":["0.2"],"键值对数组转换":["0.4"],"map":["0.4","3.4","105.0"],"对象":["0.4","25.9","28.3","28.10","32.2","32.3","123.11","134.2","134.3"],"value1":["0.5"],"key2":["0.5"],"value2":["0.5"],"second":["0.6"],"uno":["0.6"],"你可以按照插入的顺序迭代它的元素":["1.1"],"const":["1.3","1.5","1.6","5.17","6.14","7.5","21.1","25.10","38.5","40.1","41.1","42.2","42.3","42.7","42.9","43.7","56.7","78.17","82.10","82.11","82.13","82.14","87.7","87.10","88.3","88.4","88.5","100.4","111.8","121.3","121.6","121.13","123.2","123.5","148.3","149.1","149.2","155.7"],"s":["1.3","1.5","1.10"],"new":["1.3","1.4","1.5","1.6","1.7","1.8","1.10","9.5","10.11","24.8","38.6","48.3","88.3","88.4","88.5","148.3","149.1"],"add":["1.4","1.7","1.8","2.5","102.7","144.7","152.1","157.1","157.11"],"js":["1.5","1.6","3.3","4.7","4.8","5.20","6.7","6.12","6.14","6.18","6.19","9.1","9.11","9.15","24.1","24.2","24.12","24.13","24.20","25.9","26.6","29.13","30.3","30.6","30.9","30.11","31.7","32.5","37.2","48.3","49.1","49.7","49.10","49.13","56.9","56.17","79.24","82.12","87.1","88.4","88.5","90.31","93.4","111.6","118.0","118.11","122.18","131.2","136.6"],"每个值的键和值相等":["1.6"],"set1":["1.6"],"用":["1.12"],"操作符":["1.12","31.1"],"将":["1.12"],"set":["1.13","9.4","99.9","114.5","117.7","156.2"],"b":["1.14","1.16","2.5","5.12","10.2","56.6","56.8","59.8","91.12","99.10","101.2","101.3","101.4","103.3","103.6","109.14","122.23"],"intersect":["1.15"],"ecmascript":["2.0","48.4","54.0"],"构造函数":["2.1","91.6"],"用于创建对象时进行初始化":["2.1"],"constructor":["2.1","2.3","42.8","80.4","80.8","83.3","83.4","84.2","84.3","84.4","85.2","85.3","85.4","85.5","99.11"],"name":["2.1","5.17","7.5","19.2","30.19","31.4","42.8","54.1","56.10","56.11","56.12","56.16","56.19","56.20","67.22","78.18","81.3","81.11","90.7","91.12","95.1","95.3","95.4","99.7","99.11","103.2","110.3","117.5","117.7","118.2","122.18","123.5","157.7"],"person1":["2.2"],"person":["2.2","2.3","2.4","4.9","4.13","5.17","42.3","54.1","56.2","81.11","99.7","99.11","103.6"],"john":["2.2","5.17","10.9","30.4","45.1","56.11","56.12","56.16","56.19","56.20","81.3"],"student":["2.3"],"extends":["2.4","80.4","80.8","80.11","81.5","83.3","83.4","83.5","84.2","84.3","84.4","85.2","85.3","85.4","85.5"],"重写父类的方法":["2.4"],"a":["2.5","5.12","8.13","10.2","10.4","30.15","59.8","59.11","75.14","76.4","88.6","91.12","98.1","101.3","121.12","157.11"],"return":["2.5","2.6","5.3","5.18","8.1","34.2","34.3","40.3","41.3","43.4","53.2","78.15","78.20","81.3","81.7","81.8","81.9","81.10","81.15","82.10","82.11","82.13","82.14","82.15","83.7","88.6","98.8","99.10","101.7"],"value":["2.6","8.20","9.14","41.3","74.2","78.19","84.5","98.7","101.5"],"manufacturers":["3.2"],"association":["3.2"],"制定和维护的脚本语言标准":["3.2"],"它是":["3.2","125.1"],"javascript":["3.2","4.28","19.1","20.0","22.0","28.9","33.1","41.1","41.2","42.7","42.9","42.11","42.12","43.0","45.2","52.2","74.4","78.7","82.7","85.1","87.9","87.10","88.3","88.4","130.1"],"的标准化规范":["3.3"],"只提供了最基本的语法":["3.3"],"如":["3.3","3.4","26.9","51.3","85.1"],"怎样定义变量和函数":["3.3"],"实现了":["3.3"],"数据更方便":["3.4"],"引入了":["3.4"],"object":["3.4","30.5","30.8","35.1","39.2","42.18","59.3"],"defineproperty":["3.4"],"允许更灵活地定义对象属性":["3.4"],"提供了":["3.4"],"array":["3.4","5.12","9.8","24.8","100.4","101.2"],"方法":["3.4","28.9","49.6","49.8","49.9","49.11","59.3","80.10","83.6","91.8"],"reduce":["3.4"],"等":["3.4","20.11","80.6","88.3"],"方便数组处理":["3.4"],"改进了":["3.4"],"function":["3.4","5.10","5.17","8.1","20.6","26.6","37.2","42.9","44.1","44.3","56.3","57.2","59.11","78.20","78.21","98.10","98.11","111.10","121.4","121.16"],"bind":["3.4"],"es2015":["3.4"],"然而":["4.1"],"在处理复杂的项目和大规模的代码库时":["4.1"],"传统的":["4.1","120.2"],"函数和类等都在全局作用域下定义":["4.2"],"这样容易导致命名冲突和代码复杂度的增加":["4.2"],"尤其在大型项目中":["4.2"],"不会污染全局命名空间":["4.3"],"使得代码的组织和维护变得更加清晰和简单":["4.4"],"当多个模块需要相同的功能时":["4.5"],"中":["4.6","19.1","22.0","27.2","46.1","47.1","51.2","78.16","79.15","79.16","81.0","81.12","81.13","83.0","84.1","86.18","122.12"],"通过使用":["4.6"],"关键字导出一个变量":["4.7"],"module1":["4.8","4.14"],"class":["4.9","4.19","20.10","65.9","67.25","80.4","80.6","80.10","80.11","81.4","83.3","83.5","84.2","84.4","85.2","85.4","85.5","90.30","92.6","99.11"],"关键字":["4.10","5.18","56.4"],"main":["4.11","4.12","4.21","79.24","122.13","122.23"],"from":["4.13","4.14","9.6","82.10","85.4","87.3","88.3","90.8","90.18","90.19","90.20","92.2","108.2","108.6","111.11","113.2","113.3","155.6"],"console":["4.14","4.17","4.18","5.3","5.10","5.16","5.17","6.8","8.4","8.11","8.18","8.21","9.12","20.6","24.2","26.3","26.7","27.1","30.14","30.19","31.1","31.4","31.8","34.1","34.2","36.1","42.2","42.6","44.1","44.4","51.9","53.1","53.3","54.2","57.2","59.11","99.2","103.7","118.6","119.4","121.4","143.1"],"用于导出模块中的主要功能或对象":["4.15"],"export":["4.16","4.22"],"default":["4.16","4.19","95.4"],"sayhello":["4.17","4.18","5.17","53.1","54.2","57.2"],"log":["4.17","4.18","5.3","5.10","5.16","5.17","6.4","6.8","6.13","8.3","8.4","8.12","8.18","8.21","9.12","24.2","26.3","26.7","29.11","30.19","31.1","31.4","31.8","34.2","36.1","42.2","42.6","44.1","51.9","53.1","53.3","54.2","57.2","99.2","107.3","107.5","119.4","121.4"],"hello":["4.18","5.16","5.17","6.6","6.9","7.2","28.2","28.8","34.1","42.2","53.1","56.14","57.2","98.5"],"alice":["4.19","7.4","10.10"],"关键字可以在导入和导出时重命名变量名":["4.20"],"myname":["4.21"],"tom":["4.21"],"condition":["4.23"],"true":["4.23","25.2","38.0","51.8","52.6","80.9","88.6","104.1","123.11","145.2"],"if":["4.23","25.12","37.3","37.6","100.5"],"模块化时":["4.24"],"为后缀":["4.25"],"use":["4.27","8.9","8.21","58.0","74.5","88.3","118.3"],"灵活的":["4.28"],"代码组织与交互方式":["4.28"],"它允许开发者将代码分割成多个模块":["4.28"],"如果没传参":["5.2"],"作为参数":["5.4"],"变量":["5.5","25.9","25.10"],"和":["5.5","20.2","28.4","29.5","32.1","41.0","51.10","57.4","59.12","66.5","67.3","67.8","74.4","89.1","90.29","94.3","100.0","114.2"],"才会通过解构赋值生成":["5.5"],"如果函数":["5.5"],"调用时没提供参数":["5.5"],"就不会生成":["5.5"],"从而报错":["5.5"],"通过提供函数参数的默认值":["5.5"],"就可以避免这种情况":["5.5"],"报错":["5.6","8.6","28.3"],"例二":["5.6"],"引入默认值":["5.7"],"其实是解构赋值原理":["5.7"],"也可以叫剩余参数":["5.9"],"其包含函数的参数和其它属性":["5.10"],"以":["5.10"],"变量来指代":["5.10"],"下面我们看个实例":["5.10"],"fn":["5.10","26.11"],"imooc":["5.10"],"在控制台中打印出上面的代码结果":["5.10"],"如下图所示":["5.10"],"在定义函数的时候没有给定参数":["5.10"],"但是通过":["5.10"],"对象可以拿到传入的参数":["5.10"],"可以看到":["5.10"],"中包含了函数传递的参数":["5.10"],"等属性":["5.10"],"args":["5.11","37.6"],"使用剩余参数替代":["5.11"],"剩余参数不一定非要作为函数参数使用":["5.12"],"与数组解构赋值结合":["5.12"],"others":["5.12"],"对象引入了为什么":["5.13"],"functions":["5.14"],"是一种更简洁和灵活的函数定义方式":["5.14"],"result":["5.15","6.3"],"箭头函数通过箭头":["5.15"],"来定义函数":["5.15"],"参数列表在括号内":["5.15"],"my":["5.17","7.2","42.2","157.3"],"避免在对象方法中使用箭头函数":["5.18"],"foo":["5.19","6.8","6.13","28.2"],"bar":["5.19","28.2","28.8"],"上面代码中":["5.19","28.3","28.4","28.7","28.8"],"如果在":["5.19"],"接受":["5.20"],"代码块抛出的错误对象":["5.20"],"删":["6.1","24.5"],"再进行操作":["6.2"],"lo":["6.4"],"常见的有":["6.5"],"trim":["6.5"],"let":["6.6","6.7","6.11","6.18","9.13","9.14","24.2","24.7","24.12","24.13","24.20","24.24","24.28","25.8","26.11","30.7","30.15","31.5","37.2","38.3","38.4","40.4","90.17","90.18","90.20","98.4","98.7","98.14","100.1","108.2","111.8","111.11","119.4","121.17"],"stringvalue":["6.6"],"world":["6.9","27.1","28.8"],"message":["6.11","7.2","90.4","90.17","123.14"],"startswith":["6.13"],"即倒数的位置":["6.14"],"str":["6.16","30.14"],"字符串设计了几个方法":["6.17"],"text":["6.18","6.20","7.3","75.11","157.7","157.10"],"cat":["6.18","6.20"],"否则返回":["6.19"],"bat":["6.20"],"template":["7.1","67.3","67.18","67.20","87.5","90.2","90.5","90.13","91.9","92.6","92.9","92.16"],"strings":["7.1"],"line":["7.3"],"it":["7.3"],"spans":["7.3"],"across":["7.3"],"greeting":["7.4","56.7","56.14"],"包含模板字符串中插入的变量部分":["7.5"],"bob":["7.5"],"age":["7.5","10.10","24.21","31.7","54.1","54.2","59.11","81.3","118.2","123.5"],"下面是另一个例子":["8.1"],"f":["8.1"],"x":["8.1","79.23","130.3","133.2","134.3","149.3","150.3","153.4","156.3"],"y":["8.1","8.17","10.6","100.2","100.3","130.3","131.3","133.2","137.2"],"womam":["8.4"],"下划线以及":["8.5"],"构成":["8.5"],"并且数字还不能打头的时候可以使用点语法":["8.5"],"引用了原型对象":["8.6"],"的":["8.6","37.1","37.4","48.2","65.13","78.10","84.6","90.12","92.14","107.1"],"属性":["8.6","19.1","68.1","99.8","122.13"],"注意":["8.6","28.10"],"关键字表示原型对象时":["8.6"],"只能用在对象的方法之中":["8.6"],"用在其他地方都会报错":["8.6"],"color":["8.8","8.15","8.21","22.1","65.5"],"红色":["8.8","8.21"],"shape":["8.8","8.15","8.21"],"球形":["8.8"],"黑色":["8.9","8.15","8.21"],"圆柱形":["8.9","8.15","8.21"],"写字":["8.9","8.21"],"l":["8.13"],"在所有环境中":["8.20"],"只要两个值是一样的":["8.20"],"它们就应该相等":["8.20"],"提出":["8.20"],"same":["8.20"],"equality":["8.20"],"同值相等":["8.20"],"目标对象":["8.21"],"源对象1":["8.21"],"源对象2":["8.21"],"apple":["8.21"],"圆形":["8.21"],"taste":["8.21"],"甜":["8.21"],"pen":["8.21"],"后面的覆盖前面的":["8.21"],"最终返回的不是新的":["8.21"],"而是修改了前面的":["8.21"],"返回值数组":["8.22"],"返回键值二维数组":["8.22"],"与数组类似方法的区别":["8.22"],"length":["9.3","36.4","36.5","36.6","101.7"],"必须有length属性":["9.3"],"没有则返回空数组":["9.3"],"arr":["9.8","9.11","24.2","38.5","40.2","40.3"],"of":["9.8","9.9","93.4"],"参数1":["9.10"],"默认为结尾":["9.11"],"var":["9.11","28.2","28.9","28.11","31.3","36.1","48.3","59.8","111.8","133.1"],"key":["9.13","46.4","47.4","101.5"],"方法用于查找键名":["9.15"],"遍历函数可接受3个参数":["9.17"],"当前元素":["9.17"],"当前元素索引":["9.17"],"是一种从数组或对象中提取值并赋给变量的语法":["10.0"],"使得在处理数据时更加方便和简洁":["10.0"],"当使用解构赋值时":["10.0"],"c":["10.2","56.8","122.12","122.22"],"d":["10.2","51.7","105.0","109.12","153.9"],"country":["10.8","10.11"],"usa":["10.8","10.11"],"doe":["10.9"],"yearsold":["10.9"],"city":["10.11"],"york":["10.11"],"的元素":["11.1"],"修改文档结构":["11.1"],"getelementbyid":["11.2"],"创建一个新的段落元素":["11.2"],"forward":["12.1"],"back":["12.2"],"它提供了操作浏览器窗口的方法和属性":["13.0"],"如打开":["13.0"],"关闭窗口":["13.0"],"调整窗口大小":["13.0"],"以及获取窗口的位置和尺寸等":["13.0"],"document":["13.0","20.9","21.1","45.3","145.2","148.1"],"它代表当前窗口或标签页中加载的文档":["13.0"],"它提供了对文档内容进行访问和操作的方法和属性":["13.0"],"对象提供了与当前窗口的":["14.0"],"url":["14.0","32.4","32.9","82.3","82.4","111.12","121.16"],"的协议部分":["14.1"],"hostname":["14.1"],"href":["14.2","75.3","75.14","76.4"],"获取url的协议":["14.2"],"用于识别浏览器和操作系统":["15.1"],"useragent":["15.2"],"获取浏览器的名称":["15.2"],"height":["16.1","16.2","72.2","73.7","146.2"],"屏幕的高度":["16.1"],"屏幕高度":["16.2"],"对象是":["17.0"],"打开一个新的浏览器窗口或标签页":["17.1"],"close":["17.1","121.4"],"www":["17.2","73.10","157.11"],"example":["17.2","73.0","75.15","157.11"],"com":["17.2","152.1","152.2","157.11"],"在末尾":["18.1"],"结束标签前":["18.1"],"insertbefore":["18.1"],"在父节点中任意子节点之前插入新节点":["18.1"],"如下代码演示":["18.1"],"html":["18.1","18.2","18.5","19.3","23.2","67.2","67.30","78.4","78.5","79.9","86.7","86.9","86.13","87.5","92.15","112.0","119.4"],"body":["18.1","18.2","18.5","19.3","32.5","67.25","74.1","144.7","145.2","148.1"],"h3":["18.1"],"p":["18.1","28.11","65.14","76.3","81.9","81.11","81.15","83.7","92.11"],"删除节点时一定是由父子关系":["18.2"],"它们要么是父子关系":["18.3"],"apis":["18.4"],"parentnode":["18.4"],"获取父节点":["18.4"],"以相对位置查找节点":["18.4"],"实际应用中非常灵活":["18.4"],"table":["18.4","113.1","117.4","117.5","117.7"],"tr":["18.4"],"td":["18.4"],"width":["18.4","19.2","67.22","67.23","67.24","118.12","146.2","149.3"],"文本或其他类型的内容":["19.1"],"在":["19.1"],"浏览器将":["19.1"],"viewport":["19.2","67.22","118.12"],"content":["19.2","67.22","67.23","70.0","118.12","118.14","121.17"],"device":["19.2","67.22","67.23","67.24"],"标签":["19.3"],"如上图中":["19.3"],"head":["19.3","79.23","86.4","109.7"],"div":["19.3","20.10","65.8","65.9","67.25","81.11","82.11","82.13","82.14","82.15","83.7","86.9","86.10","87.5","90.2","90.5","90.10","90.13","90.14","91.9","92.6","139.4","145.1","147.1","151.2"],"是学习":["19.4"],"的核心":["19.4"],"事件处理是":["20.0"],"便立即调用一个函数":["20.1"],"对象专门用来添加事件监听的方法":["20.2"],"它的两个参数分别为":["20.2"],"事件类型":["20.2"],"事件回调":["20.2"],"使用":["20.2","35.1","67.17","81.14","89.1","130.4","154.0"],"以避免不必要的事件处理":["20.3"],"可以使用以下方法来移除事件监听器":["20.3"],"该事件在鼠标指针每次移动时都会触发":["20.5"],"可以用于实时跟踪鼠标位置":["20.5"],"mouseover":["20.5"],"当鼠标指针进入元素的可见区域时触发":["20.5"],"mouseout":["20.5"],"当鼠标指针离开元素的可见区域时触发":["20.5"],"mouseenter":["20.5"],"与":["20.5","20.8","74.4"],"addeventlistener":["20.6","20.7","20.9"],"keydown":["20.6","20.11"],"当文本框内容发生改变并失去焦点时触发":["20.8"],"事件不同":["20.8"],"事件在用户完成输入并离开文本框时才会触发":["20.8"],"queryselector":["20.9","141.3"],"button":["20.9","71.0","86.13","90.5","90.14","91.5"],"事件流是事件在执行时的底层机制":["20.10"],"主要体现在父子盒子之间事件的执行上":["20.10"],"outer":["20.10","44.2","44.3","44.4"],"键盘事件":["20.11"],"keyup":["20.11"],"keypress":["20.11"],"在事件处理程序中":["20.12"],"通过判断事件的目标元素":["20.12"],"event":["20.12","78.18","84.5","91.4"],"target":["20.12","84.5"],"来确定是哪个子元素触发了事件":["20.12"],"根据需要对目标元素进行处理":["20.12"],"appendchild":["21.0","144.7","145.2","148.1"],"newelement":["21.1"],"设置元素的文本内容":["21.2"],"textcontent":["21.2"],"属性或":["21.2"],"innertext":["21.2"],"添加为":["21.3"],"的子元素":["21.3"],"将元素插入到已有元素之前":["21.3"],"是你要修改的":["22.1"],"css":["22.1","65.1","67.7","69.8","70.2"],"样式属性的名称":["22.1"],"例如":["22.1","35.1","42.3","58.0","76.5","78.2","82.5","122.12","130.6"],"切换类名":["22.2"],"toggle":["22.2"],"getelementsbyclassname":["23.0","23.1"],"根据类名获取元素节点集合":["23.0"],"elementid":["23.1"],"通过类名获取元素":["23.1"],"传入类名":["23.1"],"修改元素的":["23.2"],"是一种可以按顺序保存数据的数据类型":["24.0"],"使用场景":["24.0"],"声明数组并赋值称为数组的初始化":["24.1"],"这种字面量方式也是最多的使用方式":["24.1"],"利用new":["24.1"],"aa":["24.2"],"bb":["24.2"],"cc":["24.2"],"dd":["24.2"],"ee":["24.2"],"增":["24.5"],"push":["24.6","101.6"],"colors":["24.7","24.8","24.9","24.12","24.13","24.17","24.26"],"red":["24.9","24.12","24.13","24.14","24.17","24.26"],"green":["24.9","24.10","24.14","24.17","24.26","98.6"],"blue":["24.9","24.10","24.14","24.17","98.6","135.0"],"colors2":["24.10","24.15"],"pop":["24.11","152.1","152.2"],"splice":["24.16"],"indexof":["24.18"],"numbers":["24.19","24.20","24.28","24.29","84.4"],"reverse":["24.22"],"都不改变原数组":["24.27"],"有如下":["24.27"],"alert":["25.1","56.3"],"yes":["25.1"],"else":["25.1","36.5","41.5","53.3"],"no":["25.1","111.8"],"会自上向下依次对":["25.2"],"后的条件表达式进行求值判断":["25.2"],"如果条件表达式结果为":["25.2"],"则执行当前":["25.2"],"后的语句":["25.2"],"执行完毕语句结束":["25.2"],"false":["25.2","29.7","29.10","51.8","80.9","98.3","98.12"],"则继续向下判断":["25.2"],"直到找到":["25.2"],"表达式2":["25.3"],"表达式3":["25.3"],"while":["25.4","26.9"],"语句":["25.4"],"tip":["25.5","25.6","29.12","52.0","95.3"],"i":["25.8","40.4","51.6","57.2"],"需要执行的代码":["25.9","25.10"],"示例":["25.9","25.10"],"可迭代对象":["25.10"],"而":["25.11","120.2"],"循环迭代对象的是值":["25.11"],"因此":["25.11"],"循环适用于迭代对象的键名":["25.11"],"j":["25.12","38.2"],"可能会定义非常多的相同代码或者功能相似的代码":["26.0"],"这些代码可能需要大量重复使用":["26.0"],"声明定义方式":["26.2"],"sayhi":["26.3"],"hi":["26.3"],"声明函数的关键字":["26.3"],"对外只提供一个简单的函数接口":["26.4"],"我们可以利用函数的参数实现函数重复不同的代码":["26.6"],"函数名":["26.6"],"形参1":["26.6"],"如果实参的个数和形参的个数一致":["26.7"],"则正常输出结果":["26.7"],"以最后一个为准":["26.8"],"函数没有":["26.8"],"返回的值是":["26.8"],"undefined":["26.8","30.16","31.3","98.8"],"函数返回值注意事项":["26.8"],"终止函数":["26.8"],"getsum":["26.8"],"num1":["26.8","30.11"],"num2":["26.8"],"for":["26.9","38.3","38.4","38.6","40.4","74.6","75.13","88.6"],"没有名字的函数":["26.10"],"xxx":["26.12","110.3"],"它也可以在服务器端运行":["27.0"],"用于编写后端代码":["27.0"],"输出hello":["27.1"],"然后浏览器才能执行":["27.2"],"lang":["27.3","79.23"],"en":["27.3","79.23"],"结尾的文件中":["27.4"],"然后通过":["27.4"],"script":["27.4","90.0","93.5"],"快捷键":["27.6","27.7"],"是一种无序的复合数据集合":["28.2"],"obj":["28.2","28.11","90.6"],"的所有键名虽然看上去像数值":["28.3"],"实际上都被自动转成了字符串":["28.3"],"如果键名不符合标识名的条件":["28.3"],"比如第一个字符为数字":["28.3"],"或者含有空格或运算符":["28.3"],"且也不是数字":["28.3"],"则必须加上引号":["28.3"],"否则会报错":["28.3"],"指向同一个对象":["28.4"],"因此为其中任何一个变量添加属性":["28.4"],"另一个变量都可以读写该属性":["28.4"],"此时":["28.4"],"表示一个代码区块":["28.5"],"里面有一个标签":["28.5"],"指向表达式":["28.5"],"为了避免这种歧义":["28.5"],"引擎的做法是":["28.5"],"如果遇到这种情况":["28.5"],"引用对象":["28.7"],"而且":["28.10"],"方法的返回值也不再包括该属性":["28.10"],"删除一个不存在的属性":["28.10"],"不报错":["28.10"],"而且返回":["28.10"],"循环有两个使用注意点":["28.12"],"它遍历的是对象所有可遍历":["28.12"],"enumerable":["28.12"],"的属性":["28.12"],"会跳过不可遍历的属性":["28.12"],"它不仅遍历对象自身的属性":["28.12"],"title":["28.13","67.23","67.24","74.1","86.4","97.2"],"style":["28.13"],"是用于实现赋值":["29.1"],"比较和执行算数运算等动能的符号":["29.1"],"除":["29.2"],"时才会对变量进行赋值":["29.3"],"加等于":["29.3"],"n":["29.3"],"所返回的值不同":["29.5"],"是自增前的值":["29.5"],"旧值":["29.5"],"是自增后的值":["29.5"],"都会使原变量立刻减少":["29.6"],"不同的是":["29.6","89.2"],"大于号":["29.7"],"小于等于号":["29.7"],"与运算是短路的与":["29.9"],"如果第一个值为":["29.9","29.10"],"则不看第二个值":["29.9","29.10"],"与运算是找":["29.9"],"或运算也是短路的或":["29.10"],"执行顺序":["29.12"],"种":["30.1"],"hexnum1":["30.2"],"0xa":["30.2"],"16进制的10":["30.2"],"浮点类型则在数值汇总必须包含小数点":["30.2"],"还可通过科学计数法表示":["30.2"],"就相当于给变量赋予了":["30.3"],"值":["30.3","83.5","83.6"],"firstname":["30.4"],"lastname":["30.4","99.10"],"传一个":["30.5"],"会返回":["30.5"],"的原因":["30.5"],"可以将其他类型的数据转化成布尔值":["30.6"],"规则如下":["30.6"],"数据类型":["30.6"],"转换为":["30.6"],"genericsymbol":["30.7"],"属性名可以是字符串或数值":["30.9"],"并且":["30.10"],"数组也是动态大小的":["30.10"],"会随着数据添加而自动增长":["30.10"],"sum":["30.11"],"date":["30.12","48.3"],"abc":["30.15"],"11px":["30.15"],"null":["30.16","37.3"],"都转换为":["30.16"],"基本数据类型存储在栈中":["30.17"],"赋值操作":["30.18"],"zs":["30.19","118.2"],"引用类型对应的值存储在堆中":["30.20"],"出错":["31.1"],"在函数内定义变量时省略":["31.1"],"可以创建一个全局变量":["31.1"],"referenceerror":["31.2","31.6"],"没有定义":["31.2"],"不能重复声明":["31.2"],"zhangsan":["31.4","95.1"],"但是":["31.5","35.2","88.1"],"即异步的":["32.1"],"的核心对象":["32.2"],"xmlhttprequest":["32.2"],"通过":["32.2","32.3","59.12","78.22","99.0","130.7"],"method":["32.4","108.5","121.16"],"async":["32.4"],"user":["32.4","87.6","110.3","111.10","118.2","118.4","123.3","123.5"],"xhr":["32.5"],"未发送":["32.6"],"send":["32.6","41.5","95.2","118.2","118.4","123.14"],"headers":["32.6"],"received":["32.6"],"以获取响应头":["32.6"],"方法已经被调用":["32.6"],"响应头和响应状态已经返回":["32.6"],"loading":["32.6"],"正在下载响应体":["32.6"],"get":["32.8","99.9"],"touppercase":["32.8"],"datatype":["32.8","113.1"],"json":["32.8","32.9","40.2","45.4","125.5","125.6","126.4"],"params":["32.8","108.5"],"data":["32.8","32.9","92.6","107.5","118.12","119.4","121.3"],"发送请求":["32.8"],"https":["32.9","73.10","110.1","119.3","152.1","152.2"],"是":["34.0","43.0","79.10","79.11"],"outervariable":["34.1","44.3"],"innerfunction":["34.1","44.2","44.3","44.4"],"increment":["34.2","36.1","88.5"],"getage":["34.3","53.2"],"工厂函数可以包含一些内部变量和方法":["34.4"],"这些内部变量和方法对外部不可见":["34.4"],"只有通过返回的对象实例才能访问":["34.4"],"实现模块化":["34.4"],"闭包中的变量是引用传递的":["34.5"],"而不是传值":["34.5"],"如果在闭包中修改外部变量":["34.5"],"那么外部作用域中的变量也会被修改":["34.5"],"可以使用一些简单的方法来实现浅拷贝":["35.1"],"assign":["35.1"],"此方法将原始对象转换为":["35.2"],"字符串":["35.2"],"然后再将":["35.2"],"字符串解析为一个新的对象":["35.2"],"从而实现深拷贝":["35.2"],"需要注意的是":["35.2"],"此方法对于无法序列化的属性":["35.2"],"如函数":["35.2"],"正则表达式":["35.2"],"循环引用等":["35.2"],"返回一个新函数":["36.1"],"用于增加":["36.1"],"每个函数接收一个参数并返回一个新函数":["36.2"],"使得函数的组合和复合变得简单而灵活":["36.2"],"高阶函数的创建":["36.2"],"可以将原始函数转化为高阶函数":["36.2"],"即接收一个函数作为参数并返回一个新函数的函数":["36.2"],"中实现柯里化函数的方法有多种":["36.3"],"apply":["36.4","37.3","37.7"],"是两种常见的性能优化技术":["37.0"],"用于限制函数的执行频率":["37.0"],"它们可以帮助控制事件处理函数的触发次数":["37.0"],"以减少资源消耗和提升用户体验":["37.0"],"resize":["37.1","37.4"],"throttle":["37.2","37.7"],"func":["37.2"],"delay":["37.2"],"那么定时器触发后执行函数":["37.5"],"如果在指定时间内又有新的函数调用发生":["37.5"],"则重新开始计时":["37.5"],"以下是一个简单的防抖函数的实现示例":["37.5"],"context":["37.6","131.1","131.2","136.6","138.2"],"this":["37.6","37.7","42.8","53.1","53.2","54.2","57.2","59.7","78.18","80.3","80.13","81.10","81.11","81.15","84.2","84.3","84.4","85.3","99.1","99.6","99.8","99.10","101.6"],"arguments":["37.6"],"res":["38.3","38.4","38.6","118.2","118.4","118.5","118.6","119.4","121.16","123.5","123.14"],"unique":["38.5"],"同步任务":["39.1"],"需要执行的任务在主线程上排队":["39.1"],"一次执行":["39.1"],"异步任务":["39.1"],"node":["39.2","86.3","102.10","111.7","121.9","121.11","121.15","122.21","125.1"],"promise":["39.2","107.1"],"observe":["39.2"],"mutationobserver":["39.2"],"然后开始执行宏任务队列":["39.3"],"一次只执行一个":["39.3"],"执行完后检查当前微任务队列是否有任务":["39.3"],"有":["39.3"],"执行微任务队列":["39.3"],"直至清空微任务":["39.3"],"res1":["40.1"],"stringify":["40.2","41.5"],"有三种状态":["41.0"],"pending":["41.0"],"进行中":["41.0"],"fulfilled":["41.0"],"已成功":["41.0"],"catch":["41.2","41.4","107.3","107.4"],"方法可以处理异步操作失败的结果":["41.2"],"处理第一个操作成功的结果":["41.3"],"anotherpromise":["41.3"],"promise2":["41.4"],"promise3":["41.4"],"results":["41.4"],"处理所有":["41.4"],"实例成功的结果":["41.4"],"error":["41.5","98.10","101.7","107.3","111.8"],"statustext":["41.5"],"onerror":["41.5"],"network":["41.5"],"示例用法":["41.5"],"requestdata":["41.5"],"username":["41.5","45.1","45.3","111.10"],"对象都有一个原型对象":["42.1"],"它是一个包含属性和方法的对象":["42.1"],"is":["42.2","42.4","74.6"],"eating":["42.4"],"dog":["42.4","53.3"],"breed":["42.4"],"call":["42.4","59.10"],"中有多种方式来实现原型继承":["42.5"],"prototype":["42.6","53.1"],"eat":["42.6","42.7","42.8","42.9"],"该对象的原型就是传入的原型对象":["42.7"],"animal":["42.7","42.8","42.9"],"以下是一些主要区别":["42.10"],"传统面向对象编程语言通常使用类来定义对象的结构和行为":["42.13"],"更可维护的代码":["42.14"],"虽然你可以修改内建对象的原型":["42.15"],"将方法添加到原型上而不是在构造函数内部定义方法":["42.16"],"当在子对象上定义与父对象相同名称的属性或方法时":["42.17"],"create":["42.18","74.5","93.6","117.4"],"是回调函数":["43.1"],"输出结果为":["43.3"],"打印结果":["43.3","43.4"],"这里注意初始值要默认赋予空对象":["43.4"],"不然会报错":["43.4"],"newarr":["43.5","43.7"],"chinese":["43.8"],"建议始终提供":["43.9"],"initialvalue":["43.9"],"来明确指定累加器的初始值":["43.9"],"以避免空数组或其他边界情况可能导致的错误":["43.9"],"globalfunction":["44.1"],"innervariable":["44.2"],"outerfunction":["44.3"],"是由服务器发送到浏览器的小型文本文件":["45.0"],"expires":["45.1","45.3"],"fri":["45.1"],"dec":["45.1"],"的值":["45.4"],"存储的值通常是字符串类型":["45.4"],"如果需要存储其他数据类型":["45.4"],"如对象或数组":["45.4"],"可以使用":["45.4","82.8","84.6"],"storage":["46.0","47.0"],"api":["46.0","47.0","123.14","154.0"],"提供的一种本地存储机制":["46.0","47.0"],"其中":["46.1","47.1"],"中检索数据":["46.2","47.2"],"如果键不存在":["46.2","47.2"],"中的数据":["46.3","47.3"],"removeitem":["46.4","47.4"],"clear":["46.5","47.5"],"方法来删除":["46.5","47.5"],"setitem":["46.6","47.6"],"storeduser":["46.6","47.6"],"getminutes":["48.1"],"获取分钟数":["48.1"],"getmonth":["48.1"],"获取月份":["48.1"],"一月":["48.1"],"mydate":["48.2","48.3"],"秒起至现在的总秒数或毫秒数":["48.4"],"它是一种特殊的计量时间的方式":["48.4"],"注":["48.4"],"中时间戳是以毫秒计的":["48.4"],"获取时间戳的方法":["48.4"],"分别为":["48.4"],"setfullyear":["48.5"],"的一个内置对象":["49.0"],"它提供了一些数学属性和方法":["49.0"],"获取圆周率":["49.1"],"函数":["49.3","49.5","49.12","90.31","104.0"],"到小于":["49.4"],"返回大于或等于一个给定数的最小整数":["49.5"],"返回小于或等于一个给定数字的最大整数":["49.6"],"取整":["49.7"],"是可以返回指定一组数据中最小值":["49.8"],"是可以返回指定一组数据中最大值":["49.9"],"exponent":["49.10"],"次幂":["49.10"],"求某个数的多少次方":["49.10"],"返回一个值的正弦值":["49.12"],"返回一个值的余弦值":["49.13"],"min":["50.1","67.20"],"中能表示的最小正数值":["50.1"],"tofixed":["50.2"],"digits":["50.2"],"将数值转换为指定小数位数的字符串表示":["50.2"],"表示保留的小数位数":["50.2"],"toprecision":["50.2"],"precision":["50.2"],"将数值转换为指定精度的字符串表示":["50.2"],"表示有效位数":["50.2"],"tostring":["50.2"],"将数值转换为字符串":["50.2"],"是一个内置的对象类型":["51.1"],"可以通过字面量或构造函数来创建":["51.1"],"正则表达式是一种由字符和特殊符号组成的模式":["51.1"],"用于定义字符串的搜索规则":["51.1"],"它接收两个参数":["51.4"],"匹配字符串的结尾":["51.5"],"匹配前面的元素零次或多次":["51.5"],"全局匹配":["51.6"],"找到所有匹配项而不仅仅是第一个":["51.6"],"匹配数字":["51.7"],"匹配非数字":["51.7"],"test":["51.8","98.8"],"检查字符串是否匹配正则表达式":["51.8"],"并返回":["51.8"],"或":["51.8","107.4","111.8","121.17"],"exec":["51.8"],"在字符串中执行正则表达式匹配":["51.8"],"输出":["51.9"],"不区分大小写匹配":["51.10"],"m":["51.10","109.6","153.9"],"多行匹配":["51.10"],"允许":["51.10"],"密码等":["51.11"],"字符串替换":["51.11"],"使用正则表达式进行文本替换":["51.11"],"格式化或删除特定的字符":["51.11"],"用于处理各种不同类型的数据和操作":["52.0"],"简介":["52.0"],"数组":["52.1","56.5","59.12"],"string":["52.1","98.1","98.5","98.13","98.14","99.11","103.2","103.5","103.6"],"字符串对象":["52.1"],"number":["52.1","98.5","98.9","99.2","100.3","100.4","106.1"],"的基础对象":["52.2"],"它提供了一系列的方法来操作和处理数据集合":["52.3"],"如添加":["52.3"],"它提供了许多字符串相关的方法":["52.4"],"它提供了一系列数字相关的方法":["52.5"],"如四舍五入":["52.5"],"包括":["52.6"],"它提供了一系列的方法来操作日期和时间":["52.7"],"如获取当前时间":["52.7"],"它提供了一系列数学运算方法":["52.8"],"可以用于文本匹配":["52.9"],"公有方法":["53.2"],"getname":["53.2","95.2"],"instanceof":["53.3"],"woof":["53.3"],"但在":["54.0"],"其中程序被组织为一组对象":["55.1"],"封装":["55.2"],"封装是面向对象编程的重要原则":["55.2"],"它指的是将数据和操作数据的方法封装在一个单元中":["55.2"],"以隐藏内部实现细节":["55.2"],"只暴露必要的接口":["55.2"],"继承":["55.2"],"大家好啊":["56.3"],"调用对象":["56.3"],"来调用构造函数":["56.4"],"构造函数的特点有两个":["56.4"],"函数体内部使用了":["56.4"],"代表了所要生成的对象实例":["56.4"],"生成对象的时候":["56.4"],"必须使用":["56.4"],"命令":["56.4"],"freeze":["56.5"],"冻结一个对象":["56.5"],"防止对其进行修改":["56.5"],"getownpropertydescriptor":["56.5"],"obj2":["56.6"],"myproto":["56.7"],"descriptor":["56.11"],"symbol":["56.13"],"mysymbol":["56.13"],"添加属性无效":["56.18"],"不会影响原对象":["56.18"],"delete":["56.18"],"原型和原型链是面向对象编程中的重要概念":["57.0"],"原型对象是另一个普通对象":["57.1"],"它包含了可供共享的属性和方法":["57.1"],"当我们访问对象的属性或方法时":["57.1"],"会首先在对象自身查找":["57.1"],"如果找不到":["57.1"],"则继续在对象的原型上查找":["57.1"],"am":["57.2"],"这样可以节省内存空间":["57.3"],"setprototypeof":["57.4"],"要在整个脚本文件中启用严格模式":["58.0"],"只需在脚本的顶部添加一行":["58.0"],"即可":["58.0"],"准确来说":["59.1"],"是在函数发生预编译的前一刻":["59.1"],"这个隐含的参数就是":["59.2"],"以函数形式调用":["59.3"],"this是window":["59.3"],"可以理解成":["59.3"],"的形式调用时":["59.3"],"指向调用方法的那个对象":["59.3"],"绑定":["59.4"],"无论":["59.4"],"专门为我们提供了一些方法来改变函数内部的":["59.5"],"它还可以改变这个函数内部的":["59.7"],"指向":["59.7"],"类似":["59.10"],"方法的应用":["59.10"],"由于":["59.10"],"fn1":["59.11","100.4"],"传的刚好是":["59.12"],"所以我们可以":["59.12"],"曲线救国":["59.12"],"举例":["59.12"],"方法使用得最为频繁":["59.14"],"如果有些函数":["59.14"],"我们不需要立即调用":["59.14"],"但是又想改变这个函数内部的":["59.14"],"此时用":["59.14"],"微信":["60.0"],"可快速为同类型标签统一设置样式":["65.2"],"缺点":["65.2"],"container":["65.3","65.9","67.7","67.18","67.19","67.25","69.3","69.8"],"属性选择元素":["65.4"],"good类的p元素":["65.5"],"yellow":["65.5"],"类名包含good和beauty的元素":["65.5"],"语法":["65.6"],"选择器1":["65.6"],"选择器2":["65.6"],"ul":["65.7","75.14","81.10","82.14","82.15"],"被选中":["65.9"],"结构选择元素":["65.10"],"visited":["65.11"],"链接访问后的样式":["65.11"],"的第一个":["65.12"],"的最后一个":["65.12"],"val":["65.13"],"属性且属性值等于":["65.13"],"在元素内部后面插入内容":["65.14"],"伪元素字体图标":["65.14"],"e91e":["65.14"],"position":["65.14"],"absolute":["65.14","69.6"],"right":["65.14"],"20px":["65.14"],"top":["65.14","69.6"],"10px":["65.14"],"font":["65.14"],"也称为弹性盒子布局":["66.0"],"是一种用于创建灵活":["66.0"],"自适应的网页布局的":["66.0"],"容器的父元素上设置":["66.1"],"display":["66.1","67.7","67.18","67.19","69.7","71.0"],"决定":["66.2"],"项目的排列方向":["66.2"],"row":["66.2"],"项目靠主轴起始位置对齐":["66.3"],"end":["66.3"],"项目靠主轴末尾位置对齐":["66.3"],"center":["66.3"],"项目在主轴上居中对齐":["66.3"],"space":["66.3","66.10"],"between":["66.3","66.10"],"wrap":["66.4","66.5"],"属性来控制项目是否换行":["66.4"],"shrink":["66.6"],"如果没有设置宽度或高度":["66.7"],"项目在交叉轴上的对齐方式":["66.9"],"start":["66.9","93.4"],"多行项目靠交叉轴起始位置对齐":["66.9"],"属性设置为":["66.10"],"实现两端对齐效果":["66.10"],"平均分布":["66.10"],"其中包含了行":["67.1"],"rows":["67.1","67.8","115.0"],"和列":["67.1"],"首先需要将一个":["67.2"],"元素定义为网格容器":["67.2"],"columns":["67.3","67.18","67.19","67.20"],"是定义网格单元格边界的线条":["67.4"],"水平的网格线定义了行":["67.4"],"而垂直的网格线定义了列":["67.4"],"我们可以通过指定网格线的名称或索引来定位网格项":["67.4"],"网格跨度":["67.4"],"布局的属性详解":["67.5"],"用于定义网格的列和行的大小和结构":["67.6"],"可以更清晰地定义布局结构":["67.7"],"定义网格项之间的间隔":["67.9"],"行和列之间的间距":["67.9"],"定义了当网格项目无法放入先前定义的网格轨道时":["67.12"],"如何自动创建额外的网格项目":["67.12"],"用于定义网格项目在网格容器内部的对齐方式":["67.14"],"grid":["67.17","67.32"],"1fr":["67.20"],"默认一个列":["67.20"],"适用于手机屏幕":["67.20"],"布局的实际应用":["67.21"],"initial":["67.23","67.24"],"scale":["67.23","67.24","131.0","156.1"],"complex":["67.23"],"nested":["67.24"],"dynamic":["67.25"],"layout":["67.25","92.6"],"item":["67.25","95.4"],"flexbox":["67.26"],"的比较":["67.26"],"适用于创建二维布局":["67.27"],"即同时控制行和列的布局":["67.27"],"可以实现更复杂的布局结构":["67.28"],"支持二维布局":["67.28"],"可以精确控制网格项的位置和跨度":["67.28"],"在使用":["67.29","122.21"],"布局中":["67.30"],"网格项的顺序并不一定与它们在":["67.30"],"虽然":["67.31"],"尽管":["67.32"],"areas":["67.33"],"来定义布局":["67.33"],"行内":["68.0"],"类":["68.1"],"伪类":["68.1"],"元素":["68.1","78.2","80.5"],"伪元素":["68.1"],"span":["69.1","76.2"],"box":["69.2"],"200px":["69.5"],"background":["69.5"],"skyblue":["69.5","153.9"],"left":["69.6"],"justify":["69.7"],"12333333333333333333333333":["70.0"],"border":["70.1"],"1px":["70.1"],"solid":["70.1"],"margin":["70.3","72.2"],"auto":["70.3"],"限定高度以及行高":["70.3"],"并且行高与高度要成比例":["70.3"],"上下箭头":["71.0"],"none":["71.0"],"滚动条轨道":["71.0"],"black":["72.1"],"朝下的三角形":["72.1"],"down":["72.1"],"175px":["72.2"],"id":["73.0","73.11","86.17"],"audioplayer":["73.0"],"controls":["73.0","73.7","155.7"],"mp3":["73.0","73.2"],"type":["73.0","90.6","99.9","111.12","118.12","133.1"],"audio":["73.2"],"mp4":["73.3"],"video":["73.3"],"描述":["73.5","73.6","157.9"],"视频显示区域的宽高":["73.7"],"play":["73.8"],"src":["73.10","75.15","111.9","157.7"],"缩小":["73.11"],"makenormal":["73.11"],"普通":["73.11"],"br":["73.11"],"video1":["73.11"],"hypertext":["74.0"],"utf":["74.1","79.23"],"网页标题":["74.1"],"网页内容在这里":["74.1"],"标签可以包含属性":["74.2"],"属性用于为标签提供额外的信息或设置":["74.2"],"属性以键值对的形式出现":["74.2"],"放在标签的开始标签中":["74.2"],"attribute":["74.2"],"header":["74.3"],"footer":["74.3","92.9"],"nav":["74.3","82.13","82.14","82.15"],"结合":["74.4"],"that":["74.5","93.4"],"you":["74.5","93.4"],"can":["74.5"],"to":["74.5","82.15","93.4"],"outside":["74.6"],"loader":["74.6","144.7"],"logic":["74.6"],"an":["74.6"],"additional":["74.6"],"hook":["74.6","90.31"],"needed":["74.6"],"better":["74.6"],"perf":["74.6"],"on":["74.6","80.13","119.4","143.1"],"in":["74.6"],"标签时":["75.0"],"代码块会被渲染成":["75.0"],"这是h1级别的标题":["75.1"],"h2":["75.1"],"这是一个":["75.8"],"这是一行文本":["75.10"],"placeholder":["75.11"],"输入文本":["75.11"],"post":["75.13","108.5","123.14"],"label":["75.13"],"li":["75.14","82.14","82.15","86.12"],"home":["75.14"],"标签用于定义网页的结构和内容":["76.0"],"方便样式和布局控制":["76.1"],"h1":["76.1","82.10","121.17"],"到":["76.1","134.2"],"h6":["76.1"],"标题标签":["76.1"],"用于创建超链接到其他网页或文档":["76.2"],"内联容器标签":["76.2"],"类似于":["76.2"],"标签中":["76.3"],"然后在":["76.3"],"标签用":["76.4"],"属性来指定链接地址":["76.4"],"避免与未来":["76.5"],"版本中的新标签冲突":["76.5"],"再":["77.1"],"标签上设置属性":["77.1"],"为":["77.1"],"很容易被浏览器识别":["77.1"],"构建动态":["78.0"],"的一种特殊语法扩展":["78.1"],"它允许我们在":["78.1"],"函数的调用":["78.2"],"从而创建":["78.2"],"下面的":["78.2"],"标签一样写":["78.4"],"react":["78.4","78.11","78.16","79.5","79.10","79.11","79.16","79.17","79.18","79.19","80.3","80.4","80.5","80.8","80.11","81.5","81.7","81.8","81.12","83.4","84.1","85.4","92.14"],"组件的标签":["78.4"],"属性的写法与":["78.5"],"标签类似":["78.5"],"ui":["78.6","78.10"],"结构":["78.6"],"可以在大括号内使用":["78.7"],"中的最大价值在于支持组件化开发":["78.9"],"通过组件化开发":["78.9"],"我们可以将":["78.9"],"并返回一个描述":["78.10"],"component":["78.11","80.3","80.4","80.8","80.11","81.5","81.7","81.8","81.9","81.15","83.3","83.4","84.2","84.3","84.4","85.2","85.3","85.4","85.5","92.15"],"并且具有状态和生命周期方法":["78.11"],"标签一样使用组件的标签":["78.12"],"将属性传递给组件":["78.12"],"即根据条件来决定是否渲染组件或显示不同的内容":["78.13"],"props":["78.14","78.18","79.1","80.3","81.10","81.11","83.4","84.2","84.3","85.2","85.3","85.4","85.5","91.1"],"products":["78.17"],"super":["78.18","80.3","80.8","83.4","84.2","84.3","84.4","85.2","85.3","85.5"],"state":["78.18","84.2","84.3","84.4","85.3","88.3","88.5","90.10"],"email":["78.18","109.1"],"handlechange":["78.18","84.5"],"fahrenheit":["78.19"],"setfahrenheit":["78.19"],"handlecelsiuschange":["78.19"],"并返回一个新的组件":["78.20"],"withlogger":["78.20"],"wrappedcomponent":["78.20"],"themecontext":["78.21"],"createcontext":["78.21"],"light":["78.21"],"app":["78.21","86.17","123.14","128.2","146.2","149.1","149.3"],"特性":["78.22"],"我们可以在函数组件中使用类组件的功能":["78.22"],"如状态管理":["78.22"],"应用程序的":["79.0"],"是单向数据流的框架":["79.1"],"这意味着数据在组件层级之间通过":["79.1"],"向下传递":["79.1"],"而不允许在子组件中直接修改父组件的数据":["79.1"],"引入了组件化开发的概念":["79.3"],"将复杂的用户界面划分为独立的组件":["79.3"],"树":["79.4"],"用于表示真实":["79.4"],"采用了单向数据流的数据管理模式":["79.5"],"有众多优秀的第三方库和工具":["79.6"],"可以帮助开发者更高效地构建":["79.6"],"web":["79.6"],"时":["79.7"],"每个组件封装了特定的功能和状态":["79.8"],"可以在其他组件中重复使用":["79.8"],"组件可以是函数组件或类组件":["79.8"],"的语法扩展":["79.9"],"允许在":["79.9"],"中用于组件之间通信的机制":["79.10"],"组件内部管理的可变数据":["79.11"],"组件具有不同的生命周期阶段":["79.12"],"包括组件的挂载":["79.12"],"输入等":["79.13"],"并对其进行响应":["79.13"],"通过条件语句":["79.14"],"我们可以使用":["79.15"],"状态提升是一种在":["79.17"],"用于在":["79.18"],"的上下文允许在组件树中共享数据":["79.19"],"引入的新特性":["79.20"],"我们需要先安装几个包":["79.22"],"的核心库":["79.22"],"meta":["79.23"],"charset":["79.23"],"http":["79.23"],"equiv":["79.23"],"ua":["79.23"],"jsx":["79.24","80.4","80.6","80.10","81.4","82.12","83.3","83.5"],"import":["79.24","82.12","88.3","90.8","90.31","92.2","108.6","111.11"],"生命周期是指组件在不同阶段经历的一系列方法调用":["80.0"],"渲染组件的内容":["80.1"],"componentdidmount":["80.1","80.13"],"组件挂载到":["80.1"],"dom":["80.1","86.18","91.3"],"后调用":["80.1"],"用于进行副作用操作":["80.1"],"如网络请求":["80.1"],"mycomponent":["80.4","80.6","80.11","81.4","81.5","83.3","83.5"],"我们应该返回一个":["80.5"],"操作":["80.6"],"表示需要重新渲染":["80.9"],"表示不需要重新渲染":["80.9"],"默认返回":["80.9"],"并返回一个值":["80.10"],"该值将作为第三个参数传递给":["80.10"],"componentdidupdate":["80.10","83.5"],"订阅事件":["80.13"],"eventemitter":["80.13"],"someevent":["80.13"],"handleevent":["80.13"],"的缩写":["81.1"],"意为属性":["81.1"],"每个":["81.1"],"childcomponent":["81.3","83.7"],"defaultprops":["81.4"],"来实现":["81.4"],"包括字符串":["81.6"],"数字":["81.6"],"render":["81.7","81.8","81.9","81.15","83.7"],"items":["81.10","97.2"],"之前":["81.14"],"需要先安装":["81.14"],"prop":["81.14"],"types":["81.14"],"库":["81.14"],"bash":["81.14","93.1","102.9","102.10"],"npm":["81.14","86.3","107.2","111.4","126.7"],"install":["81.14","118.10","119.2","122.16","127.2"],"count":["81.15","88.5"],"它允许我们在单页应用中切换不同的页面视图":["82.1"],"而无需重新加载整个页面":["82.1"],"相比传统多页应用":["82.1"],"单页应用":["82.1"],"它表示一个特定的":["82.3"],"路径和对应的页面组件":["82.3"],"当用户访问该路径时":["82.3"],"并且这些页面组件具有各自的":["82.4"],"我们可以通过路由参数在":["82.5"],"它允许用户点击链接来切换不同的页面视图":["82.6"],"而无需进行页面的完全刷新":["82.6"],"编程式导航允许我们在组件中使用":["82.7"],"来手动触发页面的切换":["82.7"],"的依赖":["82.8"],"page":["82.10"],"about":["82.11"],"contact":["82.11","82.13","82.14"],"index":["82.12","111.9","112.0"],"subpage":["82.13"],"userprofile":["82.14"],"组件都可以拥有自己的":["83.1"],"并在需要时对其进行更新":["83.1"],"后立即获取最新的":["83.5"],"可以使用回调函数或者在":["83.5"],"生命周期方法中获取":["83.5"],"并根据当前":["83.6"],"的值返回一个新的":["83.6"],"这样做的原因是确保":["83.6"],"的变化能够被":["83.6"],"正确地追踪和处理":["83.6"],"listrendering":["84.2","84.4"],"newnumber":["84.5"],"setstate":["84.5"],"addnumber":["84.5"],"当需要在":["84.6"],"方法中返回多个元素时":["84.6"],"来包裹这些元素":["84.6"],"从而避免额外的":["84.6"],"的条件语句":["85.1"],"conditionalrendering":["85.2","85.4","85.5"],"isloggedin":["85.3"],"在条件渲染中":["85.6"],"可能会遇到变量未定义或为空的情况":["85.6"],"为了避免出现错误":["85.6"],"可以使用默认值来处理这些情况":["85.6"],"避免嵌套过深":["85.6"],"在条件渲染时":["85.6"],"尽量避免嵌套过深的代码结构":["85.6"],"以免影响代码的可读性和性能":["85.6"],"是一套用于构建用户界面的渐进式":["86.1"],"package":["86.3","125.6"],"进行数据插值":["86.6"],"将数据绑定到":["86.6"],"实例的数据绑定":["86.7"],"img":["86.7","111.6","157.9"],"并执行相应的方法":["86.13"],"指令实现表单输入和":["86.14"],"vue":["86.14","86.16","87.2","90.2","90.6","90.13","90.16","90.17","90.18","90.19","90.20","91.6","91.9","92.2","92.6","92.9","92.12","92.16","155.9","155.12"],"模板已经编译完成":["86.18"],"但尚未将其挂载到":["86.18"],"mounted":["86.18","90.27","90.28"],"挂载后":["86.18"],"渲染之后调用":["86.18"],"组件已经被挂载到":["86.18"],"router":["87.2","87.4"],"createrouter":["87.3"],"createwebhistory":["87.3"],"组件中使用":["87.4"],"view":["87.4","144.7","145.2"],"以在单页面应用中切换不同的路由":["87.5"],"routes":["87.6","87.7"],"path":["87.6"],"例如登录验证":["87.8"],"权限控制等":["87.8"],"了解更多高级配置":["87.12"],"应用程序开发的状态管理模式":["88.0"],"它是一个集中式的状态管理库":["88.0"],"获取器":["88.1"],"用于从":["88.1"],"的全局状态中派生出一些状态":["88.1"],"类似于组件的计算属性":["88.1"],"computed":["88.1","94.3"],"方便开发者进行状态的调试和追踪":["88.2"],"组件通信":["88.2"],"可以轻松实现跨组件的状态共享和通信":["88.2"],"避免了传统的":["88.2"],"mutations":["88.3"],"actions":["88.3"],"getters":["88.3"],"假设我们有一个简单的计数器应用":["88.4"],"以下是使用":["88.4"],"的例子":["88.4"],"store":["88.4","88.5"],"vuex":["88.5"],"go":["88.6"],"run":["88.6"],"read":["88.6"],"book":["88.6"],"获取所有的todos":["88.6"],"alltodos":["88.6"],"对每个属性":["89.1"],"来定义":["89.1"],"getter":["89.1"],"setter":["89.1"],"这个过程使得":["89.1"],"能够更灵活地捕获数据的变化":["89.2"],"依赖追踪":["89.2"],"dependency":["89.2"],"tracking":["89.2"],"仍然使用依赖追踪的机制":["89.2"],"但与":["89.2"],"标签中添加":["90.0"],"setup":["90.0","90.23"],"就可以做到":["90.0"],"函数是":["90.1"],"新增的一个选项":["90.1"],"它是组合式":["90.1"],"使用reactive":["90.2"],"去修改值无须":["90.2"],"ref其实也是内部调用":["90.2"],"来实现的":["90.2"],"我是message":["90.4"],"hr":["90.7"],"reactive":["90.8","90.18","90.19","90.20","94.3"],"不论是响应式还是普通的":["90.9"],"如果原始对象是":["90.12"],"非响应式":["90.12"],"作用基本一致":["90.15"],"他们都是用来监听响应式状态发生变化的":["90.16"],"当响应式状态发生变化时":["90.16"],"就会触发一个回调函数":["90.16"],"watch":["90.19"],"响应式":["90.21"],"追踪其依赖":["90.21"],"可以接收一个参数":["90.22"],"叫oninvalidate":["90.22"],"在组件的":["90.23"],"更新时机":["90.24"],"过程":["90.25"],"成为生命周期":["90.25"],"只调用一次":["90.27"],"元素插入父级dom调用":["90.27"],"any":["90.28","103.5"],"在元素上做些操作":["90.28"],"初始化一次":["90.28"],"el":["90.28"],"该值为":["90.29"],"oldvalue":["90.29"],"先前的值":["90.29"],"仅在":["90.29"],"beforeupdate":["90.29"],"updated":["90.29"],"中可用":["90.29"],"v":["90.30","91.12"],"move":["90.30"],"可以帮助我们提高代码的复用性":["90.31"],"让我们能在不同的组件中都利用":["90.31"],"案列":["90.31"],"实现一个窗口改变时获取宽高的":["90.31"],"组件通信方式":["91.1"],"可以实现父子组件":["91.1"],"child":["91.2","91.7"],"info":["91.2"],"我爱祖国":["91.2"],"money":["91.2"],"子组件获取父组件传递数据":["91.2"],"一种是原生的":["91.3"],"标签绑定原生":["91.4"],"事件点击事件":["91.4"],"默认会给事件回调注入":["91.4"],"事件对象":["91.4"],"我是子组件2":["91.5"],"click":["91.5","138.1","143.1"],"handler":["91.5"],"点击我触发xxx自定义事件":["91.5"],"我们会发现在":["91.5"],"但是在":["91.6"],"vue3":["91.6","91.10","92.13"],"中没有":["91.6"],"实现的":["91.7"],"下方代码":["91.7"],"相当于给组件":["91.7"],"传递一个":["91.7"],"与绑定一个自定义事件":["91.7"],"vue2":["91.8","102.6"],"框架中":["91.8"],"attrs属性与":["91.8"],"listeners":["91.8"],"比如":["91.8","91.9"],"那么子组件内部的方法与响应式数据父组件可以使用的":["91.9"],"在父组件挂载完毕获取组件实例":["91.9"],"父组件内部代码":["91.9"],"注入":["91.10"],"提供两个方法":["91.10"],"pinia":["91.11"],"web3doc":["91.11"],"父组件内部向指定的具名插槽传递结构":["91.12"],"需要注意":["91.12"],"可以替换为":["91.12"],"并且对":["92.5"],"menu":["92.6"],"slot":["92.8","92.10"],"父组件使用需对应名称":["92.9"],"派发给父组件的":["92.10"],"去使用":["92.10"],"父组件":["92.11","92.16"],"defineasynccomponent":["92.12"],"异步加载":["92.12"],"新增了":["92.13"],"了":["92.13"],"就不必跟踪何时加载数据并呈现相应的内容":["92.13"],"portal":["92.14"],"主要解决的问题":["92.14"],"因为teleport节点挂载在其他指定的dom节点下":["92.14"],"只会触发":["92.15"],"基本":["92.15"],"children":["92.16"],"modelvalue":["92.17"],"update":["92.17","155.8"],"input":["92.17","141.4"],"新增":["92.17"],"一个组件可以设置多个":["92.17"],"g":["93.2"],"版本在":["93.3"],"choose":["93.4"],"version":["93.4"],"want":["93.4"],"标签上支持原生":["93.5"],"esm":["93.5"],"yarn":["93.6"],"init":["93.7","109.3","111.6","125.4","157.11"],"one":["94.1"],"piece":["94.1"],"初次渲染快55":["94.2"],"lisi":["95.1"],"子组件":["95.2"],"常用的就是定义":["95.3"],"num":["98.2"],"普通数字":["98.2"],"也可以通过函数返回布尔值":["98.3"],"可以在元素类型后面接上":["98.4"],"表示由此类型元素组成的一个数组":["98.4"],"ts":["98.4","98.14","99.11","100.4","102.3","103.1","105.0","111.11"],"ok":["98.5"],"增长枚举":["98.6"],"不能带有return":["98.8"],"也可以定义":["98.8"],"是所有类型的子类型":["98.9"],"就是说你可以把":["98.9"],"赋值给":["98.9"],"或者":["98.9","107.3","122.16"],"将不会有返回值":["98.10"],"但本身不会出错":["98.11"],"编译成功":["98.12"],"man":["98.13"],"sex":["98.13"],"方式二":["98.14"],"使用any临时断言":["98.14"],"somevalue":["98.14"],"作为对象的模板":["99.0"],"distance":["99.2"],"private":["99.3"],"在类型":["99.8"],"上不存在":["99.8"],"boolean":["99.9"],"personclass2":["99.9"],"fullname":["99.10"],"是指不包含具体实现的方法":["99.11"],"public":["99.11","118.3"],"匿名函数":["100.1"],"箭头函数":["100.1"],"myadd":["100.1"],"同样也可以有任意个":["100.4"],"编译器创建参数数组":["100.4"],"名字是你在省略号":["100.4"],"后面给定的名字":["100.4"],"你可以在函数体内使用这个数组":["100.4"],"在实现上我们要注意严格判断两个参数的类型是否相等":["100.5"],"而不能简单的写一个":["100.5"],"typeof":["100.5"],"不预先指定具体的类型":["101.0"],"u":["101.5"],"getvalue":["101.6"],"类型":["101.7","118.15"],"typescript":["102.1"],"的简称":["102.1"],"的基础上加入了类型系统":["102.2"],"让每个参数都有明确的意义":["102.2"],"从而带来了更加":["102.2"],"边解释边执行":["102.3"],"错误只有在运行的时候才能发现":["102.3"],"友好地在编辑器里提示错误":["102.5"],"如以前在":["102.6"],"global":["102.7"],"查看版本":["102.7"],"tsc":["102.7"],"interfaces":["103.0"],"这样写是会报错的":["103.1"],"因为我们在person定义了name":["103.1"],"stirng":["103.3"],"带有可选属性的接口与普通的接口定义差不多":["103.4"],"在可选属性名字定义的后面加一个":["103.4"],"符号":["103.4"],"propname":["103.5"],"允许添加新的任意属性":["103.5"],"编译正确":["104.1"],"declaration":["105.0"],"生成相应的":["105.0"],"sourcemap":["105.0"],"outfile":["105.0"],"将输出文件合并为一个文件":["105.0"],"outdir":["105.0"],"指定输出目录":["105.0"],"rootdir":["105.0"],"用来控制输出目录结构":["105.0"],"removecomments":["105.0"],"删除编译后的所有的注释":["105.0"],"noemit":["105.0"],"不生成输出文件":["105.0"],"importhelpers":["105.0"],"相当于":["106.1"],"定义函数别名":["106.2"],"普通错误处理":["107.4"],"代码异常处理":["107.4"],"在请求或响应被":["107.4"],"then":["107.4"],"处理前拦截它们":["107.4"],"实现请求":["108.1"],"响应拦截器功能":["108.1"],"localstorage":["108.3"],"getitem":["108.3"],"请求头携带":["108.3"],"设置请求头":["108.3"],"status":["108.4","109.4","123.14"],"case":["108.4"],"接口重定向了":["108.4"],"break":["108.4"],"参数不正确":["108.4"],"postaction":["108.6"],"sys":["108.6"],"在页面中调用":["108.6"],"总是会有所不一样":["108.7"],"十分钟封装一个好用的":["108.7"],"将本地库所有变更添加到暂存区":["109.5"],"or":["109.6"],"filename":["109.7"],"比较暂存区和":["109.7"],"的所有差异":["109.7"],"查看极简日志信息":["109.8"],"oneline":["109.8"],"查看最近":["109.8"],"branch":["109.11","109.12"],"checkout":["109.13"],"分支合并到":["109.14"],"分支":["109.14"],"discard":["109.15"],"changes":["109.15"],"working":["109.15"],"directory":["109.15"],"而不新建":["109.16"],"reference":["109.16"],"为远程仓库起别名":["109.18"],"拉取远程分支":["109.20"],"并与本地分支合并":["109.20"],"表示将本地分支推送到与之存在追踪关系的远程分支":["109.21"],"通常两者同名":["109.21"],"如果该远程分支不存在":["109.21"],"则会被新建":["109.21"],"在空白处点鼠标右键选择":["110.2"],"keygen":["110.4"],"t":["110.4"],"rsa":["110.4","110.5"],"pub文件":["110.5"],"就可以克隆ssh地址了":["110.6"],"eslint":["111.2"],"stylelint":["111.2"],"prettier":["111.2"],"来对我们的代码质量做检测和修复":["111.2"],"环境准备":["111.3"],"pnpm":["111.4"],"performant":["111.4"],"意味":["111.4"],"高性能的":["111.4"],"项目配置":["111.5"],"eslintrc":["111.6"],"cjs":["111.6"],"npx":["111.6"],"配置文件":["111.6"],"module":["111.6"],"exports":["111.6","122.7"],"运行环境":["111.6"],"运行更漂亮的eslint":["111.7"],"使prettier规则优先级更高":["111.7"],"eslint优先级低":["111.7"],"关闭规则":["111.8"],"warn":["111.8"],"打开的规则作为警告":["111.8"],"不影响代码执行":["111.8"],"规则作为一个错误":["111.8"],"代码不能执行":["111.8"],"界面报错":["111.8"],"要求使用":["111.8"],"而不是":["111.8"],"multiple":["111.8"],"empty":["111.8"],"styles":["111.9"],"目录下创建一个":["111.9"],"文件":["111.9","111.10","125.6","157.6"],"当然项目中需要用到清除默认样式":["111.9"],"因此在":["111.9"],"引入":["111.9"],"reset":["111.9"],"去创建我们需要":["111.10"],"数据与接口":["111.10"],"文件夹内部创建一个":["111.10"],"用户信息数据":["111.10"],"createuserlist":["111.10"],"userid":["111.10"],"avatar":["111.10"],"wpimg":["111.10"],"wallstcn":["111.10"],"f778738c":["111.10"],"e4f8":["111.10"],"b634":["111.10"],"56703b4acafe":["111.10"],"gif":["111.10"],"admin":["111.10"],"elmessage":["111.11"],"element":["111.11"],"plus":["111.11"],"创建axios实例":["111.11"],"loginformdata":["111.12"],"loginresponsedata":["111.12"],"userinforeponsedata":["111.12"],"项目用户相关的请求地址":["111.12"],"enum":["111.12"],"login":["111.12","123.14","126.5"],"配置对应的信息":["112.1"],"检查配置文件是否配置成功":["112.1"],"数据库的常用命令包括管理数据库和表的命令":["113.0"],"databases":["113.1"],"列出所有数据库":["113.1"],"column1":["113.1","117.5","117.6"],"向表中插入数据":["113.2"],"select":["113.2"],"提供了多种数据类型":["114.0"],"用于定义表中列":["114.0"],"int":["114.1"],"常用的整数类型":["114.1"],"个字符":["114.3"],"varchar":["114.3"],"ss":["114.4"],"datetime":["114.4"],"存储日期和时间":["114.4"],"存储枚举值":["114.5"],"从一个预定义的值列表中选择一个值":["114.5"],"tables":["115.0"],"组成":["115.0"],"每个表包含多个记录":["115.0"],"允许用户根据需要自由地修改和定制其源代码":["115.1"],"跨平台支持":["115.1"],"mysql可以在多个操作系统上运行":["115.1"],"包括windows":["115.1"],"macos和各种linux发行版":["115.1"],"服务器":["117.0"],"命令行客户端":["117.1"],"中创建一个新的数据库":["117.2"],"用于存储数据":["117.2"],"sql":["117.3","117.8"],"column2":["117.6"],"语句从表中删除数据":["117.8"],"平台":["118.0"],"并向客户端响应具体的内容":["118.2"],"req":["118.2","118.4","118.5","118.6","121.16","123.5","123.11","123.14"],"gender":["118.2"],"files":["118.3"],"list":["118.4","119.6"],"next":["118.5","118.6"],"三个参数":["118.5"],"mw2":["118.7"],"调用了第二个局部生效的中间件":["118.7"],"两种定义局部中间件的方式":["118.7"],"错误级别的中间件":["118.8"],"用来捕获整个项目中发生的异常错误":["118.8"],"从而防止项目异常崩溃的问题":["118.8"],"错误级别中间件的处理函数中":["118.8"],"必须有":["118.8"],"个形参":["118.8"],"形参顺序从前到后分别是":["118.8"],"err":["118.8"],"错误级别的中间件必须注册在所有路由之后":["118.8"],"require":["118.8","121.3","121.6","122.9","122.19","123.2"],"代码跨域获取资源":["118.11"],"浏览器的同源安全策略默认会阻止网页":["118.11"],"跨域":["118.11"],"获取资源":["118.11"],"但如果接口服务器配置了":["118.11"],"个请求头":["118.12"],"accept":["118.12","118.14"],"language":["118.12","118.14"],"dpr":["118.12"],"downlink":["118.12"],"save":["118.12","124.0"],"请求头中包含自定义头部字段":["118.15"],"向服务器发送了":["118.15"],"shell":["119.1","119.5","126.5","126.7"],"movie":["119.3"],"chunk":["119.4"],"得到数据流":["119.4"],"通过字符串得到html结构":["119.4"],"美丽人生":["119.6"],"la":["119.6"],"vita":["119.6"],"è":["119.6"],"bella":["119.6"],"p2578474613":["119.6"],"辛德勒的名单":["119.6"],"schindler":["119.6"],"p492406163":["119.6"],"星际穿越":["119.6"],"interstellar":["119.6"],"p2614988097":["119.6"],"盗梦空间":["119.6"],"inception":["119.6"],"runtime":["120.1"],"environment":["120.1"],"是一个基于":["120.1"],"的性能和效率非常高":["120.2"],"java":["120.2"],"语言是一个请求开启一个线程":["120.2"],"当请求处理完毕后就关闭这个线程":["120.2"],"时的劣势":["120.3"],"模式":["121.1"],"说明":["121.1"],"r":["121.1"],"读取文件":["121.1"],"文件不存在抛异常":["121.1"],"读取的数据":["121.3"],"如果未指定编码格式则返回一个":["121.3"],"buffer":["121.3"],"监听流的开启和关闭":["121.4"],"这几个监听不是必须的":["121.4"],"once":["121.4","121.7"],"open":["121.4"],"可读流打开了":["121.4"],"flag":["121.6"],"若是字符串则指定编码格式":["121.6"],"回调函数":["121.6"],"ws":["121.7"],"createwritestream":["121.7"],"hello3":["121.7"],"txt":["121.7"],"进制的形式显示":["121.8"],"每一个元素范围是":["121.8"],"00":["121.8"],"ff":["121.8"],"即":["121.8"],"原因":["121.9"],"代码在运行的时候":["121.9"],"会以执行":["121.9"],"命令时所处的目录":["121.9"],"截断文件":["121.10"],"truncate":["121.10"],"len":["121.10"],"truncatesync":["121.10"],"建立目录":["121.10"],"mkdir":["121.10"],"mode":["121.10"],"模块是":["121.11","121.15"],"会被忽略":["121.12"],"pathstr":["121.12"],"ext":["121.13"],"文件路径":["121.13"],"文件扩展名":["121.13"],"fpath":["121.14"],"not":["121.17"],"found":["121.17"],"判断用户请求的是否为":["121.17"],"模块是可组合":["122.2"],"分解和更换的单元":["122.2"],"提高维护性":["122.3"],"内置模块":["122.5"],"和函数作用域类似":["122.6"],"在自定义模块中定义的变量":["122.6"],"将模块内的成员共享出去":["122.7"],"变量代表当前模块":["122.8"],"导入自定义模块时":["122.11"],"若省略文件扩展名":["122.11"],"则":["122.11","122.21"],"进行加载":["122.12","122.22"],"直到":["122.12"],"文件系统的根目录":["122.12"],"假设在":["122.12","122.22"],"作为":["122.13"],"中的内置模块与自定义模块":["122.15"],"包是由第三方个人或团队开发出来的":["122.15"],"免费供所有人使用":["122.15"],"包的元整名称":["122.16"],"registry":["122.17"],"查看当前包镜像源":["122.17"],"包的入口文件":["122.18"],"readme":["122.18"],"md":["122.18"],"包的说明文档":["122.18"],"模块的代码只会被执行一次":["122.19"],"这样的路径标识符":["122.21"],"会把它当作内置模块或第三方模块进行加载":["122.21"],"直到文件系统的根目录":["122.22"],"users":["122.22"],"lemomn":["122.22"],"project":["122.22"],"并寻找":["122.23"],"属性值作为":["122.23"],"加载的入口":["122.23"],"db":["123.2"],"affectedrows":["123.3"],"插入成功":["123.3"],"向表中新增数据时":["123.3"],"如果数据对象的每个属性和数据表的字段一一对应":["123.3"],"则可以通过如下方式快速插入数据":["123.3"],"bruce":["123.3","123.5","123.14"],"调用接口":["123.6"],"优点":["123.6"],"开发体验好":["123.6"],"前端专业页面开发":["123.6"],"后端专注接口开发":["123.6"],"且需要良好的":["123.7"],"seo":["123.7"],"saveuninitalized":["123.11"],"向":["123.11"],"中存数据":["123.11"],"中间件配置成功后":["123.11"],"可通过":["123.11"],"访问":["123.11"],"存储用户信息":["123.11"],"不推荐使用":["123.13"],"认证机制":["123.13"],"工作原理图":["123.13"],"用户的信息通过":["123.13"],"token":["123.13"],"字符串的形式":["123.13"],"密钥为任意字符串":["123.14"],"secretkey":["123.14"],"登录成功":["123.14"],"sign":["123.14"],"添加开发依赖项":["124.0"],"dev":["124.0"],"移除依赖项":["124.0"],"uninstall":["124.0","125.3"],"manager":["125.0"],"一起安装的":["125.2"],"当你安装":["125.2"],"安装指定的包":["125.3"],"安装项目中":["125.3"],"文件中列出的所有依赖项":["125.3"],"脚本和其他元数据":["125.4"],"可以通过运行":["125.4"],"命令来初始化一个新的项目":["125.4"],"文件的":["125.5"],"dependencies":["125.5"],"本教程将向你展示如何发布自己的包到":["126.0"],"如果你还没有":["126.1"],"在你的项目目录中":["126.2"],"打开终端":["126.2"],"在项目目录中":["126.3"],"这个文件由":["126.4"],"按照提示提供你的用户名":["126.5"],"在你的项目中":["126.6"],"修改代码并增加新的功能或修复":["126.6"],"然后":["127.1"],"可以按照以下步骤安装":["127.1"],"运行以下命令来安装依赖项":["127.2"],"将读取项目根目录下的":["127.2"],"并下载安装所有列出的依赖项":["127.2"],"中的一个元素":["130.1"],"允许使用":["130.1"],"轴向右延伸":["130.3"],"但在大多数情况下":["130.4"],"的绘图上下文进行绘制是最基本和有效的方法":["130.4"],"文本":["130.5"],"图像":["130.5"],"矩形和其他形状等":["130.5"],"绘图元素可以通过":["130.5"],"陈述观点":["130.6"],"以及制作各种绚丽的视觉展示等":["130.6"],"您可以通过":["130.6"],"脚本使":["130.7"],"绘制出具有动态效果的图像和视觉艺术也显得非常合适":["130.7"],"html5":["130.8"],"中提供了许多优势":["130.8"],"但也存在一些限制":["130.8"],"图像旋转":["131.0"],"math":["131.1","156.3"],"pi":["131.1"],"表示放大十倍":["131.2"],"fillrect":["131.2","131.5","136.2","138.2"],"轴和":["131.3"],"轴移动的距离":["131.3"],"单位像素":["131.3"],"默认值1":["131.4"],"单位倍数":["131.4"],"水平倾斜":["131.4"],"默认值0":["131.4"],"单位弧度":["131.4"],"垂直倾斜":["131.4"],"源":["132.0"],"绘制在另一个物体":["132.0"],"目标":["132.0"],"只会显示目标图像之外源图像部分":["132.1"],"destination":["132.1"],"在源图像上方显示目标图像":["132.1"],"在源图像顶部显示目标图像":["132.1"],"源图像之外的目标图像部分不会被显示":["132.1"],"htmlcanvaselement":["133.1"],"找到画布":["133.1"],"moveto":["133.2"],"把路径移动到画布中的指定点":["133.2"],"不创建线条":["133.2"],"高度为线条宽度的一半":["134.1"],"linejoin":["134.1","141.3"],"指定线段交点的样式":["134.1"],"交点为扇形":["134.1"],"bevel":["134.1"],"交点为三角形底边":["134.1"],"miter":["134.1"],"从左到右的渐变等等":["134.2"],"该方法的返回值是一个":["134.2"],"canvasgradient":["134.2"],"该对象只有一个":["134.2"],"addcolorstop":["134.2"],"方向":["134.2"],"用来指定渐变点的颜色":["134.2"],"方法接受两个参数":["134.2"],"第一个参数是":["134.2"],"之间的一个位置量":["134.2"],"表示起点":["134.2"],"表示终点":["134.2"],"第二个参数是一个字符串":["134.2","134.3"],"blob":["134.3"],"有四个可能的值":["134.3"],"分别是":["134.3"],"repeat":["134.3"],"双向重复":["134.3"],"水平重复":["134.3"],"shadowoffsetx":["134.4"],"阴影的水平位移":["134.4"],"文字":["136.0","136.6"],"路径":["136.2"],"stroke":["136.3"],"closepath":["136.3"],"嘴巴":["136.3"],"sy":["136.5"],"swidth":["136.5"],"sheight":["136.5"],"获取图片":["136.5"],"textbaseline":["136.6"],"文本的垂直位置":["136.6"],"alphabetic":["136.6"],"大小":["136.6"],"字体":["136.6"],"100px":["136.6"],"microsoft":["136.6"],"yahei":["136.6"],"填充渲染文字":["136.6"],"控制点2":["137.2"],"again":["138.1"],"获取画笔":["138.2"],"getcontext":["138.2"],"2d":["138.2"],"fillstyle":["138.2"],"ccc":["138.2"],"restore":["139.3"],"绘制分钟的刻度":["139.3"],"canvas":["139.4","140.2","144.1","154.0"],"ref":["140.2"],"连接初圆润":["141.3"],"细线条":["141.4"],"savebtn":["141.4"],"保存签名":["141.4"],"change":["141.4"],"e":["143.1"],"0xff0000":["143.2"],"drawrect":["143.2"],"技术的快速":["144.1"],"利用":["144.3"],"webgl":["144.3","154.0"],"pixijs":["144.4","144.6"],"提供了一系列强大的功能":["144.5"],"包括精灵":["144.5"],"加载一个纹理":["144.7"],"image":["144.7","157.7"],"devicepixelratio":["145.2","146.1","148.1"],"像素比":["145.2","146.1","148.1"],"antialias":["145.2"],"抗锯齿":["145.2"],"将应用画布添加到dom中":["145.2","146.1","148.1"],"innerheight":["146.1"],"backgroundcolor":["146.1"],"0x1099bb":["146.1","148.1"],"resolution":["146.1","148.1"],"screen":["146.2","149.3"],"blur":["148.2"],"将模糊滤镜添加到精灵上":["148.2"],"sprite":["148.2"],"outlinefilter":["148.3"],"0xffff00":["148.3"],"texture":["149.2"],"pixi":["149.2"],"设置位置":["149.3"],"ticker":["149.4"],"beginfill":["150.1"],"0x66ccff":["150.1"],"0x660000":["150.2","150.5"],"参数一个数组":["150.2"],"数组中的每一个元素是一个点的坐标":["150.2"],"每两个元素是一个点的x坐标和y坐标":["150.2"],"绘制圆角矩形":["150.3"],"x坐标":["150.4"],"y坐标":["150.4"],"半径":["150.4"],"其实角度":["150.4"],"宽度":["150.5"],"颜色":["150.5"],"assets":["152.0","152.1"],"用于加载资源":["152.0"],"pic1":["152.1"],"pic":["152.1","152.2"],"rmb":["152.1","152.2"],"bdstatic":["152.1","152.2"],"05b0ea405c9e690ab51627853a13de56":["152.1","152.2"],"jpeg":["152.1","152.2"],"pic2":["152.1","152.2"],"img14":["152.1","152.2"],"360buyimg":["152.1","152.2"],"jfs":["152.2"],"t1":["152.2"],"5c1b0581e1fa6c1c3":["152.2"],"58519cee2a0039e0":["152.2"],"jpg":["152.2"],"是一个基于文本的开放网络标准":["153.1"],"用来定义用于网络的矢量图形":["153.1"],"是看不出效果的":["153.3"],"cx":["153.5","153.6"],"cy":["153.5"],"ellipse":["153.6"],"points":["153.7"],"进行渲染":["154.0"],"它是一种在":["154.0"],"浏览器中渲染":["154.0"],"提供了多种渲染器":["154.0"],"包括基本的":["154.0"],"渲染器和":["154.0"],"css3d":["154.0"],"visual":["155.3"],"orbitcontrols":["155.6"],"或者自动旋转等效果":["155.8"],"就需要加入controls":["155.8"],"scene2":["155.9"],"snippet":["155.9","155.12"],"scene":["155.12"],"cube":["156.1"],"components":["156.5"],"transform":["156.5"],"lemon":["157.0"],"建议勾选":["157.1"],"scripts":["157.2"],"docs":["157.2","157.4"],"build":["157.2"],"site":["157.3"],"文件就是我们的配置文件":["157.6"],"新建一个":["157.6"],"lastupdated":["157.7"],"hero":["157.7"],"组件库名称":["157.7"],"组件库文本":["157.7"],"tagline":["157.7"],"组件库副标题描述":["157.7"],"description":["157.9"],"themeconfig":["157.9"],"sitetitle":["157.9"],"左上角的":["157.9"],"logo":["157.9"],"关于侧边栏":["157.10"],"collapsible":["157.10"],"dist":["157.11"],"如果是发布到自定义域名":["157.11"],"echo":["157.11"],"cname":["157.11"],"git":["157.11"]},{"0":["1.3","1.4","1.5","1.7","1.10","2.6","19.2","25.8","30.2","38.3","38.4","38.6","48.3","48.5","49.14","65.12","67.22","80.3","80.8","81.15","83.4","83.5","88.4","90.31","101.6","122.18","123.2","131.3","150.1","150.2"],"1":["1.5","1.7","8.1","9.5","9.8","9.12","9.15","19.2","24.17","24.20","25.9","25.10","30.2","51.9","65.5","65.14","70.2","78.19","84.2","84.3","84.4","98.3","98.4","121.3","131.5"],"2":["5.3","8.1","8.13","9.2","9.5","9.8","9.15","19.3","24.19","24.20","25.9","25.10","25.11","26.3","26.7","26.8","37.3","49.10","51.9","67.25","68.1","80.1","84.2","84.3","84.4","108.1","109.1","109.15","109.19","114.1","121.6","126.5","126.6","149.3","154.0","156.2"],"3":["8.5","8.13","8.14","9.9","10.4","13.0","24.19","24.20","24.28","25.10","26.3","40.0","50.1","56.6","56.8","59.8","59.12","67.25","84.2","84.3","84.4","84.6","88.1","88.3","93.4","109.14","109.21","123.3","156.1"],"4":["1.14","1.16","5.3","24.15","24.19","24.23","24.28","24.29","24.30","34.4","38.1","40.0","49.10","59.8","66.10","84.2","84.3","84.4","84.6","93.3","109.7","111.7","123.14","145.2","156.3"],"5":["24.2","24.23","24.24","24.28","24.29","24.30","36.1","38.1","84.2","84.3","84.4","85.6","109.8"],"6":["6.8","36.1","39.3","59.8"],"7":["59.12"],"8":["50.2","59.12","78.19","121.3"],"10":["24.24","29.5","59.12","134.1"],"14":["48.5"],"15":["24.24"],"16":["29.2"],"20":["10.6","30.18","100.3","136.3","153.9"],"23":["6.16","45.1"],"29":["24.21","123.5"],"30":["0.2","1.6","2.2","43.8","56.12","56.16","56.19"],"32":["78.19"],"34":["6.16","29.13"],"35":["152.1"],"40":["153.7"],"42":["50.2","98.7"],"45":["156.5"],"50":["136.6","153.3"],"59":["45.1"],"70":["131.1","153.7"],"80":["18.4","153.7"],"95":["153.5"],"100":["131.2","136.6","137.1","150.2","153.6","153.8"],"120":["153.8"],"123":["49.14","90.4","98.1","103.7"],"127":["123.2"],"147":["114.1"],"150":["143.2"],"180":["131.1"],"200":["134.2","136.6","153.4"],"250":["136.3"],"255":["121.8"],"300":["153.9"],"308":["50.2"],"324":["50.1"],"345":["50.2"],"360":["49.13"],"403":["108.4"],"404":["108.4"],"420":["73.11"],"483":["114.1"],"647":["114.1"],"648":["114.1"],"1000":["88.5"],"1970":["48.1"],"2023":["45.1"],"2224":["152.1"],"5000":["111.11"],"12087":["152.1"],"23739":["152.1"],"111111":["111.10"],"11111111":["121.8"],"中一种强大的数据结构":["0.1"],"对每个键值对执行回调函数":["0.2"],"js":["0.2","3.2","8.4","20.2","20.3","29.5","30.5","30.10","35.1","37.5","48.2","49.5","49.6","49.8","49.9","49.11","49.12","56.4","59.4","59.10","59.12","59.14","87.2","107.4","121.11","121.15","122.11","122.22","125.1","131.3","134.4","155.9","155.12"],"const":["0.2","3.4","4.13","25.9","35.1","50.2","51.8","54.2","56.9","56.17","57.1","59.12","78.2","78.6","78.8","78.22","81.5","84.2","84.3","84.4","84.5","85.2","85.3","85.4","85.5","87.9","90.4","90.31","98.13","99.10","101.5","108.2","118.10"],"mymap":["0.2","0.4"],"new":["0.2","0.4","2.6","8.12","42.2","48.4","54.2","118.8","136.5","139.3","146.2","155.7"],"添加键值对":["0.2"],"name":["0.2","2.3","4.9","4.11","4.14","10.9","42.3","42.9","56.2","56.4","56.18","57.1","79.23","81.5","90.6","90.17","90.20","99.9","117.4","117.6","127.2","141.4"],"john":["0.2","4.14","34.3","42.2","42.3","57.1"],"age":["0.2","2.1","2.3","4.22","31.3","56.4","56.12","56.16","56.19","81.5","81.8","81.11","99.11","103.1","103.2"],"获取值":["0.2"],"console":["0.2","2.4","6.9","8.8","8.9","8.15","10.2","20.9","24.26","26.8","28.5","30.3","30.5","30.7","30.18","34.3","41.5","42.3","42.7","42.8","42.9","44.2","44.3","46.6","47.6","50.2","53.2","54.1","56.20","98.11","100.4","101.6","108.6","111.8","121.7","121.12","152.2"],"log":["0.2","4.14","6.9","8.9","8.11","8.15","10.2","20.6","20.9","24.26","26.8","27.1","28.5","30.3","30.7","30.14","30.18","34.1","41.5","42.7","42.8","42.9","44.2","44.3","44.4","46.6","47.6","50.2","53.2","54.1","56.20","59.11","100.4","101.6","103.7","118.6","121.7","121.12","143.1","152.2"],"mymap2":["0.5"],"dos":["0.6"],"合并两个":["0.6"],"对象时":["0.6"],"中的元素只会":["1.1"],"可以连写":["1.3"],"add":["1.5","1.6","1.10","109.18","118.4","127.2"],"forty":["1.8"],"two":["1.8"],"方法相同":["1.9"],"myarray":["1.12"],"filter":["1.15","88.6"],"x":["1.15","5.12","8.13","93.4","118.12","136.6","141.3"],"has":["1.15","74.6"],"this":["2.1","3.4","4.9","5.18","9.17","36.4","36.5","42.7","42.9","74.5","74.6","80.4","80.8","80.11","81.5","81.7","81.8","81.9","85.2","85.4","85.5","86.9","98.14"],"person2":["2.2"],"major":["2.3"],"super":["2.3","80.4","83.3","83.5","83.6","85.4","99.6"],"sayhello":["2.4","4.12","53.2","54.1"],"multiply":["2.5"],"if":["2.6","32.8","35.2","37.2","37.7","38.2","43.5","79.14","80.11","85.1","121.3","121.17","133.1"],"throw":["2.6","118.8"],"error":["2.6","41.3","41.4","98.5","99.8","118.8"],"半径不能是负的":["2.6"],"入门":["3.1"],"的基础":["3.2"],"并且也被其他编程语言":["3.2"],"如":["3.2","5.10","37.0","51.11","79.14","89.1","92.14"],"的语言标准":["3.3"],"还在此基础上新增了一些拓展":["3.3"],"使得我们可以在浏览器可以操作":["3.3"],"dom":["3.3","153.1"],"bom":["3.3"],"在":["3.3","32.5","42.1","77.1","79.8","88.3","95.3"],"let":["3.4","6.12","6.19","25.2","25.10","29.5","30.5","30.9","30.10","38.6","90.6","90.8","90.19","91.2","98.8","101.6","136.5"],"和":["3.4","29.6","48.4","52.6","76.2","88.2","93.5","98.8"],"关键字":["3.4","65.12","67.16","99.0"],"提供块级作用域":["3.4"],"支持箭头函数":["3.4"],"简化函数定义和":["3.4"],"的处理":["3.4"],"新增模板字符串":["3.4"],"支持多行字符串和插入表达式":["3.4"],"引入了解构赋值":["3.4"],"可以方便地从数组或对象中提取值":["3.4"],"提供了类和模块化的支持":["3.4"],"更接近传统面向对象编程":["3.4"],"添加了":["3.4"],"promise":["3.4"],"用于更好地处理异步操作":["3.4"],"for":["3.4","26.0"],"of":["3.4","9.13","9.14"],"循环":["3.4"],"用于遍历可迭代对象":["3.4"],"引入":["3.4"],"symbol":["3.4"],"类型":["3.4","98.8"],"用于创建唯一的对象属性名":["3.4"],"代码组织方式会变得不够优雅和高效":["4.1"],"代码量庞大":["4.2"],"文件众多":["4.2"],"从而避免了命名冲突的问题":["4.3"],"开发者可以更容易地理解每个模块的功能":["4.4"],"只需要导入相应的模块":["4.5"],"export":["4.6","82.10","88.3"],"module1":["4.7","4.13","4.23"],"constructor":["4.9","83.5","83.6","99.7"],"我们可以将其他模块中的变量":["4.10"],"输出":["4.14","5.16","5.17","36.1","42.2","44.1","44.2","44.3","44.4","46.6","47.6","50.2"],"main":["4.16","4.19","4.22","88.3"],"hello":["4.17","6.14","7.4","7.5","27.1","51.8","53.2","54.1","54.2","56.7","78.2","81.7","118.7","121.6"],"my":["4.18","7.4","7.5","53.2","86.4","86.17","91.8"],"is":["4.18","5.17","7.2","7.5","42.6","42.8","81.9","92.15","98.14","121.16"],"import":["4.19","4.21","4.23","81.14","111.9"],"myname":["4.19"],"避免命名冲突或提高代码可读性":["4.20"],"as":["4.22"],"then":["4.23","41.5","108.6","152.1"],"需要注意以下几点":["4.24"],"strict":["4.27","105.0"],"每个模块都有自己的作用域":["4.28"],"并且可以与其他模块进行交互":["4.28"],"模块化的意义在于避免命名冲突":["4.28"],"就用默认值":["5.2"],"只有这两种情况下":["5.4"],"默认值才会生效":["5.4"],"上面代码指定":["5.5"],"如果没有提供参数":["5.5"],"函数":["5.5","59.8"],"的参数默认为一个空对象":["5.5"],"下面是另一个解构赋值默认值的例子":["5.5"],"fetch":["5.5"],"url":["5.5","13.0","32.8","51.11"],"body":["5.5","67.23","67.24","123.11","146.1"],"z":["5.6","5.12"],"报错":["5.7","98.12"],"因为这样相当于传了一个":["5.7"],"undefined":["5.7"],"不符合解构赋值":["5.7"],"函数默认值":["5.7"],"解构赋值":["5.7"],"解构赋值默认值":["5.7"],"看起来和展开语法完全相同都是使用":["5.9"],"的语法糖":["5.9"],"属性表示的是实参的长度":["5.10"],"即调用函数的时候传入的参数个数":["5.10"],"这样我们就对":["5.10"],"对象有了一定的了解":["5.10"],"image":["5.10"],"20220826180356855":["5.10"],"的开发模式下":["5.10"],"想要使用传递的参数":["5.10"],"则需要按位置把对应的参数取出来":["5.10"],"尽管":["5.10"],"是一个类数组且可遍历的变量":["5.10"],"但它终究不是数组":["5.10"],"它不支持数组方法":["5.10"],"因此我们不能调用":["5.10"],"foreeach":["5.10"],"等数组的方法":["5.10"],"需要使用一些特殊的方法转换成数组使用":["5.10"],"arguments":["5.11"],"获取实际参数":["5.11"],"剩余参数是一个":["5.11"],"与对象解构赋值结合":["5.12"],"y":["5.12","134.3","136.6","141.3","149.3","150.3","153.4"],"会引入剩余参数的概念":["5.13"],"可以看到剩余参数所带来的好处":["5.13"],"箭头函数通常与其他":["5.14"],"函数体在箭头后面的花括号内":["5.15"],"如果函数体只有一行代码并且返回一个表达式":["5.15"],"可以省略花括号和":["5.15"],"多个参数":["5.16"],"因为箭头函数会继承外层作用域的":["5.18"],"可能导致":["5.18"],"或":["5.19","82.8"],"后面加一个逗号":["5.19"],"就会报错":["5.19"],"如果像上面这样":["5.19"],"将参数写成多行":["5.19"],"err":["5.20"],"处理错误":["5.20"],"上面代码中":["5.20","28.2","131.2"],"改":["6.1","24.5"],"除了常用":["6.2"],"world":["6.3","6.6","28.2","51.8"],"trimleft":["6.5"],"trimmedstringvalue":["6.6"],"stringvalue":["6.7","6.12"],"na":["6.7"],"abcde":["6.11"],"true":["6.13","8.21","32.8","56.15","98.7","111.6","138.2","141.3"],"str":["6.14","51.8","121.16"],"match":["6.17","74.6"],"bat":["6.18"],"sat":["6.18","6.20"],"fat":["6.18","6.20"],"text":["6.19","21.2","118.12","136.6"],"cat":["6.19","53.3"],"也被称为模板字面量":["7.1"],"and":["7.2","7.3","7.5","121.16"],"i":["7.2","38.3","38.4","38.6","51.3","53.1","54.1","54.2","122.16"],"multiple":["7.3"],"lines":["7.3","111.8"],"maintains":["7.3"],"the":["7.3"],"object":["8.1","8.4","8.12","35.2","42.4","72.2"],"除了属性简写":["8.1"],"sex2":["8.4"],"注意":["8.4","28.13","65.5","98.3","157.9"],"属性名表达式如果是一个对象":["8.4"],"默认情况下会自动将对象转为字符串":["8.4"],"这一点要特别小心":["8.4"],"合法标识符":["8.5"],"能用点语法优先使用点语法":["8.5"],"function":["8.6","20.2","20.7","20.9","26.11","32.9","35.2","37.5","42.7","43.7","56.4","58.0","78.22","90.31","107.4","121.3","121.6","121.7","138.2","141.3","144.7"],"上面三种":["8.6"],"的用法都会报错":["8.6"],"因为对于":["8.6"],"javascript":["8.6","29.1","46.2","46.3","47.2","47.3","50.2","51.4","78.13","79.0","84.1","86.1","87.8","144.1"],"引擎来说":["8.6"],"taste":["8.8"],"甜":["8.8"],"新对象拥有全部属性":["8.9"],"相同属性":["8.9"],"后者覆盖前者":["8.9"],"e":["8.13","10.2","10.3","20.9","121.12"],"use":["8.15","93.4","107.4","117.3"],"写字":["8.15"],"c":["8.17","9.11","10.3","10.4","27.0","56.6","110.4","121.12","121.14"],"jerry":["8.18"],"算法":["8.20"],"用来解决这个问题":["8.20"],"就是部署这个算法的新方法":["8.20"],"它用来比较两个值是否严格相等":["8.20"],"与严格比较运算符":["8.20"],"的行为基本一致":["8.20"],"直接合并到了第一个参数中":["8.21"],"返回的就是合并后的对象":["8.21"],"可以合并多个对象":["8.21"],"第一个参数使用一个空对象来实现合并返回一个新对象的目的":["8.21"],"array":["8.22","101.3"],"iterator":["8.22"],"数组的":["8.22"],"属性名无法转换为数值":["9.3"],"返回长度为":["9.3"],"key0":["9.4"],"value0":["9.4"],"abc":["9.6","98.12","99.7"],"参数1":["9.9","9.15"],"用来填充的值":["9.10"],"参数2":["9.10","9.17"],"被填充的起始索引":["9.10"],"参数3":["9.10"],"a":["9.11","9.13","9.14","10.3","10.5","25.9","65.8","98.14","99.9","103.5","103.6","109.6","119.6","121.14","122.22","157.1"],"b":["9.11","10.4","10.5","25.9","29.5","121.12","121.14"],"d":["9.11","121.12"],"不使用":["9.12"],"包含的指定值":["9.15"],"原数组":["9.17"],"指定遍历函数中":["9.17"],"我们可以从数组或对象中提取数据":["10.0"],"并将其赋值给对应的变量":["10.0"],"rest":["10.5"],"country":["10.10"],"unknown":["10.10"],"对象代表当前窗口或标签页中加载的文档":["11.0"],"createelement":["11.1"],"tagname":["11.1","21.1"],"并将其添加到文档中":["11.2"],"newparagraph":["11.2"],"对象提供了对浏览器历史记录的操作":["12.0"],"导航到下一个页面":["12.1","12.2"],"如获取或修改元素":["13.0"],"创建新的元素或节点":["13.0"],"修改文档结构等":["13.0"],"location":["13.0"],"它提供了与当前窗口的":["13.0"],"相关的信息和操作":["13.0","14.0"],"它包含了":["13.0"],"的主机名部分":["14.1"],"pathname":["14.1"],"protocol":["14.2"],"对象提供了关于浏览器的信息":["15.0"],"appname":["15.1","15.2"],"浏览器的名称":["15.1"],"对象提供了关于用户屏幕的信息":["16.0"],"availwidth":["16.1"],"屏幕的可用宽度":["16.1"],"获取屏幕的可用宽度":["16.2"],"关闭当前窗口":["17.1","17.2"],"resizeto":["17.1"],"blank":["17.2"],"在现有":["18.1"],"结构基础上插入新的元素节点":["18.1"],"hr":["18.1"],"普通盒子":["18.1"],"div":["18.1","65.14","67.23","67.24","76.2","76.3","76.5","78.6","78.8","86.16","91.4","138.1"],"class":["18.1","67.23","67.24","78.11","78.20","80.9","81.14","83.6","93.4","99.0","99.9"],"box":["18.1","70.2","90.30"],"点击按钮向":["18.1"],"点击按钮删除节点":["18.2"],"button":["18.2","83.7","90.7","90.10","90.13","91.8"],"要么是兄弟关系":["18.3"],"序号":["18.4"],"课程名":["18.4"],"难度":["18.4"],"操作":["18.4"],"ul":["18.5","78.17","82.11","82.13"],"li":["18.5","65.7","81.10","82.11","82.13"],"文档解析为":["19.1"],"树":["19.1"],"并提供了一组":["19.1"],"initial":["19.2","67.22","79.23"],"scale":["19.2","67.22","79.23"],"title":["19.2","67.22","92.6"],"标题":["19.2"],"等都属于元素节点":["19.3"],"是指":["19.3"],"标签中的属性":["19.3"],"html":["19.4","78.1","86.6","86.14","87.4","92.10","121.17","157.6"],"tip":["19.4","25.1","25.3","65.5","114.5"],"中常用的一项功能":["20.0"],"例如":["20.1","68.1","130.8"],"用户使用":["20.1"],"方法来添加事件监听器":["20.2"],"eventhandler":["20.2"],"element":["20.2","25.10","78.2","78.6","78.8"],"eventname":["20.2"],"不同的是":["20.5"],"不会在子元素上触发":["20.5"],"mouseleave":["20.5"],"键盘按下了":["20.6"],"focus":["20.7"],"keydown":["20.8"],"当用户按下键盘上的任意键时触发":["20.8"],"可以使用该事件来监测实时的键盘输入":["20.8"],"并进行相应处理":["20.8"],"keyup":["20.8"],"click":["20.9","86.13","90.5","90.7","90.10","90.13","90.14"],"inner":["20.10","44.2","44.3"],"child":["20.10","92.9","92.11","99.11"],"表单事件":["20.11"],"submit":["20.11"],"input":["20.11"],"或者根据目标元素的特定属性或位置来执行相应操作":["20.12"],"通过事件委托":["20.12"],"你只需要在父元素上绑定一个事件监听器":["20.12"],"无论子元素的数量如何变化":["20.12"],"只要满足选择器条件的子元素触发了事件":["20.12"],"都可以被捕获和处理":["20.12"],"这样可以避免为每个子元素分别绑定事件监听器":["20.12"],"从而减少内存占用和提高性能":["20.12"],"将一个节点添加为另一个节点的子节点":["21.0"],"removechild":["21.0"],"属性":["21.2","28.12","77.1"],"insertbefore":["21.3"],"可以使用":["22.0","67.30","78.13","85.6"],"font":["22.1"],"size":["22.1","65.14"],"等":["22.1","74.3"],"而":["22.1","42.13","98.9"],"如果元素已经具有指定的类名":["22.2"],"则移除它":["22.2"],"如果元素没有指定的类名":["22.2"],"getelementsbytagname":["23.0"],"根据标签名获取元素节点集合":["23.0"],"queryselector":["23.0"],"elements":["23.1"],"classname":["23.1"],"内容":["23.2"],"innerhtml":["23.2"],"如果有多个数据可以用数组保存起来":["24.0"],"var":["24.1","45.2","59.4","134.2"],"arr":["24.1","25.10","40.1"],"unshift":["24.6"],"创建一个数组":["24.7","24.8"],"count":["24.7","80.3","80.4","80.8","83.3","83.4","83.5","88.4"],"removed":["24.9","24.14","24.17"],"yellow":["24.10","135.0"],"black":["24.10"],"shift":["24.11","27.7"],"green":["24.12","24.13"],"item":["24.12","24.13","81.10","86.12"],"colors3":["24.15"],"includes":["24.18"],"nicholas":["24.21"],"sort":["24.22"],"blue":["24.26"],"some":["24.27"],"mapresult":["24.32"],"可以省略":["25.1"],"false":["25.1","28.10","29.11","38.0","85.2","85.3","85.4","85.5","138.2","141.3","157.10"],"哈哈哈":["25.1"],"为止":["25.2"],"如果所有的条件表达式都是":["25.2"],"则执行":["25.2"],"从键盘输入小明的期末成绩":["25.2"],"score":["25.2"],"prompt":["25.2"],"请输入小明的期末成绩":["25.2"],"检查score是否合法":["25.2"],"default":["25.3","82.10","88.3","92.13"],"执行的流程":["25.3"],"do":["25.4"],"执行流程":["25.5"],"语句在执行时":["25.5","25.6"],"执行顺序":["25.6"],"obj":["25.9","28.9","59.4"],"循环适用于迭代对象的值":["25.11"],"迭代对象的类型不同":["25.11"],"循环适用于遍历对象":["25.11"],"包括普通对象":["25.11"],"内层循环":["25.12"],"虽然":["26.0"],"函数名":["26.2"],"函数体代码":["26.2"],"全部小写":["26.3"],"函数是做某件事情":["26.3"],"函数名一般是动词":["26.3"],"形参2":["26.6"],"在声明函数的小括号里面是":["26.6"],"形式上的参数":["26.6"],"实参1":["26.6"],"如果实参的个数多于形参的个数":["26.7"],"会取到形参的个数":["26.7"],"后面的代码不会被执行":["26.8"],"alert":["26.8"],"我是不会被执行的哦":["26.8"],"fn":["26.8"],"跳出本次循环":["26.9"],"无法直接使用":["26.10"],"xxxx":["26.12","32.9","110.4"],"的语法类似于":["27.0"],"语言":["27.0"],"代码":["27.2","39.2"],"head":["27.3","109.15"],"meta":["27.3","111.11"],"charset":["27.3"],"utf":["27.3","121.3"],"标签的":["27.4"],"src":["27.4","73.11","75.4","86.7","136.5"],"ctrl":["27.6"],"大括号就定义了一个对象":["28.2"],"它被赋值给变量":["28.2"],"所以变量":["28.2"],"1p":["28.3"],"不报错":["28.3"],"h":["28.3"],"w":["28.3","121.1"],"p":["28.3","81.7","81.8","85.3","92.9","98.13"],"q":["28.3"],"上面对象的三个键名":["28.3"],"都不符合标识名的条件":["28.3"],"所以必须加上引号":["28.3"],"对象的每一个键名又称为":["28.3"],"如果取消某一个变量对于原对象的引用":["28.4"],"不会影响到另一个变量":["28.4"],"无法确定是对象还是代码块":["28.5"],"一律解释为代码块":["28.5"],"上面的语句是一个代码块":["28.5"],"而且只有解释为代码块":["28.5"],"的":["28.7","29.9","92.17","120.1"],"属性时":["28.7"],"如果使用点运算符":["28.7"],"就是字符串":["28.7"],"但是不使用引号":["28.7"],"那么":["28.7"],"就是一个变量":["28.7"],"指向字符串":["28.7"],"方括号运算符内部还可以使用表达式":["28.7"],"分别使用点运算符和方括号运算符":["28.8"],"对属性赋值":["28.8"],"允许属性的":["28.8"],"key1":["28.9"],"并没有":["28.10"],"但是":["28.10","28.12"],"命令照样返回":["28.10"],"因此":["28.10"],"不能根据":["28.10"],"命令的结果":["28.10"],"认定某个属性是存在的":["28.10"],"只有一种情况":["28.10"],"命令会返回":["28.10"],"那就是该属性存在":["28.10"],"且不得删除":["28.10"],"tostring":["28.11","28.12","104.1"],"运算符的一个问题是":["28.11"],"它不能识别哪些属性是对象自身的":["28.11"],"还遍历继承的属性":["28.12"],"举例来说":["28.12"],"对象都继承了":["28.12"],"循环不会遍历到这个属性":["28.12"],"属性是存在的":["28.12"],"如果":["28.13"],"区块内部有变量的赋值操作":["28.13"],"必须是当前对象已经存在的属性":["28.13"],"否则会创造一个当前作用域的全局变量":["28.13"],"幂运算":["29.2"],"模运算":["29.2"],"取余数":["29.2"],"等价于":["29.3"],"减等于":["29.3"],"新值":["29.5"],"的值不同":["29.6"],"是新值":["29.6"],"大于等于号":["29.7"],"如果找到":["29.9","29.10"],"则直接返回":["29.9","29.10"],"或运算是找":["29.10"],"条件运算符在执行时":["29.12"],"会先对条件表达式进行求值判断":["29.12"],"圆括号":["29.13"],"可以用来提高运算的优先级":["29.13"],"因为它的优先级是最高的":["29.13"],"number":["30.1","84.5","90.4","98.4","98.14","99.11"],"floatnum1":["30.2"],"floatnum2":["30.2"],"message":["30.3","89.1","90.6","90.18","90.19","90.20","92.10","98.10"],"jacob":["30.4"],"car":["30.5"],"的值":["30.6"],"othergenericsymbol":["30.7"],"我们这里主要讲述下面三种":["30.8"],"person":["30.9","34.3","56.4","57.1","103.5"],"num2":["30.11"],"return":["30.11","34.1","35.2","37.2","38.5","43.7","78.14","78.17","78.21","84.4","85.3","90.0","99.1","100.2","100.4","100.5","101.2","101.3","101.4"],"函数表达式":["30.11"],"regexp":["30.12"],"typeof":["30.14","35.2"],"对象":["30.16","154.0"],"对象会转换为":["30.16"],"所有表示空性的没有的错误的值都会转换为":["30.16"],"引用类型的对象存储于堆中":["30.17"],"在栈中存放的是指向堆内存的地址":["30.20"],"不同的类型数据导致赋值变量时的不同":["30.20"],"全局变量":["31.1"],"在严格模式下":["31.1"],"如果像这样给未声明的变量赋值":["31.1"],"则会导致抛出referenceerror":["31.1"],"定义多个变量":["31.1"],"syntaxerror":["31.2"],"标识符age":["31.2"],"已经声明过了":["31.2"],"块作用域没有重复声明则使用相同标识符则不会报错":["31.2"],"zhangsan":["31.3"],"是块级作用域":["31.5"],"所以检查不到之前是否声明过":["31.5"],"没有定义":["31.6"],"常见的异步循环问题":["31.6"],"settimeout":["31.6","39.2","88.5"],"typeerror":["31.7"],"给常量赋值":["31.7"],"也不允许重复声明":["31.7"],"与":["31.8","46.0","47.0","67.10","88.3","105.0"],"都存在变量提升":["31.8"],"但":["31.8"],"是一种创建交互式网页应用的网页开发技术":["32.1"],"可以在不重新加载整个网页的情况下":["32.1"],"对象的":["32.2"],"open":["32.2","32.8","121.7"],"方法与服务端建立连接":["32.2"],"构造函数用于初始化一个":["32.3"],"password":["32.4","41.5","111.10"],"参数说明":["32.4"],"表示当前的请求方式":["32.4"],"请求中要发送的数据体":["32.5"],"响应体下载中":["32.6"],"responsetext":["32.6"],"已经获取部分数据":["32.6"],"done":["32.6"],"请求完成":["32.6"],"整个请求过程已完毕":["32.6"],"只要":["32.6"],"属性值一变化":["32.6"],"就会触发一次":["32.6"],"readystatechange":["32.6"],"success":["32.9"],"core":["33.1"],"中一种强大且常用的特性":["34.0"],"它允许内部函数访问其外部函数的作用域":["34.0"],"incrementcounter":["34.2"],"可以实现模块化的代码结构":["34.4"],"将相关的功能和状态封装在闭包中":["34.4"],"提供公共接口给外部":["34.4"],"从而实现代码的隔离和组织":["34.4"],"保存状态":["34.4"],"闭包可以用于保存函数的状态":["34.4"],"闭包中的变量是共享的":["34.5"],"如果多个闭包引用相同的外部变量":["34.5"],"那么它们会共享相同的变量实例":["34.5"],"方法":["35.1","91.5"],"shallowcopy":["35.1"],"会丢失或报错":["35.2"],"使用递归函数":["35.2"],"deepclone":["35.2"],"null":["35.2","46.2","47.2","98.8","105.0","134.3"],"take":["36.1"],"部分应用函数":["36.2"],"柯里化可以部分应用函数":["36.2"],"即预先设置函数的一部分参数":["36.2"],"然后返回一个接收剩余参数的新函数":["36.2"],"这使得函数的调用更加灵活和可定制":["36.2"],"需要注意的是":["36.2"],"下面是几种常见的实现方式":["36.3"],"else":["36.4","85.1","100.5","107.5"],"nextargs":["36.4","36.6"],"apply":["36.5"],"本质上是优化高频率执行代码的一种手段":["37.0"],"浏览器的":["37.0"],"resize":["37.0"],"scroll":["37.1","37.4"],"timer":["37.2","37.3"],"args":["37.2"],"可以将时间戳写法的特性与定时器写法的特性相结合":["37.3"],"实现一个更加精确的节流":["37.3"],"实现如下":["37.3"],"throttled":["37.3"],"debounce":["37.5"],"func":["37.5"],"cleartimeout":["37.6"],"不为null":["37.6"],"没有立马执行但是需要被执行的任务":["39.1"],"放在任务队列里面":["39.1"],"在主线程执行过程中同步任务会立即执行":["39.1"],"宏任务":["39.2"],"整个":["39.2"],"script":["39.2","91.5","124.0"],"setinterval":["39.2"],"没有":["39.3"],"执行以一个宏任务":["39.3"],"重复循环上述步骤形成一个事件循环":["39.3"],"可以看出各任务的执行先后关系":["39.3"],"同步任务":["39.3"],"微任务":["39.3"],"replace":["40.2"],"g":["40.2","51.3"],"split":["40.2","99.10"],"pre":["40.3","43.5","43.7","90.24"],"cur":["40.3","43.5"],"length":["40.4"],"rejected":["41.0"],"已失败":["41.0"],"当":["41.0","83.1"],"对象的状态从":["41.0"],"异步操作":["41.1","88.3"],"在操作成功时调用":["41.1"],"value":["41.1","41.2","50.2","56.13","78.5","78.18","78.21","90.28","99.10"],"处理第二个操作成功的结果":["41.3"],"yetanotherpromise":["41.3"],"catch":["41.3","41.5"],"处理任意一个":["41.4"],"实例失败的结果":["41.4"],"在上述示例中":["41.4"],"接收一个":["41.4"],"example":["41.5","76.5"],"https":["41.5","73.11","75.3","148.1","157.11"],"api":["41.5","90.1","91.6","108.1","111.11","119.2","123.11","130.4","130.5","130.7"],"com":["41.5","73.10","73.11"],"login":["41.5","123.11"],"post":["41.5","108.3","118.4","123.11"],"response":["41.5"],"这个原型对象可以被其他对象继承":["42.1"],"从而实现属性和方法的共享":["42.1"],"create":["42.4","57.2","111.11","113.3","117.2"],"让我们一一了解这些方式":["42.5"],"eating":["42.6","42.8"],"dog":["42.6","53.1","119.6"],"的原型继承是动态的":["42.11"],"中的继承是通过原型链来实现的":["42.12"],"但最好不要这样做":["42.15"],"可以节省内存":["42.16"],"它会覆盖父对象上的属性或方法":["42.17"],"来创建对象":["42.18"],"数组的一个高阶函数":["43.0"],"它用于对数组中的元素进行累积操作":["43.0"],"它接受四个参数":["43.1"],"前一个值":["43.1"],"prev":["43.1"],"设置初始值":["43.3"],"reduce":["43.5","43.6","43.7"],"newarr":["43.6"],"english":["43.8"],"方法不会修改原始数组":["43.9"],"它始终返回一个新的累积结果":["43.9"],"如果需要对原始数组进行修改":["43.9"],"请使用其他数组方法":["43.9"],"中有两种主要的作用域类型":["44.0"],"innervariable":["44.3"],"然后浏览器会将":["45.0"],"gmt":["45.1"],"path":["45.1","82.15","87.7","87.10","144.7"],"cookies":["45.2"],"thu":["45.3"],"01":["45.3"],"jan":["45.3"],"stringify":["45.4"],"方法将其转换为字符串存储":["45.4"],"然后在需要时使用":["45.4"],"parse":["45.4"],"方法将其还原":["45.4"],"每个域名和浏览器对":["45.4"],"允许开发者在浏览器中存储和检索持久化的键值对数据":["46.0"],"是要存储的数据的键":["46.1","47.1"],"返回":["46.2","47.2","50.2"],"方法来删除指定键的数据":["46.4","47.4"],"getitem":["46.6","47.6"],"允许开发者在浏览器中存储和检索会话级别的键值对数据":["47.0"],"十二月":["48.1"],"getseconds":["48.1"],"获取秒数":["48.1"],"gettime":["48.1","48.4"],"获取日期的时间戳":["48.1"],"返回值为从":["48.1"],"年":["48.1"],"月":["48.1"],"有四种方式初始化日期":["48.2"],"setfullyear":["48.3"],"date":["48.4","139.3"],"now":["48.4"],"可以对数字进行计算":["49.0"],"用于":["49.0"],"圆周率":["49.1"],"返回一个数的绝对值":["49.3"],"从":["49.4","65.12","105.0"],"往上不包括":["49.4"],"四舍五入原则":["49.7"],"找出最小值":["49.8"],"找出最大值":["49.9"],"返回的是一个数的平方根":["49.11"],"positive":["50.1"],"infinity":["50.1","98.2"],"表示正无穷大":["50.1"],"当一个数超过了":["50.1"],"valueof":["50.2"],"对象的原始数值":["50.2"],"示例代码":["50.2"],"max":["50.2","111.8"],"7976931348623157e":["50.2"],"可以使用正则表达式执行以下操作":["51.1"],"匹配":["51.1"],"matching":["51.1"],"正则表达式可以使用字面量形式或构造函数形式来创建":["51.2"],"模式字符串和可选的修饰符字符串":["51.4"],"匹配前面的元素一次或多次":["51.5"],"不区分大小写匹配":["51.6"],"m":["51.6","99.2","157.11"],"匹配空格字符":["51.7"],"s":["51.7","51.10","157.0"],"匹配非空格字符":["51.7"],"返回匹配结果的数组或":["51.8"],"使用名称访问捕获的子串":["51.9"],"来匹配字符串的开始和结束":["51.10"],"允许点号":["51.10"],"匹配任意字符":["51.10"],"包括换行符":["51.10"],"数据提取":["51.11"],"使用正则表达式从文本中提取特定的信息":["51.11"],"的内置对象为开发者提供了丰富的功能和方法":["52.0"],"能够简化开发过程并处理各种数据和操作":["52.0"],"数值对象":["52.1"],"boolean":["52.1"],"布尔对象":["52.1"],"其他对象都继承自它":["52.2"],"删除":["52.3"],"如拼接":["52.4"],"转换为字符串":["52.5"],"设置时间":["52.7"],"如求绝对值":["52.8"],"分割":["52.9"],"替换等复杂的文本处理任务":["52.9"],"除了上述常用的内置对象外":["52.9"],"am":["53.1","54.1","54.2"],"子类":["53.1","55.2"],"breed":["53.1"],"call":["53.1"],"meow":["53.3"],"之后":["54.0"],"引入了":["54.0"],"创建类的实例":["54.2"],"person1":["54.2","101.5"],"每个对象都有自己的状态和行为":["55.1"],"继承是一种对象之间共享属性和方法的机制":["55.2"],"通过继承":["55.2"],"一个类":["55.2"],"可以继承另一个类":["55.2"],"父类":["55.2"],"张三":["56.2"],"调用对象的属性":["56.3"],"我们采取":["56.3"],"对象名":["56.3"],"属性名":["56.3"],"我们理解为":["56.3"],"uname":["56.4"],"sex":["56.4"],"prop":["56.5"],"返回指定对象上一个自有属性对应的属性描述符":["56.5"],"getownpropertynames":["56.5"],"返回一个给定对象自身的所有属性的名称数组":["56.5"],"getownpropertysymbols":["56.5"],"obj3":["56.6"],"jane":["56.10"],"修改无效":["56.10"],"newobj":["56.14"],"删除属性无效":["56.18"],"用于实现继承和共享属性和方法":["57.0"],"直到找到为止":["57.1"],"示例":["57.1","155.9","155.12"],"friend":["57.2"],"的原型是":["57.2"],"继承":["57.3"],"通过原型链":["57.3"],"等方法来设置对象的原型":["57.4"],"而不是直接修改":["57.4"],"现在这里的代码会在严格模式下运行":["58.0"],"启用单个函数的严格模式":["58.0"],"如果你只想在特定函数内启用严格模式":["58.0"],"可以在函数体的开头添加":["58.0"],"会创建一个执行期上下文的内部对象":["59.1"],"以方法的形式调用":["59.3"],"this是调用方法的对象":["59.3"],"绑定到什么":["59.4"],"方法的另一个应用":["59.7"],"可以实现继承":["59.7"],"之所以能实现继承":["59.7"],"其实是利用了上面的作用":["59.7"],"先将":["59.8"],"然后执行":["59.8"],"需要传递":["59.10"],"数组":["59.10","104.0"],"所以它有一些巧妙应用":["59.10"],"稍后看接下来的应用举例就知道了":["59.10"],"语法":["59.10","59.14"],"求数组中多个元素的最大值":["59.12"],"arr1":["59.12"],"下面这一行代码的目的":["59.12"],"无需改变":["59.12"],"是最为合适的":["59.14"],"新函数":["59.14"],"fn1":["59.14"],"想要将this指向哪里":["59.14"],"函数实参1":["59.14"],"img":["60.0","136.5"],"padding":["65.1"],"不能涉及差异化样式":["65.2"],"color":["65.3","141.4"],"css":["65.4","66.0","66.1","66.5","66.6","66.7","67.3","67.9","69.1","134.2","153.1"],"orange":["65.5"],"选择器3":["65.6"],"选择器":["65.6","68.0"],"good":["65.9"],"hover":["65.11"],"光标经过链接的样式":["65.11"],"的第":["65.12"],"个":["65.12"],"可以是数字":["65.12"],"even":["65.12"],"odd":["65.12"],"公式":["65.12"],"开始":["65.12"],"伪元素清除浮动":["65.14"],"额外标签法":["65.14"],"隔墙法":["65.14"],"在浮动元素后面添加一个块级标签":["65.14"],"如div":["65.14"],"并设置":["65.14"],"clear":["65.14"],"both":["65.14"],"工具":["66.0"],"即可":["66.1"],"水平排列":["66.2"],"默认值":["66.2"],"reverse":["66.2"],"水平逆向排列":["66.2"],"项目平均分布在主轴上":["66.3"],"两端不留空白":["66.3"],"around":["66.3","66.10"],"两端留有空白":["66.3"],"指定":["66.4"],"项目是否换行":["66.4"],"nowrap":["66.4"],"的缩写":["66.5"],"属性可以控制项目在空间不足时的缩小比例":["66.6"],"则会参考该值进行布局":["66.7"],"嵌套的":["66.8"],"容器有自己的主轴和交叉轴":["66.8"],"end":["66.9","119.4","121.4"],"多行项目靠交叉轴末尾位置对齐":["66.9"],"center":["66.9","69.7"],"多行项目在交叉轴上居中对齐":["66.9"],"space":["66.9","70.1"],"between":["66.9"],"通过设置":["66.10"],"属性为":["66.10"],"实现项目平均分布":["66.10"],"columns":["67.1","115.0"],"通过将网格容器":["67.1"],"container":["67.1","67.3","67.23","67.24"],"我们可以通过设置":["67.2"],"display":["67.2","69.8","70.2"],"rows":["67.3"],"属性来定义列和行的大小和结构":["67.3"],"span":["67.4","67.16","92.10"],"允许一个网格项跨越多个行或列":["67.4"],"我们可以使用":["67.4"],"布局提供了一系列强大的属性":["67.5"],"可以指定固定大小":["67.6"],"如像素":["67.6"],"百分比等":["67.6"],"也可以使用":["67.6"],"fr":["67.6"],"单位表示可用空间的比例分配":["67.6"],"header":["67.7","67.24","123.13"],"areas":["67.8"],"的缩写属性":["67.8"],"可以通过一个属性同时定义列":["67.8"],"行和区域":["67.8"],"可以使用两个值表示行和列的间隔":["67.9"],"分别定义网格列和行之间的间隔":["67.10"],"定义了当网格容器中的网格项目无法放入先前定义的网格轨道时":["67.11"],"自动创建的额外列和行的大小":["67.11"],"可以指定固定大小或使用":["67.11"],"默认值是":["67.12"],"row":["67.12"],"表示按照行进行放置":["67.12"],"用于在网格项目中定义对齐方式":["67.13"],"控制项目在列轴上的对齐方式":["67.13"],"控制网格项目在列轴上的对齐方式":["67.14"],"用于定义单个网格项目自身在网格单元格中的对齐方式":["67.15"],"用于将网格项目放置在指定的列和行位置":["67.16"],"可以使用数字":["67.16"],"布局":["67.17"],"100px":["67.18"],"auto":["67.18","72.2"],"1fr":["67.18","67.19"],"定义三列":["67.18","67.19"],"第一列宽度为":["67.18"],"repeat":["67.19"],"每列宽度为1fr":["67.19"],"width":["67.20","69.1","70.2","73.11","79.23","90.31","140.2","149.1"],"768px":["67.20"],"simple":["67.22"],"layout":["67.22","67.23","67.24"],"布局和":["67.26"],"布局适用于复杂的网页布局":["67.27"],"如主页布局":["67.27"],"支持网格区域的命名":["67.28"],"更具语义性":["67.28"],"flexbox":["67.28"],"grid":["67.29","67.31"],"中的顺序一致":["67.30"],"order":["67.30"],"布局在现代浏览器中得到了很好的支持":["67.31"],"布局强大":["67.32"],"但在某些情况下可能会对性能产生一定影响":["67.32"],"以提高代码的可读性和维护性":["67.33"],"嵌套使用":["67.33"],"id":["68.0","82.5","87.6"],"比较规则":["68.1"],"按照":["68.1"],"从左到右":["68.1"],"的顺序":["68.1"],"依次比较大小":["68.1"],"当前位胜出后":["68.1"],"后面的不再对比":["68.1"],"height":["69.3","70.3","149.3"],"100vh":["69.3"],"position":["69.5"],"absolute":["69.5"],"translate":["69.6"],"content":["69.7","79.23","108.3"],"000":["70.1"],"white":["70.1"],"400px":["70.2"],"设置元素的宽度":["70.2"],"60px":["70.3"],"line":["70.3"],"30px":["70.3"],"track":["71.0"],"没有滑块":["71.0"],"20px":["72.1"],"top":["72.1","91.11"],"fit":["72.2"],"cover":["72.2"],"mpeg":["73.0","73.2"],"您的浏览器不支持音频播放":["73.0"],"视频示例":["73.0"],"video":["73.0"],"定义了声音内容":["73.5"],"source":["73.5","73.6","73.11"],"定义一个视频":["73.6"],"用户控制界面":["73.7"],"poster":["73.7"],"视频封面":["73.7"],"autoplay":["73.7"],"播放":["73.8"],"runoob":["73.10","73.11"],"try":["73.10","73.11","112.0"],"www":["73.11","118.12"],"demo":["73.11"],"markup":["74.0"],"文档类型声明":["74.1"],"告诉浏览器文档使用的":["74.1"],"以下是一些常用的":["74.2"],"h1":["74.2","78.2","78.14","78.15","91.9","123.5"],"到":["74.2"],"h6":["74.2"],"标题标签":["74.2"],"用于定义标题":["74.2","76.1"],"article":["74.3"],"从而实现更丰富的用户体验":["74.4"],"在进阶阶段":["74.4"],"可以学习响应式设计":["74.4"],"web":["74.4"],"accessibility":["74.4"],"in":["74.5","86.12","97.2"],"your":["74.5","121.16"],"readme":["74.5","157.1"],"md":["74.5"],"like":["74.5"],"highlights":["74.5"],"information":["74.5"],"vite":["74.6","111.11"],"been":["74.6"],"polyfilled":["74.6"],"behaviors":["74.6"],"see":["74.6"],"这是h2级别的标题":["75.1"],"h3":["75.1"],"这是一个段落文本":["75.2"],"列表项1":["75.5","75.6"],"这是一个div容器":["75.7"],"style":["75.8","90.28","93.4","138.1"],"表头1":["75.9"],"点击我":["75.12"],"username":["75.13","123.5","123.14","157.11"],"用户名":["75.13"],"首页":["75.14","121.17"],"mp4":["75.15"],"controls":["75.15","155.8"],"它们由尖括号包围":["76.0"],"为最高级别的标题":["76.1"],"为最低级别":["76.1"],"但用于内联元素的包裹":["76.2"],"strong":["76.2"],"标签中包裹这个":["76.3"],"custom":["76.5"],"然后自动填充以前保存的密码":["77.1"],"这里推荐一种特别简单的方法解决这个问题":["77.1"],"ui":["78.0","78.7","78.9","80.5","157.7"],"代码中编写类似于":["78.1"],"的标记":["78.1","79.9"],"标签可以是":["78.4"],"使用":["78.5","85.6","92.14","127.1","152.0"],"key":["78.5","81.10"],"这样可以在":["78.7"],"中插入动态的内容":["78.7"],"拆分成独立的":["78.9"],"react":["78.10","80.6","80.9","80.10","81.4","82.6","82.7","82.12"],"元素":["78.10"],"jsx":["78.11","80.9","81.14","83.6"],"welcome":["78.11","85.3"],"可以在组件中获取这些属性并进行相应的渲染":["78.12"],"isloggedin":["78.14","78.15","85.2","85.4","85.5"],"我们经常需要渲染数据列表":["78.16"],"setstate":["78.18"],"target":["78.18"],"extends":["78.20","80.6","80.9","80.10","81.4","83.6","99.6","99.11","103.3","111.6"],"component":["78.20","80.6","80.9","80.10","81.4","82.15","83.5","83.6","87.6","93.4"],"componentdidmount":["78.20"],"provider":["78.21"],"dark":["78.21"],"toolbar":["78.21"],"生命周期方法等":["78.22"],"counter":["78.22"],"的设计理念是声明式编程":["79.1"],"开发者只需描述":["79.1"],"应该如何在不同状态下进行渲染":["79.1"],"而无需关心实现的细节":["79.1"],"每个组件具有自己的状态和行为":["79.3"],"这种组件化的开发模式使得代码更易于维护":["79.3"],"的结构":["79.4"],"当组件的状态发生变化时":["79.4","79.11"],"会通过比较新旧虚拟":["79.4"],"即数据只能从父组件流向子组件":["79.5"],"应用程序":["79.6"],"比如":["79.6","111.6"],"我们需要掌握以下几个核心概念":["79.7"],"函数组件是一种简单的声明式组件":["79.8"],"类组件具有更多的功能":["79.8"],"如生命周期方法和状态管理":["79.8"],"代码中编写类似":["79.9"],"通过":["79.10","118.12"],"更新和卸载阶段":["79.12"],"在这些生命周期方法中":["79.12"],"通过事件处理函数":["79.13"],"我们可以执行特定的操作":["79.13"],"如更新组件的状态":["79.13"],"map":["79.15","81.10","89.2"],"方法遍历数组":["79.15"],"我们可以通过对表单元素的事件监听和状态更新":["79.16"],"来收集用户的输入并实时更新组件的状态":["79.16"],"中共享状态的技术":["79.17"],"中实现组件的复用逻辑":["79.18"],"而不必通过":["79.19"],"props":["79.19","83.3","83.5","83.6","88.2"],"用于在函数组件中添加状态":["79.20"],"副作用和其他":["79.20"],"来写一个":["79.21"],"这个包":["79.22"],"是专门用来创建":["79.22"],"组件":["79.22"],"组件生命周期等":["79.22"],"compatible":["79.23"],"ie":["79.23"],"edge":["79.23"],"viewport":["79.23"],"device":["79.23"],"from":["79.24","81.14","82.12","90.31","117.6","117.8","149.2"],"reactdom":["79.24","81.15"],"这些方法允许我们在特定时间点执行代码":["80.0"],"控制组件的行为":["80.0"],"操作等":["80.1","86.18"],"组件更新阶段":["80.1"],"绑定方法":["80.3"],"handleclick":["80.3"],"initialcount":["80.4"],"用于描述组件的":["80.5"],"结构":["80.5"],"发送网络请求":["80.6"],"mycomponent":["80.9","80.10","83.6","92.2"],"prevprops":["80.11"],"prevstate":["80.11"],"做一些副作用操作":["80.11"],"someprop":["80.11"],"组件即将被销毁时取消订阅":["80.13"],"off":["80.13"],"处理事件":["80.13"],"组件是构建用户界面的基本单位":["81.0"],"每个组件可以接收外部传入的数据":["81.0"],"组件都可以通过":["81.1"],"接收数据":["81.1"],"这些数据可以来自组件的父组件或者外部环境":["81.1"],"子组件":["81.3","92.16","95.1","95.4"],"static":["81.4"],"render":["81.5","84.2","84.3","84.4","85.2","85.3","85.4","85.5"],"布尔值":["81.6"],"active":["81.9"],"index":["81.10","102.7","111.12","121.17","157.2","157.6"],"是只读的":["81.13"],"组件本身无法修改":["81.13"],"然后在组件中引入":["81.14"],"并进行验证":["81.14"],"设置默认props":["81.15"],"使用组件并传递props":["81.15"],"document":["81.15","133.1","146.1"],"single":["82.1"],"page":["82.1","118.8"],"application":["82.1","118.12","118.15","149.1"],"会渲染对应的页面组件":["82.3"],"路径":["82.4"],"中传递一个特定的":["82.5"],"然后在页面组件中根据":["82.5"],"router":["82.6","82.7","87.8"],"npm":["82.8","102.10","119.1","126.4"],"yarn":["82.8","111.4"],"进行安装":["82.8"],"的依赖":["82.9"],"about":["82.10","121.17"],"nav":["82.11","90.17","90.19","157.9"],"to":["82.11","82.13","82.14","87.5","144.7"],"exact":["82.15"],"是组件用于存储和管理可变数据的一种机制":["83.0"],"是":["83.1","88.1"],"组件的一部分":["83.1"],"因此它受到组件的生命周期和渲染过程的影响":["83.1"],"handleincrement":["83.4"],"onincrement":["83.7"],"中":["84.0","85.0"],"我们通常使用":["84.1"],"numbers":["84.2","84.3"],"newnumbers":["84.5"],"节点":["84.6"],"抽象列表项":["84.6"],"如果列表项的渲染逻辑较复杂":["84.6"],"建议将其抽象成组件":["84.6"],"以提高代码的可读性和复用性":["84.6"],"注意性能":["84.6"],"当列表数据较大时":["84.6"],"要注意列表渲染的性能":["84.6"],"switch":["85.1"],"state":["85.2","85.4","85.5","88.4"],"fragment":["85.6"],"包裹多个元素":["85.6"],"当需要在条件渲染中返回多个元素时":["85.6"],"来包裹这些元素":["85.6"],"manager":["86.3"],"first":["86.4"],"模板中":["86.6"],"imagesrc":["86.7"],"isvisible":["86.9"],"实例数据的双向绑定":["86.14"],"template":["86.16","92.12"],"可以进行":["86.18"],"beforeupdate":["86.18","90.27"],"数据更新前":["86.18"],"在数据更新之前调用":["86.18"],"发生在重新渲染之前":["86.18"],"可以在此处进行状态更新前的准备工作":["86.18"],"updated":["86.18"],"官方提供的路由管理器":["87.1"],"用于实现单页面应用":["87.1"],"spa":["87.1"],"到您的":["87.2"],"home":["87.3","111.10","118.8"],"components":["87.3"],"标签来渲染路由匹配到的组件":["87.4"],"parent":["87.7"],"routes":["87.9","87.10","111.10"],"如路由别名":["87.12"],"用于管理":["88.0"],"可以被多个组件共用":["88.1"],"避免重复逻辑代码":["88.1"],"mutations":["88.1"],"变更":["88.1"],"events":["88.2"],"状态定义":["88.3"],"状态修改":["88.3"],"获取状态":["88.3"],"将":["88.3"],"应用关联":["88.3"],"应用的入口文件":["88.3"],"increment":["88.4"],"incrementasync":["88.5"],"context":["88.5","131.3","134.4"],"commit":["88.5","109.10","111.2","157.11"],"获取未完成的todos":["88.6"],"unfinishedtodos":["88.6"],"todo":["88.6"],"获取特定id的todo":["88.6"],"gettodobyid":["88.6"],"find":["88.6"],"能够监听属性的读取和修改操作":["89.1"],"依赖追踪":["89.1"],"dependency":["89.1"],"tracking":["89.1"],"在模板中":["89.1"],"当你使用数据对象中的属性时":["89.1"],"的依赖追踪更加精细化":["89.2"],"使用了基于":["89.2"],"数据结构的依赖收集":["89.2"],"每个属性都有一个关联的":["89.2"],"存储依赖关系":["89.2"],"这种方式比":["89.2"],"使用的数组更高效":["89.2"],"响应式触发":["89.2"],"组件只需引入不用注册":["90.0"],"属性和方法也不用":["90.0"],"的统一入口":["90.1"],"简单来说":["90.1"],"就是所有的":["90.1"],"count1":["90.2"],"count2":["90.2"],"val":["90.2"],"notref":["90.4"],"changemsg":["90.5"],"change":["90.5","90.7"],"string":["90.6","98.9","98.10","99.7","99.9"],"修改":["90.7"],"vue":["90.8","90.12","90.31","91.7","91.8","93.2","93.7","111.7","156.5"],"或是一个":["90.9"],"数据是会变的":["90.12"],"但不会更新视图":["90.12"],"它可以接收一个函数或对象作为参数":["90.15"],"会返回一个只读的":["90.15"],"data":["90.16","118.14"],"参数一":["90.16"],"监听的数据":["90.16"],"bar":["90.17"],"message2":["90.18"],"并在其依赖变更时重新运行该函数":["90.21"],"也是一个函数":["90.22"],"函数或生命周期钩子被调用时":["90.23"],"组件更新前执行":["90.24"],"在我们使用":["90.25"],"vue3":["90.25","91.5"],"元素被更新之前调用":["90.27"],"dir":["90.28"],"directivebinding":["90.28"],"background":["90.28"],"无论值是否有更改都可用":["90.29"],"arg":["90.29"],"传递给指令的参数":["90.29"],"如果有的话":["90.29"],"例如在":["90.29"],"foo":["90.29","122.12"],"onmounted":["90.31"],"onunmounted":["90.31"],"ref":["90.31","139.4","141.4"],"usewindowresize":["90.31"],"子父组件":["91.1"],"甚至兄弟组件通信":["91.1"],"自定义事件":["91.1"],"可以实现子父组件通信":["91.1"],"全局事件总线":["91.1"],"方式":["91.2"],"事件":["91.3"],"另外一种自定义事件":["91.3"],"原生":["91.3","93.5"],"当然点击事件想注入多个参数可以按照下图操作":["91.4"],"但是切记注入的事件对象务必叫做":["91.4"],"标签内部":["91.5"],"使用了":["91.5"],"defineemits":["91.5"],"此方法是":["91.5"],"提供的方法":["91.5"],"不需要引入直接使用":["91.5"],"也就没有":["91.6"],"prototype":["91.6"],"以及组合式":["91.6"],"实现父子组件数据同步":["91.7"],"msg":["91.7"],"在父组件内部使用一个子组件":["91.8"],"ref与":["91.9"],"son":["91.9"],"可以实现隔辈组件传递参数":["91.10"],"组件组件提供数据":["91.10"],"可以用":["91.12"],"a替换":["91.12"],"填入组件a部分的结构":["91.12"],"tree":["92.5"],"shaking":["92.5"],"我是标题":["92.6"],"父组件使用插槽":["92.8"],"在父组件给这个插槽填充内容":["92.8"],"父组件":["92.9"],"v":["92.9","102.7","109.11"],"children":["92.12"],"组件有两个插槽":["92.13"],"它们都只接收一个直接子节点":["92.13"],"插槽里的节点会尽可能展示出来":["92.13"],"如果不能":["92.13"],"则展示":["92.13"],"fallback":["92.13"],"完全不受父级style样式影响":["92.14"],"通过to":["92.14"],"属性插入到指定元素位置":["92.14"],"view":["92.15","146.1","148.1"],"多个条件判断的子组件":["92.15"],"开发者可以自定义":["92.17"],"model修饰符":["92.17"],"bind":["92.17"],"sync":["92.17"],"修饰符和组件的":["92.17"],"with":["93.4"],"preview":["93.4"],"syntax":["93.4"],"直接回车":["93.4"],"这两种使用vite创建vue3项目的步骤一样":["93.6"],"运行命令":["93.6","117.1"],"输入项目名称":["93.6"],"正式版在今年9月份发布":["94.1"],"2年多开发":["94.1"],"更新渲染快133":["94.2"],"watch":["94.3"],"新的生命周期函数":["94.3"],"普通写法":["95.2"],"seutp":["95.3"],"语法糖模式发现":["95.3"],"infinitynumber":["98.2"],"无穷大":["98.2"],"warning":["98.3"],"list":["98.4"],"ok":["98.7"],"n":["98.8","106.1","109.8"],"类型的变量":["98.9"],"void":["98.9","99.9","99.11"],"类型不可以分给其他类型":["98.9"],"这样写会报错":["98.9"],"void类型不可以分给其他类型":["98.9"],"函数中使用联合类型":["98.12"],"any":["98.14","100.4","145.2","146.1","148.1"],"strlength1":["98.14"],"一般方法":["99.1"],"say":["99.1","99.6","99.8"],"我叫":["99.1"],"protected":["99.3"],"修饰符":["99.4","99.5"],"man":["99.6"],"你的意思是改为访问静态成员":["99.8"],"吗":["99.8"],"asd":["99.9"],"names":["99.10"],"setage":["99.11"],"返回值":["100.0"],"为上面那个函数添加类型":["100.1"],"ts":["100.1","103.4","111.9"],"items":["100.4"],"而在使用的时候再指定具体类型的一种特性":["101.0"],"res":["101.6","108.6","123.11"],"上不存在属性":["101.7"],"我们可以使用泛型约束来实现":["101.7"],"是一种由微软开发的自由和开源的编程语言":["102.1"],"智能":["102.2"],"的提示":["102.2"],"相对于js而言":["102.2"],"先编译再执行":["102.3"],"在写的时候就会发现错误了":["102.3"],"编译阶段就能检查类型发现大部分错误":["102.5"],"项目里使用":["102.6"],"编译":["102.7"],"tsc":["102.9"],"来定义对象的类型":["103.0"],"接口是对象的状态":["103.0"],"但是对象里面缺少age属性":["103.1"],"使用接口约束的时候不能多一个属性也不能少一个属性":["103.1"],"interface":["103.4","103.5"],"propname":["103.6"],"大":["104.1"],"代表所有拥有":["104.1"],"hasownproperty":["104.1"],"方法的类型":["104.1"],"所以所有原始类型":["104.1"],"非原始类型都可以赋给":["104.1"],"tslib":["105.0"],"导入辅助工具函数":["105.0"],"isolatedmodules":["105.0"],"将每个文件做为单独的模块":["105.0"],"transpilemodule":["105.0"],"类似":["105.0"],"严格的类型检查选项":["105.0"],"启用所有严格类型检查选项":["105.0"],"noimplicitany":["105.0"],"在表达式和声明上有隐含的":["105.0"],"any类型时报错":["105.0"],"strictnullchecks":["105.0"],"启用严格的":["105.0"],"检查":["105.0"],"noimplicitthis":["105.0"],"我是一个字符串":["106.2"],"定义联合类型别名":["106.2"],"http":["107.1"],"install":["107.2","126.7"],"params":["107.3"],"添加请求拦截器":["107.4"],"axios":["107.4"],"interceptors":["107.4","111.11"],"request":["107.4"],"status":["107.5"],"headers":["107.5"],"集中式管理":["108.1"],"apibaseurl":["108.2"],"service":["108.2"],"type":["108.3","141.4"],"如果没有设置请求头":["108.3"],"method":["108.3"],"您未登录":["108.4"],"或者登录已经超时":["108.4"],"请先登录":["108.4"],"您没有权限操作":["108.4"],"请求地址出错":["108.4"],"postaction":["108.5"],"xxx":["108.6"],"引入上面login方法所在的文件":["108.6"],"配置局部账户":["109.1"],"只对当前":["109.1"],"日志信息":["109.6"],"提交当前目录及其子目录的变更":["109.6"],"cached":["109.7"],"比较指定文件暂存区和":["109.7"],"的差异":["109.7"],"次的版本信息":["109.8"],"已有分支":["109.10"],"基于某个":["109.10"],"分支":["109.12"],"分支名":["109.13"],"把当前分":["109.14"],"基于":["109.14"],"暂存区指定文件恢复成和":["109.15"],"一样":["109.15"],"reset":["109.15"],"bash":["109.16","109.20"],"git":["109.16","110.1","110.2"],"别名":["109.18"],"地址":["109.18","109.19"],"origin":["109.21"],"master":["109.21"],"如果省略本地分支名":["109.21"],"copy内容到git":["110.5"],"husky":["111.2"],"来做":["111.2"],"拦截":["111.2"],"node":["111.3","119.5","122.11"],"由":["111.4"],"衍生而来":["111.4"],"解决了":["111.4"],"env":["111.6","111.11"],"browser":["111.6"],"浏览器端":["111.6"],"es2021":["111.6"],"规则继承":["111.6"],"全部规则默认是关闭的":["111.6"],"这个配置项开启推荐规则":["111.6"],"推荐规则参照文档":["111.6"],"函数不能重名":["111.6"],"js的eslint插件":["111.7"],"查找vue语法错误":["111.7"],"发现错误指令":["111.7"],"不允许多个空行":["111.8"],"process":["111.8"],"production":["111.8"],"debugger":["111.8"],"unexpected":["111.8"],"multiline":["111.8"],"禁止空余的多行":["111.8"],"useless":["111.8"],"escape":["111.8"],"禁止不必要的转义字符":["111.8"],"在入口文件引入":["111.9"],"但是你会发现在":["111.9"],"desc":["111.10"],"平台管理员":["111.10"],"roles":["111.10"],"buttons":["111.10"],"cuser":["111.10"],"detail":["111.10"],"token":["111.10","123.14"],"baseurl":["111.11"],"app":["111.11","149.4","151.2"],"base":["111.11"],"timeout":["111.11"],"请求拦截器":["111.11"],"admin":["111.12","157.7"],"acl":["111.12"],"userinfo":["111.12","123.14"],"info":["111.12"],"htm":["112.0"],"files":["112.0","121.3","121.6"],"uri":["112.0"],"cmd":["112.1"],"nginx":["112.1"],"t":["112.1"],"数据操作命令以及授权和权限管理命令":["113.0"],"column2":["113.1","117.5","117.7"],"创建一个新的表":["113.1"],"alter":["113.1"],"where":["113.2"],"condition":["113.2"],"从表中检索数据":["113.2"],"从用户撤销特定数据库或表的权限":["113.3"],"user":["113.3","123.11"],"字段":["114.0"],"可变长度的字符串":["114.3"],"存储一个或多个预定义的值":["114.5"],"除了上述常见的数据类型":["114.5"],"每个记录包含多个字段":["115.0"],"通过使用查询语言":["115.0"],"如sql":["115.0"],"可扩展性":["115.1"],"mysql具有良好的可扩展性":["115.1"],"可以通过分布式架构和主从复制来处理大规模数据和高并发访问":["115.1"],"高性能":["115.1"],"mysql通过优化查询执行计划":["115.1"],"创建数据库":["117.0"],"创建表":["117.0"],"打开命令行终端":["117.1"],"u":["117.1"],"sql":["117.2"],"database":["117.3"],"column1":["117.4","117.7"],"values":["117.5"],"value1":["117.5","117.7"],"table":["117.6","117.8"],"快速":["118.0"],"男":["118.2"],"请求成功":["118.2"],"bruce":["118.3","122.12"],"可直接访问":["118.3"],"参数把流转关系交给下一个中间件或路由":["118.5"],"中间件注意事项":["118.5"],"调用了第1个全局中间件":["118.6"],"定义第二个全局中间件":["118.6"],"get":["118.7"],"send":["118.7","118.8"],"服务器内部发生了错误":["118.8"],"定义错误级别的中间件":["118.8"],"捕获整个项目的异常错误":["118.8"],"从而防止程序的崩溃":["118.8"],"导入中间件":["118.10"],"相关的":["118.11"],"响应头":["118.11"],"就可解除浏览器端的跨域访问限制":["118.11"],"值仅限于":["118.12"],"plain":["118.12"],"multipart":["118.12"],"form":["118.12"],"urlencoded":["118.12"],"三者之一":["118.12"],"如果客户端向服务器发送了额外的请求头信息":["118.12"],"则需要在服务器端":["118.12"],"dpr":["118.14"],"downlink":["118.14"],"save":["118.14"],"json":["118.15","123.12"],"格式的数据":["118.15"],"解析标记并提供用于遍历":["119.2"],"操作结果数据结构的":["119.2"],"douban":["119.3"],"创建一个空数组":["119.4"],"把数据以对象的形式存放在数组中":["119.4"],"allfiles":["119.4"],"获取html中的数据":["119.4"],"load":["119.4","144.7","152.1","152.2"],"p513344864":["119.6"],"楚门的世界":["119.6"],"truman":["119.6"],"show":["119.6"],"p479682972":["119.6"],"忠犬八公的故事":["119.6"],"hachi":["119.6"],"tale":["119.6"],"p2587099240":["119.6"],"海上钢琴师":["119.6"],"leggenda":["119.6"],"del":["119.6"],"chrome":["120.1"],"v8":["120.1"],"引擎":["120.1"],"则完全没有采用这种模型":["120.2"],"它本质上就是一个单线程":["120.2"],"但一个线程如何服务于大量的请求":["120.2"],"如何处理高并发的呢":["120.2"],"程序运行不稳定":["120.3"],"读写文件":["121.1"],"rs":["121.1"],"同步模式下打开文件用于读取":["121.1"],"同步模式下打开文件用于读写":["121.1"],"txt":["121.3","121.6"],"可读流关闭了":["121.4"],"数据读取完毕":["121.4"],"关闭可写流":["121.4"],"nodejs":["121.6","122.21"],"流打开了":["121.7"],"00000000":["121.8"],"每一个元素占用一个字节内存":["121.8"],"是对底层内存的直接操作":["121.8"],"动态拼接出被操作文件的完整路径":["121.9"],"解决方案":["121.9"],"mkdirsync":["121.10"],"删除目录":["121.10"],"rmdir":["121.10"],"rmdirsync":["121.10"],"重命名文件和目录":["121.10"],"rename":["121.10"],"oldpath":["121.10"],"newpath":["121.10"],"require":["121.13","122.12","122.13"],"定义文件的存放路径":["121.13"],"fpath":["121.13"],"关于页面":["121.17"],"模块化可提高代码的复用性和可维护性":["122.2"],"实现按需加载":["122.2"],"更好的分离":["122.3"],"自定义模块":["122.5"],"方法等成员":["122.6"],"供外界使用":["122.7"],"导入自定义模块时":["122.7","122.21"],"得到的就是":["122.7"],"变量是一个对象":["122.8"],"不会导致模块的代码被执行多次":["122.9"],"会按顺序尝试加载文件":["122.11"],"users":["122.12"],"project":["122.12"],"文件里调用了":["122.12"],"加载的入口":["122.13"],"如果没有":["122.13"],"中的包都是免费且开源的":["122.15"],"由于":["122.15"],"包的名称":["122.18"],"version":["122.18"],"不论是内置模块":["122.19"],"如果省略了文件的扩展名":["122.21"],"里调用":["122.22"],"tools":["122.22"],"如果目录里没有":["122.23"],"文件":["122.23","125.4"],"或者":["122.23"],"createpool":["123.2"],"host":["123.2"],"set":["123.3","156.1"],"更新数据":["123.3"],"update":["123.3","124.0","125.3"],"用户体验好":["123.6"],"页面局部刷新":["123.6"],"无需重新请求页面":["123.6"],"减轻服务器的渲染压力":["123.6"],"可考虑服务端渲染":["123.7"],"后台管理项目":["123.7"],"islogin":["123.11"],"保存在客户端浏览器中":["123.13"],"服务器通过还原":["123.13"],"字符串的形式来认证用户的身份":["123.13"],"组成部分":["123.13"],"payload":["123.13"],"signature":["123.13"],"参数":["123.14"],"用户信息对象":["123.14"],"加密密钥":["123.14"],"配置对象":["123.14"],"token有效期":["123.14"],"尽量不保存敏感信息":["123.14"],"因此只有用户名":["123.14"],"没有密码":["123.14"],"expiresin":["123.14"],"10h":["123.14"],"字符串还原为":["123.14"],"客户端访问有权限的接口时":["123.14"],"需通过请求头的":["123.14"],"remove":["124.0"],"更新依赖项":["124.0"],"upgrade":["124.0"],"运行脚本命令":["124.0"],"run":["124.0"],"清理缓存":["124.0"],"的默认包管理器":["125.1"],"也是世界上最大的开源软件注册表":["125.1"],"时":["125.2"],"卸载指定的包":["125.3"],"更新指定的包":["125.3"],"并生成":["125.4"],"部分":["125.5"],"你可以列出项目所需的包及其版本号":["125.5"],"定义脚本和使用":["125.6"],"publish":["125.6"],"请访问":["126.1"],"并执行以下命令来初始化项目":["126.2"],"编写你的包的代码":["126.3"],"init":["126.4"],"密码和邮箱":["126.5"],"执行以下命令发布你的包":["126.5"],"bug":["126.6"],"通过包管理器安装":["127.1"],"添加依赖项":["127.2"],"若要添加新的依赖项":["127.2"],"可以运行以下命令":["127.2"],"脚本在矩形区域中绘制图像":["130.1"],"动画和其他复杂的视觉效果":["130.1"],"轴向下延伸":["130.3"],"可以通过":["130.3"],"提供了两种基本的绘图上下文":["130.4"],"进行控制":["130.5"],"在一个网页上创造一个交互式地图":["130.6"],"让用户点击地图上的数据点来查看更多的信息或与其他应用程序进行交互":["130.6"],"您可以控制图形元素的位移":["130.7"],"位置":["130.7"],"颜色和其他属性":["130.7"],"不同的浏览器可能解释":["130.8"],"图像缩放":["131.0"],"fillrect":["131.1","131.3"],"原来的矩形是":["131.2"],"缩放后展示出来是":["131.2"],"垂直缩放":["131.4"],"水平位移":["131.4"],"单位像素":["131.4"],"垂直位移":["131.4"],"之上":["132.0"],"那么浏览器就会简单地把源特体的图像叠放在目标物体图像上面":["132.0"],"在源图像中显示目标图像":["132.1"],"只有源图像内的目标图像部分会被显示":["132.1"],"源图像是透明的":["132.1"],"在源图像外显示目标图像":["132.1"],"getelementbyid":["133.1"],"判断是否有getcontext":["133.1"],"lineto":["133.2"],"添加一个新点":["133.2"],"绘制一条从当前位置到指定新点":["133.2"],"交点为菱形":["134.1"],"miterlimit":["134.1"],"指定交点菱形的长度":["134.1"],"该属性只在":["134.1"],"属性的值等于":["134.1"],"时有效":["134.1"],"表示":["134.2"],"颜色":["134.2","148.3"],"gradient":["134.2"],"pink":["134.2"],"skyblue":["134.2"],"垂直重复":["134.3"],"no":["134.3"],"不重复":["134.3"],"如果第二个参数是空字符串或":["134.3"],"则等同于":["134.3"],"shadowoffsety":["134.4"],"阴影的垂直位移":["134.4"],"下面是一个例子":["134.4"],"填充":["136.2"],"beginpath":["136.2","141.3"],"rect":["136.2"],"左眼":["136.3"],"stroke":["136.4"],"closepath":["136.4"],"两条线段使用fill":["136.4"],"tx":["136.5"],"png":["136.5","144.7","157.7","157.9"],"文本":["136.6"],"绘制文字最大宽度":["136.6"],"终点x":["137.2"],"终点y":["137.2"],"isdraw":["138.2","141.3"],"onmousedown":["138.2","141.3"],"onmouseup":["138.2"],"globalcompositeoperation":["138.2"],"获取当前的时间":["139.3"],"time":["139.3"],"hour":["139.3"],"gethours":["139.3"],"min":["139.3"],"getminutes":["139.3"],"sec":["139.3"],"round":["141.3"],"设置允许绘制的变量":["141.3"],"event":["141.3"],"pagex":["141.3"],"offsetleft":["141.3"],"pagey":["141.3"],"offsettop":["141.3"],"moveto":["141.3","150.5"],"onmouseleave":["141.3"],"inputcolor":["141.4"],"endfill":["143.2"],"轻量级的":["144.1"],"技术进行硬件加速渲染":["144.3"],"能够处理大量的图形元素并实现流畅的动画效果":["144.3"],"提供了简洁而直观的":["144.4"],"sprite":["144.5"],"可以在现代浏览器上运行":["144.6"],"onassetsloaded":["144.7"],"当纹理加载完成后执行的回调函数":["144.7"],"创建一个矩形":["145.2"],"rectangle":["145.2"],"设置边框样式":["145.2"],"linestyle":["145.2"],"appendchild":["146.1"],"显示helloworld文字":["146.1"],"创建一个圆形":["146.2"],"circle":["146.2"],"创建一个纹理":["148.1"],"texture":["148.1"],"img14":["148.1"],"filters":["148.2"],"监听鼠标是否进入精灵":["148.2"],"轮廓宽度":["148.3"],"创建发光滤镜":["148.3"],"glowfilter":["148.3"],"window":["149.1"],"innerwidth":["149.1"],"drawellipse":["150.1"],"drawpolygon":["150.2"],"宽":["150.3"],"高":["150.3"],"圆角半径":["150.3"],"结束角度":["150.4"],"顺":["150.4"],"逆时针":["150.4"],"透明度":["150.5"],"jfs":["152.1"],"t1":["152.1"],"5c1b0581e1fa6c1c3":["152.1"],"58519cee2a0039e0":["152.1"],"jpg":["152.1"],"异步加载资源":["152.1","152.2"],"texturespromise":["152.1","152.2"],"加载完成后创建精灵":["152.1"],"loadbundle":["152.2"],"progress":["152.2"],"加载完成":["152.2"],"图像在放大或改变尺寸的情况下其图形质量不会有所损失":["153.1"],"因此能够优雅而简洁地渲染不同大小的图形":["153.1"],"并和":["153.1"],"x1":["153.3"],"x2":["153.3"],"r":["153.5"],"cy":["153.6"],"l":["153.9"],"渲染器是最常用的":["154.0"],"因为它利用了":["154.0"],"gpu":["154.0"],"加速":["154.0"],"提供更高的性能和更好的渲染效果":["154.0"],"scene":["154.0"],"场景是":["154.0"],"中所有":["154.0"],"对象的容器":["154.0"],"您可以在场景中添加":["154.0"],"移动和管理各种":["154.0"],"如几何体":["154.0"],"threejs":["155.3"],"three":["155.6"],"pi":["156.3"],"围绕x轴旋转45度":["156.3"],"blog":["157.0"],"新建文件夹":["157.2"],"在文件夹":["157.2"],"内新建":["157.2"],"cd":["157.3"],"dev":["157.4"],"打包":["157.4"],"作为我们的主页":["157.6"],"在新建一个":["157.6"],"logo":["157.7"],"alt":["157.7"],"yyg":["157.7"],"actions":["157.7"],"theme":["157.7"],"brand":["157.7"],"左上角的logo":["157.9"],"它的路径是从public文件夹开始的":["157.9"],"所以这里引用的是public":["157.9"],"jpg这张图":["157.9"],"是不是可以动态展开":["157.10"],"collapsed":["157.10"],"发布到":["157.11"],"repo":["157.11"],"push":["157.11"]},{"0":["8.14","24.14","25.2","28.7","56.15","65.1","68.1","78.22","79.23","81.4","83.3","83.6","93.3","99.10","123.11","131.1","131.4","150.4","152.1"],"1":["1.3","1.4","1.10","5.7","5.13","8.4","9.1","9.17","18.4","24.2","24.9","24.14","28.9","31.6","34.2","48.4","58.0","79.23","83.4","83.5","83.6","92.15","98.9","99.10","100.4","100.5","101.2","101.3","131.2","131.4","156.1"],"2":["1.3","1.4","1.5","1.7","1.10","5.7","8.4","9.1","24.2","26.6","30.14","31.6","34.2","36.1","37.7","56.3","58.0","65.5","65.14","67.20","70.1","70.2","90.24","91.4","93.6","98.4","100.4","100.5","101.2","101.3","109.16","119.6","131.4","133.1","156.1"],"3":["1.5","1.7","1.13","5.7","9.5","9.8","9.15","25.9","25.12","26.7","26.8","28.7","29.7","31.6","43.4","59.3","65.14","74.6","89.1","90.1","91.4","95.1","98.4","100.4","108.1","109.18","119.6","123.2","154.0","156.2"],"4":["1.13","5.18","9.8","13.0","24.20","29.7","31.6","43.9","50.1","88.1","89.2","98.6","100.4","114.1","123.11","153.1","154.0"],"5":["2.6","24.19","24.20","25.8","29.6","34.4","40.0","49.7","67.25","84.6","93.3","98.6","109.7","123.14"],"6":["5.3","40.0","85.6","98.2","109.8"],"7":["3.4","28.7","123.3"],"8":["3.4","27.3"],"9":["6.8","111.7"],"10":["134.2","134.4"],"11":["48.3"],"15":["148.3"],"16":["111.3"],"17":["29.2"],"18":["31.4","56.2","99.6"],"20":["99.8"],"25":["45.1","54.2"],"29":["31.1"],"30":["54.1","54.2","131.1","131.2","139.3","153.8","153.9"],"32":["150.4"],"35":["148.1"],"40":["153.9"],"50":["69.5","137.2","153.5"],"54":["150.3"],"58":["156.5"],"64":["150.1"],"66":["153.9"],"77":["156.5"],"80":["118.8"],"90":["49.12","153.7"],"100":["25.2","94.1","131.1","131.3","134.2","145.2","146.1","150.5","153.7"],"120":["153.9"],"123":["28.10","99.9","106.2"],"150":["153.4"],"160":["150.3"],"164":["150.1"],"200":["135.0","137.2","145.2","153.3","153.7","153.8"],"294":["114.1"],"295":["114.1"],"300":["145.2"],"324":["50.2"],"350":["136.3"],"400":["73.0"],"408":["108.4"],"409":["108.4"],"450":["137.1","137.2"],"500":["137.2"],"600":["139.4","140.2"],"967":["114.1"],"1970":["45.3","114.4"],"2015":["4.1"],"2016":["3.4"],"2017":["3.4"],"2224":["148.1"],"3000":["118.3"],"12087":["148.1"],"23739":["148.1"],"65535":["114.3"],"它是一种用于存储键值对的集合":["0.1"],"判断键是否存在":["0.2"],"true":["0.2","8.20","9.15","20.10","25.5","29.11","29.12","30.3","56.20","80.1","98.5","99.6","148.2"],"city":["0.2"],"false":["0.2","6.13","8.20","30.7","31.1","52.6","80.1"],"删除键值对":["0.2"],"array":["0.4","9.5","24.1","24.32","35.2","40.3","40.4","43.7","98.4"],"from":["0.4","4.11","4.12","4.16","4.18","4.19","4.21","121.8","121.10"],"有重复的键值":["0.6"],"则后面的会覆盖前面的":["0.6"],"对应值即":["0.6"],"出现一次":["1.1"],"thirty":["1.6"],"iterator1":["1.6","1.8"],"for":["1.6","8.22","25.4","35.2","95.4"],"console":["1.8","2.5","2.6","4.23","6.3","6.6","6.11","6.12","7.2","7.3","7.4","8.17","9.10","9.17","10.3","10.4","10.5","10.8","10.10","10.11","20.7","24.10","24.14","24.15","24.23","24.24","25.10","26.11","29.5","30.15","30.16","32.9","45.2","49.1","51.8","56.3","56.10","56.11","56.14","56.18","57.1","78.20","83.5","90.17","98.13","99.6","100.5","118.2","121.3","121.6","121.16","133.1"],"返回一个新的迭代器对象":["1.9"],"该对象包含":["1.9"],"string":["1.12","30.1","30.6","30.14","91.2","98.12","101.4","101.5","103.4","103.7","106.1"],"union":["1.14"],"使用":["1.15","8.22","79.1","82.3","82.15","90.7","157.2"],"方法判断当前":["1.15"],"对象":["1.15","28.11","28.12","41.5","90.15"],"中是否含有":["1.15"],"difference":["1.16"],"中":["2.0","42.1","79.8","88.3","132.0"],"引入了类":["2.0"],"类的方法":["2.1"],"alice":["2.2","4.13","5.17"],"调用父类的构造函数":["2.3"],"this":["2.3","37.2","57.1","59.12","76.5","78.8","81.3","81.14","86.10","88.3","88.4","88.5","88.6","91.6","99.7","99.9","105.0","119.4"],"log":["2.4","2.6","4.23","6.3","6.6","6.11","7.3","8.8","8.17","9.17","10.3","10.4","10.5","10.8","10.10","10.11","20.7","24.10","24.15","24.24","25.10","26.11","29.5","30.5","30.15","30.16","34.3","42.3","45.2","51.8","56.3","56.11","56.18","57.1","78.20","83.5","85.3","85.5","98.11","98.13","99.6","100.5","108.6","118.2","121.3","121.6","121.16","133.1"],"你好":["2.4","146.1"],"我叫":["2.4"],"const":["2.6","8.5","20.5","22.2","32.6","36.5","42.4","48.4","51.4","53.2","53.3","54.1","78.5","78.7","78.12","80.10","87.3","99.1","100.2","101.4","101.6","103.6","111.12"],"actionscript":["3.2"],"jscript":["3.2"],"等":["3.2","43.9"],"所使用":["3.2"],"node":["3.3","122.23"],"环境中可以读写文件等操作":["3.3"],"因为":["3.3"],"是在":["3.3"],"基础上的拓展":["3.3"],"所有":["3.3"],"es7":["3.4"],"es2016":["3.4"],"prototype":["3.4"],"includes":["3.4","43.5"],"用于检查数组是否包含某个元素":["3.4"],"引入指数运算符":["3.4"],"es8":["3.4"],"es2017":["3.4"],"entries":["3.4"],"values":["3.4"],"为了解决这些问题":["4.1"],"ecmascript":["4.1"],"这些问题会变得更为明显":["4.2"],"模块化的意义在于将代码分割成不同的模块":["4.2"],"每个模块拥有自己的作用域":["4.2"],"并且修改":["4.4"],"而不需要重复编写代码":["4.5"],"关键字":["4.6","5.15","54.0"],"function":["4.8","28.3","57.1","59.4","78.10","98.12","136.5"],"sayhello":["4.8","4.9","4.14","57.1"],"函数或类导入到当前模块中":["4.10"],"module1":["4.11","4.12"],"new":["4.13","32.6","38.1","42.4","59.3","98.10","101.6","118.4","134.3"],"hello":["4.14","6.12","8.1","57.1","59.11","79.21","80.13","81.14","98.7"],"import":["4.16","4.17","4.18","4.22"],"myage":["4.16","59.8"],"main":["4.17","4.18","122.18"],"as":["4.21"],"name":["4.21","30.9","31.7","42.7","59.8","78.7","81.7","81.14","90.19","92.11","100.2","103.1","103.7","117.3","117.8","126.7"],"更好地组织和维护代码":["4.28"],"提高代码的重用性":["4.28"],"es6":["5.3"],"默认值实现方式":["5.3"],"注意":["5.4","79.23"],"null":["5.4","32.5","32.8","37.2","37.7","59.12"],"method":["5.5","8.1","111.10"],"get":["5.5","32.4","32.5","41.5","123.11"],"headers":["5.5"],"http":["5.5","118.3","118.8","122.17"],"example":["5.5","75.3","75.4","76.4","80.6","80.11"],"com":["5.5","80.6","110.4","119.3","148.1"],"报错":["5.5"],"上面代码中":["5.5","28.12","28.13","131.5","134.2"],"的第二个参数是一个对象":["5.5"],"就可以为它的三个属性设置默认值":["5.5"],"解释":["5.7"],"与":["5.7"],"互等":["5.7"],"其实就是":["5.7"],"不同之处在于剩余参数用于解构数组和对象":["5.9"],"从某种意义上说":["5.9"],"slice":["5.10"],"call":["5.10","42.6","59.5"],"终于借助":["5.10"],"方法把":["5.10"],"转化成一个真正的数组了":["5.10"],"但是这样无疑是一个繁琐的过程":["5.10"],"而且不容易理解":["5.10"],"这时":["5.10"],"真数组":["5.11"],"是一个":["5.11"],"这里的剩余参数是个对象":["5.12"],"准确的应该叫":["5.12"],"剩余元素":["5.12"],"func":["5.12"],"本节内容可以总结以下几点":["5.13"],"剩余参数是为了能替代函数内部的":["5.13"],"特性":["5.14","79.20"],"add":["5.15","90.2","113.1","149.4"],"multiply":["5.16","36.1"],"x":["5.16","28.3","98.12","108.3"],"y":["5.16","51.10"],"箭头函数中的this":["5.17"],"person2":["5.17","54.2"],"的指向错误":["5.18"],"在需要动态绑定":["5.18"],"即每个参数占据一行":["5.19"],"以后修改代码的时候":["5.19"],"想为函数":["5.19"],"添加第三个参数":["5.19"],"或者调整参数的次序":["5.19"],"命令后面带有参数":["5.20"],"很多时候":["5.20"],"查":["6.1","24.5"],"以及":["6.2"],"进行字符串拼接之外":["6.2"],"trimright":["6.5"],"repeat":["6.5","67.20"],"copyresult":["6.7"],"world":["6.12","98.7"],"bar":["6.13","90.19"],"arr":["6.16","98.5"],"search":["6.17","14.1"],"pattern":["6.18","51.4","51.8"],"at":["6.18","6.20","118.8"],"bat":["6.19"],"sat":["6.19"],"fat":["6.19"],"result":["6.20","101.4"],"是一种方便拼接字符串的新语法":["7.1"],"模板字符串使用反引号":["7.1"],"m":["7.2","7.5","51.3"],"years":["7.2","7.5","53.2"],"old":["7.2","7.5","53.2"],"breaks":["7.3"],"输出":["7.3","7.5","25.10","34.1","34.2","34.3","51.8","57.2","59.3"],"is":["7.4","42.7","42.9","53.2","76.5","78.8","86.9"],"i":["7.5","39.2","53.2","57.1"],"方法也可以简写":["8.1"],"o":["8.1","39.2"],"keya":["8.4"],"a":["8.4","8.11","9.6","19.2","19.3","38.0","74.2","76.5","78.8","92.15","100.4","100.5","109.5","118.12","121.13","122.21"],"keyb":["8.4"],"b":["8.4","9.13","9.14","100.5","103.4","121.13","122.21"],"myobject":["8.4"],"javascript":["8.5","34.5","42.13","46.1","46.4","47.1","47.4","51.3","55.2","74.6","126.3","130.6","153.1"],"person":["8.5","59.3","90.8","99.9","103.1","103.4"],"这里的":["8.6","118.2"],"都没有用在对象的方法之中":["8.6"],"第一种写法是":["8.6"],"用在属性里面":["8.6"],"第二种和第三种写法是":["8.6"],"用在一个函数里面":["8.6"],"然后赋值给":["8.6"],"目前":["8.6"],"只有对象方法的简写法可以让":["8.6"],"引擎确认":["8.6"],"定义的是对象的方法":["8.6"],"引擎内部":["8.6"],"number":["8.12","30.6","49.0","84.2","84.3","98.12","100.1","101.3","101.5","101.7","103.2","103.3","103.7","106.2"],"字符串在数组中展开":["8.13"],"会直接覆盖":["8.15"],"再优化":["8.18"],"js":["8.20","20.5","29.6","30.16","32.6","48.4","49.3","49.4","59.3","59.7","78.2","102.7","121.10","122.23","134.1"],"foo":["8.20","31.1","59.4"],"注意事项":["8.21"],"基本数据类型作为源对象":["8.21"],"与对象的展开类似":["8.21"],"先转换成对象":["8.21"],"再合并":["8.21"],"undefined":["8.21","9.3","28.13","30.5"],"等方法是实例方法":["8.22"],"返回的都是":["8.22"],"对象的":["8.22"],"等方法是构造函数方法":["8.22"],"返回的是数组":["8.22"],"应用":["8.22"],"of":["8.22"],"循环遍历对象":["8.22"],"元素值为":["9.3"],"的数组":["9.3"],"array1":["9.3"],"key1":["9.4"],"value1":["9.4"],"回调函数":["9.9"],"参数2":["9.9","136.5"],"可选":["9.9","9.10","41.5"],"指定回调函数中的":["9.9"],"被填充的结束索引":["9.10"],"默认为数组末尾":["9.10"],"e":["9.11","119.6","138.2"],"f":["9.11","157.11"],"g":["9.11","102.10","124.0"],"循环":["9.12"],"不管嵌套多少层":["9.16"],"的指向":["9.17"],"下面我将详细介绍数组解构和对象解构的用法":["10.0"],"以及一些扩展功能":["10.0"],"前面必须要加分号":["10.6"],"age":["10.9","31.1","31.4","45.1","56.2","103.3"],"它提供了对文档内容进行访问和操作的方法和属性":["11.0"],"创建新元素":["11.1"],"并使用":["11.1"],"element":["11.1","20.3","24.21"],"appendchild":["11.1"],"createelement":["11.2"],"p":["11.2","23.2","28.12","74.2","75.7","76.1","80.13","81.3","81.5","81.14","83.3","83.4","85.2","85.4","85.5","92.16","99.1","99.10","117.1"],"textcontent":["11.2"],"可以使用它向前或向后导航":["12.0"],"go":["12.1"],"forward":["12.2"],"导航到相对于当前页面的偏移量为2的页面":["12.2"],"的各个部分":["13.0"],"如协议":["13.0"],"主机名":["13.0"],"路径和查询参数等":["13.0"],"同时也提供了一些导航方法":["13.0"],"如重定向到其他":["13.0"],"刷新页面等":["13.0"],"它包含了":["14.0"],"的路径部分":["14.1"],"将页面重定向到新的url":["14.2"],"assign":["14.2"],"如浏览器的名称":["15.0"],"版本":["15.0","125.4"],"appversion":["15.1"],"获取浏览器的版本":["15.2"],"如屏幕的尺寸":["16.0"],"不包括系统任务栏或工具栏":["16.1"],"屏幕可用宽度":["16.2"],"availwidth":["16.2"],"获取屏幕的可用高度":["16.2"],"的顶级对象":["17.0"],"width":["17.1","69.3","70.0","73.0","118.14","139.4","153.4"],"height":["17.1","90.31","138.1","140.2","149.1","153.4"],"调整窗口的大小":["17.1"],"close":["17.2","121.7"],"调整窗口大小":["17.2"],"盒子插入节点":["18.1"],"button":["18.1","90.2","90.12","95.2"],"btn":["18.1"],"再来看另一种情形的代码演示":["18.1"],"ul":["18.2","76.1","84.2","84.3","84.5","95.4"],"li":["18.2","76.1","84.2","84.3","95.4","119.4"],"不仅如此":["18.3"],"span":["18.4"],"初级":["18.4"],"变色":["18.4"],"css":["18.5","65.2","65.6","67.2","67.6","67.8","67.10","67.11","67.12","67.13","67.14","67.16","67.30","69.2","74.6"],"api":["19.1","80.6","80.11","111.10","122.15","130.1","130.3","130.8","144.4"],"应用程序编程接口":["19.1"],"来访问和操作":["19.1"],"树中的节点":["19.1"],"body":["19.2","67.22","79.23","92.14"],"文本":["19.2"],"href":["19.2","19.3"],"标签的":["19.3"],"属性":["19.3","28.3","28.11","28.13","57.4","59.8","81.15","85.6","99.6","103.0","134.2"],"提供了丰富的功能和方法":["19.4"],"使开发者能够通过":["19.4"],"与网页进行交互和动态操作":["19.4"],"它允许你监听和响应用户与网页元素之间的交互":["20.0"],"鼠标点击":["20.1"],"网页中的一个按钮":["20.1"],"其中":["20.2","21.1","117.1"],"是要监听的事件名称":["20.2"],"例如":["20.2","41.5","84.6"],"click":["20.2","90.2","95.2"],"mouseover":["20.2"],"contextmenu":["20.5"],"当用户在元素上点击鼠标右键时触发":["20.5"],"通常用于显示自定义的上下文菜单":["20.5"],"wheel":["20.5"],"当用户使用鼠标滚轮时触发":["20.5"],"box":["20.5","69.3"],"document":["20.5","27.1","79.23"],"queryselector":["20.5"],"keyup":["20.6"],"有焦点触发":["20.7"],"当用户释放键盘上的按键时触发":["20.8"],"类似于":["20.8","91.11"],"在事件处理程序中":["20.9"],"可以通过事件对象访问有关事件的详细信息":["20.9"],"事件对象提供了许多属性和方法":["20.9"],"以帮助我们处理事件":["20.9"],"事件捕获":["20.10"],"可以通过将第三个参数设置为":["20.10"],"来启用事件捕获模式":["20.10"],"在事件捕获模式下":["20.10"],"change":["20.11","90.4","90.13","90.14"],"focus":["20.11"],"blur":["20.11"],"页面加载事件":["20.11"],"事件委托还可以解决动态添加或删除的子元素无法自动绑定事件监听器的问题":["20.12"],"因为委托是基于事件冒泡的":["20.12"],"所以后续添加的子元素也能够触发绑定在父元素上的事件监听器":["20.12"],"总结起来":["20.12"],"事件委托是一种利用事件冒泡机制":["20.12"],"在父元素上统一绑定事件监听器":["20.12"],"通过事件的目标元素来判断并处理子元素的事件":["20.12"],"提供了更简洁":["20.12"],"删除指定的子节点":["21.0"],"setattribute":["21.0"],"content":["21.2","67.7","92.6","121.3","121.16"],"或者":["21.2","108.6","122.13"],"existingelement":["21.3"],"插入到":["21.3"],"是相应的属性值":["22.1"],"获取元素的计算样式":["22.1"],"getcomputedstyle":["22.1"],"方法":["22.1","28.3"],"则添加它":["22.2"],"检查是否包含类名":["22.2"],"contains":["22.2"],"hasclass":["22.2"],"根据选择器获取匹配的第一个元素节点":["23.0"],"queryselectorall":["23.0"],"根据选择器获取匹配的所有元素节点":["23.0"],"通过标签名获取元素":["23.1"],"getelementsbytagname":["23.1"],"传入标签名":["23.1"],"修改元素的属性":["23.2"],"然后放到一个变量中":["24.0"],"管理非常方便":["24.0"],"创建了一个空的数组":["24.1"],"splice":["24.6","24.11","38.2"],"red":["24.7","30.10","139.3"],"count":["24.8","78.22","81.4","83.6"],"yellow":["24.9","146.2"],"orange":["24.9"],"brown":["24.10"],"取得最后一项":["24.12"],"取得第一项":["24.13"],"删除第一项":["24.14"],"purple":["24.17"],"插入两个值":["24.17"],"删除一个元素":["24.17"],"find":["24.18"],"index":["24.21","24.32","119.5","121.13","121.14"],"every":["24.27"],"someresult":["24.28"],"everyresult":["24.29"],"filterresult":["24.31"],"item":["24.31","24.32","38.5","66.6","66.7","119.4"],"执行流程":["25.1"],"语句在执行会先对":["25.1"],"isnan":["25.2"],"alert":["25.2","56.4"],"请输入一个合法的分数":["25.2"],"当成绩为100时":["25.2"],"奖励一辆bmw":["25.2"],"语句在执行时":["25.3"],"会依次将":["25.3"],"后的表达式和":["25.3"],"后的表达式进行全等比较":["25.3"],"会先对条件表达式进行判断":["25.5"],"如果结果为":["25.5","29.12"],"则执行循环体":["25.5"],"会先执行":["25.6"],"后的循环体":["25.6"],"执行完毕后":["25.6"],"会对while后的条件表达式进行判断":["25.6"],"c":["25.9","112.1","121.13"],"let":["25.9","30.11","35.2","37.5","100.4","103.2","103.3"],"prop":["25.9"],"数组":["25.11","81.6","134.1"],"函数等":["25.11"],"循环适用于遍历可迭代对象":["25.11"],"包括数组":["25.11"],"字符串":["25.11"],"map":["25.11","30.12","36.5","43.9","84.1","84.5"],"用来跳过当次循环":["25.12"],"循环语句也能实现一些简单的重复操作":["26.0"],"但是比较具有局限性":["26.0"],"此时我们就可以使用":["26.0"],"这是函数表达式写法":["26.2"],"匿名函数后面跟分号结束":["26.2"],"var":["26.2","46.2","47.2","121.10","134.3"],"函数不调用自己不执行":["26.3"],"调用函数的时候千万不要忘记加小括号":["26.3"],"函数是可以相互调用的":["26.3"],"实参2":["26.6"],"在函数调用的小括号里面是实参":["26.6"],"实际的参数":["26.6"],"形参和实参的执行过程":["26.6"],"如果实参的个数小于形参的个数":["26.7"],"多于的形参定义为undefined":["26.7"],"最终的结果就是":["26.7"],"nan":["26.7"],"形参可以看做是不用声明的变量":["26.7"],"返回的结果是最后一个值":["26.8"],"我们求任意两个数的":["26.8"],"加减乘数结果":["26.8"],"继续执行下次循环":["26.9"],"tip":["26.12","55.2","57.4","80.13","81.15"],"无需调用":["26.12"],"但它是一种解释性语言":["27.0"],"不需要编译":["27.0"],"通过":["27.2","43.0","79.9","79.20","118.2"],"script":["27.2","95.3","125.3"],"标签将":["27.2"],"title":["27.3","79.23","91.8","119.4"],"基":["27.3"],"属性引入":["27.4"],"标签如果带":["27.4"],"html":["27.6","86.3","87.6","92.14","121.13","121.14"],"alt":["27.7"],"就指向一个对象":["28.2"],"该对象内部包含两个键值对":["28.2"],"又称为两个":["28.2"],"成员":["28.2"],"第一个键值对是":["28.2"],"property":["28.3"],"它的":["28.3","89.1"],"键值":["28.3"],"可以是任何数据类型":["28.3"],"如果一个属性的值为函数":["28.3"],"通常把这个属性称为":["28.3"],"它可以像函数那样调用":["28.3"],"return":["28.3","36.6","37.5","43.5","43.6","78.18","80.13","81.4","81.5","81.14","83.3","83.4","84.2","84.3","84.5","85.2","85.4","85.5","100.3","101.6","107.4","111.11","121.3","121.6"],"然后":["28.4","41.5","134.2"],"的值变为":["28.4"],"这时不会对":["28.4"],"才能执行":["28.5"],"如果要解释为对象":["28.5"],"最好在大括号前加上圆括号":["28.5"],"因为圆括号的里面":["28.5"],"只能是表达式":["28.5"],"所以确保大括号只能解释为对象":["28.5"],"数字键可以不加引号":["28.7"],"因为会自动转成字符串":["28.7"],"后绑定":["28.8"],"也就是说":["28.8"],"你可以在任意时刻新增属性":["28.8"],"没必要在定义对象的时候":["28.8"],"key2":["28.9"],"defineproperty":["28.10"],"value":["28.10","48.2","90.4","90.31"],"configurable":["28.10"],"上面代码之中":["28.10"],"哪些属性是继承的":["28.11"],"就像上面代码中":["28.11"],"本身并没有":["28.11"],"但是":["28.11"],"native":["28.12"],"code":["28.12","111.7"],"没有任何输出":["28.12"],"继承了":["28.12"],"并没有":["28.13"],"对":["28.13","95.1"],"赋值等于创造了一个全局变量":["28.13"],"正确的写法应该是":["28.13"],"先定义对象":["28.13"],"中常用的运算符有":["29.1"],"算数运算符":["29.1"],"浮点数的进度问题":["29.2"],"浮点数值的最高精度是":["29.2"],"乘等于":["29.3"],"是旧值":["29.6"],"a1":["29.6"],"判等号":["29.7"],"判断两边值是否相等":["29.7"],"没有":["29.9","29.10"],"才会返回":["29.9","29.10"],"对于非布尔值进行与运算":["29.9"],"对于非布尔值或运算":["29.10"],"即圆括号中的表达式会第一个运算":["29.13"],"使用运算符时":["29.13"],"如果遇到拿不准的":["29.13"],"可以直接通过":["29.13"],"boolean":["30.1"],"floatnum3":["30.2"],"有效":["30.2"],"但不推荐":["30.2"],"floatnum":["30.2"],"包含":["30.3"],"值的变量跟未定义变量是有区别的":["30.3"],"jingleheimerschmidt":["30.4"],"字符串是不可变的":["30.4"],"意思是一旦创建":["30.4"],"非空字符串":["30.6"],"foosymbol":["30.7"],"nicholas":["30.9"],"colors":["30.10"],"利用string":["30.14"],"typeof":["30.15"],"只用这5种情况":["30.16"],"其他都为true":["30.16"],"当我们把变量赋值给一个变量时":["30.17"],"10值":["30.18"],"引用类型数据存放在堆中":["30.19"],"每个堆内存对象都有对应的引用地址指向它":["30.19"],"引用地址存放在栈中":["30.19"],"简单类型赋值":["30.20"],"是生成相同的值":["30.20"],"found":["31.1"],"不能定义名为eval":["31.1"],"和arguments":["31.1"],"的变量":["31.1"],"否则会导致语法错误":["31.1"],"声明提升":["31.1"],"lisi":["31.2","31.7"],"不会被提升":["31.3"],"try":["31.5"],"你可能以为会输出0":["31.6"],"实际上会输出5":["31.6"],"zhangsan":["31.7","59.3","90.8"],"比":["31.8"],"优先级高":["31.8"],"与服务器交换数据":["32.1"],"并且更新部分网页":["32.1"],"的原理简单来说通过":["32.1"],"构建请求所需的数据内容":["32.2"],"并通过":["32.2"],"实例对象":["32.3"],"常见的有":["32.4"],"post":["32.4","32.8","111.10"],"服务端地址":["32.4"],"如果不传递数据则为":["32.5"],"如果使用":["32.5"],"属性用于接收服务器端的响应结果":["32.6"],"举个例子":["32.6"],"request":["32.6","107.5"],"send":["32.8","123.5","123.11"],"else":["32.8","121.17"],"text":["32.9","75.13","77.1","78.18","119.4","146.1","157.9"],"xml":["32.9"],"请求成功后的回调函数":["32.9"],"components":["33.1","92.2","155.3","157.7"],"carousel":["33.1"],"即使外部函数已经执行完毕":["34.0"],"也可以继续访问":["34.0"],"closure":["34.1"],"在上述示例中":["34.2","41.3","41.5","44.4","45.1"],"通过捕获外部变量":["34.4"],"闭包可以持久化存储函数的状态":["34.4"],"并在每次调用时保持该状态":["34.4"],"这在处理异步操作":["34.4"],"定时器和事件处理等场景中特别有用":["34.4"],"实现函数柯里化":["34.4"],"可能会导致意外的行为":["34.5"],"闭包是":["34.5"],"中一项强大的特性":["34.5"],"originalobject":["35.1"],"使用扩展运算符":["35.1"],"newobj":["35.2","56.7"],"isarray":["35.2","40.4","43.7"],"key":["35.2","84.2","84.3","85.6","86.12"],"in":["35.2","85.3","85.5"],"用于乘以":["36.1"],"柯里化可能会增加代码的复杂性和理解难度":["36.2"],"过度的柯里化可能导致函数嵌套过深":["36.2"],"难以阅读和调试":["36.2"],"因此":["36.2","42.17","45.4"],"在使用柯里化时":["36.2"],"需要根据具体场景和需求权衡使用的程度":["36.2"],"concat":["36.4","40.3","43.7"],"nextargs":["36.5"],"mergedargs":["36.5"],"arg":["36.5"],"这种方法使用箭头函数和递归来实现柯里化":["36.6"],"scroll":["37.0","65.14"],"keypress":["37.0"],"mousemove":["37.0","37.4"],"等事件在触发时":["37.0"],"会不断地调用绑定在事件上的回调函数":["37.0"],"mousedown":["37.1","37.4"],"settimeout":["37.2","37.6"],"apply":["37.2"],"starttime":["37.3"],"curtime":["37.3"],"delay":["37.5"],"timer":["37.5"],"callnow":["37.6"],"第一次会立即执行":["37.6"],"以后只有事件执行后才会再次触发":["37.6"],"定义要进行的函数":["37.7"],"uniquearray":["38.1"],"每删除一个树":["38.2"],"保证j的值经过自加后不变":["38.2"],"length":["38.3","38.4","38.6","98.14"],"if":["38.3","38.4","38.6","40.4","80.4","80.8","80.9","92.15","121.6","138.2","141.3"],"has":["38.6","78.20"],"遇到异步任务时不会立马执行":["39.1"],"会将异步任务放入一个":["39.1"],"任务队列":["39.1"],"task":["39.1"],"requestanimationframe":["39.2"],"请求动画":["39.2"],"ui":["39.2","78.1"],"渲染":["39.2","39.3"],"宏任务":["39.3"],"任务队列执行":["39.3"],"先进先出":["39.3"],"的顺序":["39.3"],"循环第一遍":["39.3"],"先打印所有同步任务":["39.3"],"使用infinity":["40.1"],"无论多少层都将扁平化为一维数组":["40.1"],"优化":["40.2"],"res3":["40.2"],"变为":["41.0"],"或":["41.0","65.14","80.1","84.6","157.3"],"时":["41.0","50.1"],"会调用相应的回调函数":["41.0"],"在操作失败时调用":["41.1"],"error":["41.1","41.2","52.9","99.6","106.1","107.4","111.11"],"在回调函数中":["41.1"],"可以执行异步操作":["41.1"],"例如发送网络请求":["41.1"],"处理成功的结果":["41.2"],"处理失败的结果":["41.2"],"处理任意一个操作失败的结果":["41.3"],"第一个":["41.3","131.5"],"方法返回了一个新的":["41.3"],"并返回一个新的":["41.4"],"当":["41.4","105.0"],"中的所有":["41.4"],"实例都成功完成时":["41.4"],"新的":["41.4"],"实例的":["41.4"],"函数封装了一个基本的":["41.5"],"请求":["41.5","108.3"],"它接收三个参数":["41.5"],"请求的":["41.5"],"请求的方法":["41.5"],"和请求的数据":["41.5"],"函数内部创建了一个":["41.5"],"并使用传递的参数设置请求的相关属性":["41.5"],"方法发送请求":["41.5"],"当请求成功完成时":["41.5"],"原型是一个关键的概念":["42.1"],"在上面的例子中":["42.2","81.15","82.15","83.7","88.5"],"定义了一个构造函数":["42.2"],"它有一个属性":["42.2"],"和一个方法":["42.2"],"buddy":["42.4"],"golden":["42.4"],"retriever":["42.4"],"breed":["42.6","42.8"],"eating":["42.7","42.9"],"dog":["42.7","42.8","42.9","99.2"],"这意味着你可以在运行时更改对象的原型":["42.11"],"这种灵活性可以带来很多优势":["42.11"],"这意味着一个对象可以继承多个原型对象的属性和方法":["42.12"],"因为它可能会导致意外的行为和不稳定性":["42.15"],"如果需要扩展内建对象的功能":["42.15"],"因为所有对象实例共享同一个方法":["42.16"],"将数组缩减为单个值":["43.0"],"当前值":["43.1"],"currentvalue":["43.1"],"当前索引":["43.1"],"pre":["43.6"],"cur":["43.6","43.7"],"sum":["43.8"],"reduce":["43.8"],"如":["43.9","52.9","78.13"],"filter":["43.9"],"foreach":["43.9"],"全局作用域和局部作用域":["44.0"],"内部的":["44.4","56.5"],"存储在用户的计算机上":["45.0"],"每次用户请求与相同域名下的网页时":["45.0"],"浏览器都会将相关":["45.0"],"我们设置了两个":["45.1"],"00":["45.3"],"的存储容量都有限制":["45.4"],"通常在几":["45.4","46.6","47.6"],"kb":["45.4"],"左右":["45.4","46.6","47.6"],"存储大量数据可能会导致溢出或性能问题":["45.4"],"sessionstorage":["46.0"],"不同":["46.0","47.0"],"是对应的值":["46.1","47.1"],"存储的值必须是字符串类型":["46.1","47.1"],"username":["46.2","47.2","117.1","123.11"],"setitem":["46.3","47.3"],"中的所有数据":["46.5","47.5"],"的存储容量是有限的":["46.6","47.6"],"mb":["46.6","47.6"],"localstorage":["47.0"],"日至今的毫秒数":["48.1"],"gettimezoneoffset":["48.1"],"获取本地时间与":["48.1"],"utc":["48.1"],"时间之间的时差":["48.1"],"返回值为以分钟为单位的整数值":["48.1"],"setdate":["48.1"],"day":["48.1"],"设置日期的天数为指定的值":["48.1"],"参数为一个整数":["48.1"],"setfullyear":["48.1"],"year":["48.1"],"设置日期的年份为指定的值":["48.1"],"参数为一个四位数的整数":["48.1"],"sethours":["48.1"],"hour":["48.1"],"设置日期的小时数为指定的值":["48.1"],"第二个参数为月份":["48.3"],"到":["48.3"],"之间的整数值":["48.3"],"表示从一月到十二月":["48.3"],"实例化":["48.4"],"today":["48.5"],"类型":["49.0","111.8"],"舍弃小数部分":["49.5","49.6"],"整数部分加1":["49.5"],"整数部分不变":["49.6"],"求":["49.10"],"的":["49.10","56.3"],"求某数的平方根":["49.11"],"pi":["49.13","149.3"],"将返回":["50.1"],"min":["50.2"],"5e":["50.2"],"positive":["50.2"],"negative":["50.2"],"使用正则表达式来检查字符串是否符合特定模式":["51.1"],"搜索":["51.1"],"searching":["51.1"],"使用正则表达式在字符串中查找特定模式的出现位置":["51.1"],"替换":["51.1"],"replacing":["51.1"],"匹配前面的元素零次或一次":["51.5"],"定义字符类":["51.5"],"多行匹配":["51.6"],"允许":["51.6"],"和":["51.6","59.8","67.4","69.6","76.1","123.13","130.4","153.1"],"匹配单词字符":["51.7"],"w":["51.7","102.9"],"匹配非单词字符":["51.7"],"greeting":["51.9"],"subject":["51.9"],"u":["51.10","98.8"],"启用":["51.10"],"unicode":["51.10"],"匹配模式":["51.10"],"粘附模式":["51.10"],"日期":["51.11"],"数字等":["51.11"],"语法解析":["51.11"],"使用正则表达式解析特定的语法或格式":["51.11"],"无论是处理基本数据类型":["52.0"],"集合数据":["52.0"],"文本数据还是进行数学计算":["52.0"],"date":["52.1"],"日期时间":["52.1"],"math":["52.1","149.3","150.4"],"提供了一系列通用的方法":["52.2"],"查询":["52.3"],"查找":["52.4"],"替换等":["52.4"],"计算等":["52.5"],"格式化等":["52.7"],"计算平方根":["52.8"],"生成随机数等":["52.8"],"还有一些其他的内置对象":["52.9"],"object":["53.1"],"create":["53.1","56.14","99.6","108.2"],"and":["53.2"],"am":["53.2","57.1"],"unknown":["53.3"],"sound":["53.3"],"class":["54.0","67.22","80.5"],"使得类的定义和使用更加直观和方便":["54.0"],"使用构造函数创建对象实例":["54.1"],"person1":["54.1","59.3"],"john":["54.1","54.2"],"jane":["54.2","57.2"],"在面向对象编程中":["55.1"],"的属性和方法":["55.2"],"从而实现代码的重用和扩展":["55.2"],"多态性":["55.2"],"多态性允许不同的对象对相同的消息作出不同的响应":["55.2"],"它可以通过函数重载或方法覆盖来实现":["55.2"],"obj":["56.3"],"sayhi":["56.4"],"我的名字叫":["56.4"],"返回一个给定对象自身的所有":["56.5"],"symbol":["56.5"],"属性的数组":["56.5"],"getprototypeof":["56.5"],"返回指定对象的原型":["56.5"],"mergedobj":["56.6"],"不会影响原对象":["56.10"],"propnames":["56.12"],"symbols":["56.13"],"我们可以实现继承":["57.3"],"子对象可以继承父对象的属性和方法":["57.3"],"proto":["57.4"],"myfunction":["58.0"],"在这个函数内的代码会在严格模式下运行":["58.0"],"严格模式的一些特性和限制包括":["58.0"],"变量必须先声明后使用":["58.0"],"避免意外创建全局变量":["58.0"],"一个执行期上下文定义了一个函数执行时的环境":["59.1"],"每调用一次函数":["59.1"],"指向的是一个对象":["59.2"],"构造函数":["59.3"],"指向实例对象":["59.3"],"arrowfn":["59.4"],"常见的方法有":["59.5"],"语法":["59.7"],"fn1":["59.7","59.10"],"实现继承":["59.8"],"给":["59.8"],"father":["59.8"],"增加":["59.8"],"myname":["59.8"],"想要将this指向哪里":["59.10"],"函数实参1":["59.10"],"函数实参2":["59.10","59.14"],"备注":["59.10"],"指向":["59.12"],"所以":["59.12"],"第一个参数填":["59.12"],"或者填":["59.12"],"都可以":["59.12"],"严格模式中":["59.12"],"参数":["59.14"],"第一个参数":["59.14"],"在":["59.14","79.13","91.7","132.0"],"函数运行时":["59.14"],"指定":["59.14"],"只能选择全部标签":["65.2"],"pink":["65.3"],"md":["65.4","157.2"],"有标签名":["65.5"],"标签名必须写在前面":["65.5"],"id":["65.5","75.11","79.23","82.15","123.3"],"选择器":["65.5"],"理论上可以作为交集的条件":["65.5"],"但实际应用中几乎不用":["65.5"],"n":["65.6"],"color":["65.7","65.8","75.8"],"p1":["65.9"],"p2":["65.9"],"active":["65.11","141.4"],"链接被按下时的样式":["65.11"],"先找父亲的第":["65.12"],"个孩子":["65.12"],"再看是否为元素":["65.12"],"是成功":["65.12"],"否失败":["65.12"],"是直接找第":["65.12"],"属性且属性值以":["65.13"],"开头的":["65.13"],"style":["65.14","111.9","153.5"],"父级元素添加overflow":["65.14"],"将其属性值设置为":["65.14"],"hidden":["65.14","70.3"],"auto":["65.14","67.16"],"父级添加after伪元素":["65.14"],"它通过在父元素上设置":["66.0"],"display":["66.0","66.5","66.8","67.3","67.6","67.8","67.9"],"container":["66.1","66.5","66.8","67.2","67.6","67.8","67.9","67.10","67.11","67.22","152.0","152.1","152.2"],"一旦容器成为":["66.1"],"column":["66.2","67.4","67.12","113.1"],"垂直排列":["66.2"],"垂直逆向排列":["66.2"],"项目在交叉轴上的对齐方式":["66.3"],"项目靠交叉轴起始位置对齐":["66.3"],"不换行":["66.4","70.1"],"默认值":["66.4"],"换行":["66.4"],"scss":["66.8"],"多行项目平均分布在交叉轴上":["66.9"],"两端不留空白":["66.9"],"around":["66.9"],"两端留有空白":["66.9"],"导航栏布局":["66.10"],"direction":["66.10"],"row":["66.10","67.4"],"分割为网格单元格":["67.1"],"cells":["67.1"],"开发者可以更轻松地控制页面元素在网格中的位置和大小":["67.1"],"来实现":["67.2"],"属性来指定一个网格项的位置和跨度":["67.4"],"用于更精确地控制网页布局":["67.5"],"可以使用空格分隔值来创建多列或多行":["67.6"],"sidebar":["67.7"],"footer":["67.7"],"类似":["67.10"],"但允许分别指定列和行的间隔":["67.10"],"fr":["67.11"],"单位":["67.11"],"也可以设置为":["67.12"],"控制项目在行轴上的对齐方式":["67.13","67.15"],"grid":["67.13","67.14"],"控制网格项目在行轴上的对齐方式":["67.14"],"控制项目在列轴上的对齐方式":["67.15"],"网格线名称或":["67.16"],"值来指定位置":["67.16"],"我们可以创建灵活且复杂的网页布局":["67.17"],"第二":["67.18"],"列宽度自适应":["67.18"],"第三列占据剩余空间":["67.18"],"rows":["67.18","67.19"],"大于768px时":["67.20"],"使用两列布局":["67.20"],"布局在实际应用中非常强大":["67.21"],"div":["67.22","78.21","79.23","81.3","81.5","83.4","84.5","86.6","87.4","90.12","92.16"],"header":["67.22","67.23","90.30","92.6"],"nav":["67.23","67.24","97.2"],"navigation":["67.23","67.24"],"布局是":["67.26"],"产品展示页面等":["67.27"],"flexbox":["67.27","67.33"],"适用于一维布局":["67.28"],"支持在主轴上对齐网格项":["67.28"],"布局时":["67.29"],"属性来改变网格项的顺序":["67.30"],"但在旧版本的浏览器中可能存在兼容性问题":["67.31"],"为了确保网页在不同浏览器中正常显示":["67.31"],"当网页中包含大量网格项和复杂的布局时":["67.32"],"可能会导致渲染性能下降":["67.32"],"布局":["67.33"],"实现更复杂的布局需求":["67.33"],"结合":["67.33"],"类选择器":["68.0"],"元素选择器":["68.0"],"400px":["69.1","69.3","138.1"],"200px":["69.1"],"background":["69.1","72.2"],"left":["69.5","136.6"],"top":["69.5"],"margin":["69.6"],"水平居中":["69.7"],"align":["69.7"],"nowrap":["70.1"],"改变元素为box弹性盒子":["70.2"],"line":["70.2"],"clamp":["70.2"],"限定行数":["70.2"],"不是一个规范的属性":["70.2"],"没有在css规范草案中":["70.2"],"position":["70.3"],"relative":["70.3"],"overflow":["70.3"],"piece":["71.0"],"垂直滚动条和水平滚动条交汇的部分":["71.0"],"f00":["72.1"],"朝右的三角形":["72.1"],"60px":["72.1"],"image":["72.2","110.5"],"url":["72.2","108.4","111.10"],"图片路径":["72.2"],"videoplayer":["73.0"],"ogg":["73.2"],"webm":["73.3"],"规定了多媒体资源":["73.5"],"可以是多个":["73.5"],"定义多种媒体资源":["73.6"],"比如":["73.6","91.3"],"自动播放":["73.7"],"muted":["73.7"],"是否静音":["73.7"],"loop":["73.7"],"psuse":["73.8"],"暂停":["73.8"],"demo":["73.10"],"horse":["73.10"],"movie":["73.11"],"mp4":["73.11"],"type":["73.11","75.13","78.18","91.2","91.8","121.16"],"您的浏览器不支持":["73.11"],"html5":["73.11","74.1"],"标签":["73.11","76.3"],"language":["74.0"],"是一种用于创建网页和网页应用程序的标记语言":["74.0"],"版本是":["74.1"],"文档的根元素":["74.1"],"包含整个网页的内容":["74.1"],"头部部分":["74.1"],"为最高级别的标题":["74.2"],"为最低级别":["74.2"],"段落标签":["74.2","76.1"],"用于定义段落文本":["74.2","76.1"],"锚链接标签":["74.2"],"多媒体支持":["74.3"],"video":["74.3"],"audio":["74.3"],"无障碍性":["74.4"],"表单验证":["74.4"],"框架等":["74.4"],"users":["74.5"],"should":["74.5"],"take":["74.5"],"into":["74.5"],"account":["74.5"],"even":["74.5"],"when":["74.5"],"skimming":["74.5"],"optional":["74.5"],"following":["74.6"],"usage":["74.6"],"examples":["74.6","155.6"],"although":["74.6"],"can":["74.6"],"handle":["74.6"],"both":["74.6"],"many":["74.6"],"other":["74.6"],"标记":["75.0"],"为了避免这种情况":["75.0"],"这是h3级别的标题":["75.1"],"h4":["75.1"],"www":["75.3","76.4","108.3"],"jpg":["75.4","118.3"],"列表项2":["75.5","75.6"],"包含一段文本":["75.7"],"blue":["75.8"],"表头2":["75.9"],"这是另一行文本":["75.10"],"checkbox":["75.11"],"input":["75.13","78.18","86.14"],"about":["75.14","87.3","118.7"],"关于我们":["75.14"],"您的浏览器不支持视频播放":["75.15"],"em":["76.2"],"强调标签":["76.2"],"分别表示强调和斜体":["76.2"],"img":["76.2","93.6"],"从而形成嵌套的关系":["76.3"],"https":["76.4","80.6","80.11"],"tag":["76.5"],"的标签上添加下面的属性":["77.1"],"autocomplete":["77.1"],"off":["77.1"],"的魔法":["78.0"],"从而使得构建动态":["78.1"],"变得更加直观和简洁":["78.1"],"将被转换为以下":["78.2"],"也可以是自定义的":["78.4"],"组件":["78.4","157.7"],"的形式":["78.5"],"h1":["78.6"],"syntax":["78.6"],"可复用的组件":["78.9"],"从而使得代码结构更加清晰和易于维护":["78.9"],"jsx":["78.10","78.12","80.5"],"welcome":["78.10","78.14","78.15","85.2","85.4"],"extends":["78.11","80.5","81.14","99.2"],"的条件语句":["78.13"],"back":["78.14","78.15"],"比如商品列表":["78.16"],"product":["78.17"],"render":["78.18","80.13","81.4","81.14","83.3","83.4","84.5"],"form":["78.18","108.3"],"handlefahrenheitchange":["78.19"],"mounted":["78.20"],"setcount":["78.22"],"usestate":["78.22"],"handleincrement":["78.22","83.5","83.6"],"库":["79.0","107.1","144.1"],"virtual":["79.1"],"dom":["79.1","79.24","82.12","85.6","86.7"],"虚拟":["79.1"],"技术":["79.1"],"复用和测试":["79.3"],"开发者可以将大型应用程序拆分为小的":["79.3"],"树的差异":["79.4"],"找出需要更新的部分":["79.4"],"并最小化地更新真实":["79.4"],"子组件无法直接修改父组件的数据":["79.5"],"router":["79.6","82.4","87.6"],"用于实现前端路由":["79.6"],"组件可以接受输入的数据":["79.8"],"称为":["79.8"],"我们可以以一种更直观的方式描述组件的结构和样式":["79.9"],"父组件可以向子组件传递数据或方法":["79.10"],"这种单向数据流的机制使得":["79.10"],"会自动重新渲染组件以反映最新的状态":["79.11"],"状态是类组件中的一个特殊对象":["79.11"],"我们可以执行特定的操作":["79.12"],"如初始化组件":["79.12"],"发送网络请求":["79.13","80.11"],"处理用户输入等":["79.13"],"和三元表达式":["79.14"],"来控制组件的渲染逻辑":["79.14"],"并将数组的每个元素渲染成相应的组件":["79.15"],"列表渲染允许动态地渲染多个相同类型的组件":["79.15"],"提供了一些方便的组件来处理表单数据":["79.16"],"允许将共享的状态提升到共同的父组件":["79.17"],"实现组件之间的数据共享":["79.17"],"可以增强组件的功能":["79.18"],"使得代码更具可复用性和灵活性":["79.18"],"一层层传递":["79.19"],"上下文提供了一种便捷的方式来在组件之间共享数据":["79.19"],"操作":["79.22"],"的扩展库":["79.22"],"mycontainer":["79.23"],"client":["79.24"],"app":["79.24","86.4","88.3","143.2"],"并进行必要的操作":["80.0"],"理解":["80.0"],"shouldcomponentupdate":["80.1","84.6"],"在组件更新之前调用":["80.1"],"返回":["80.1"],"用于控制组件是否需要重新渲染":["80.1"],"bind":["80.3"],"setstate":["80.3"],"prevstate":["80.3","80.4","80.8","83.5"],"nextprops":["80.4","80.8","80.9"],"根据props更新state":["80.4","80.8"],"mycomponent":["80.5","81.14"],"fetch":["80.6","80.11"],"data":["80.6","86.16","97.2","108.5","111.11","111.12"],"nextstate":["80.9"],"根据新的props或state判断是否需要重新渲染":["80.9"],"someprop":["80.9"],"获取更新前的dom快照":["80.10"],"snapshot":["80.10"],"somedomelement":["80.10"],"scrolltop":["80.10"],"props":["80.11","81.7","81.8","81.9"],"总结":["80.13"],"这些数据被称为":["81.0"],"在组件的生命周期中是只读的":["81.1"],"意味着组件本身无法修改接收到的":["81.1"],"对象等":["81.6"],"isactive":["81.9"],"yes":["81.9"],"no":["81.9"],"使用组件并传递props":["81.10"],"的传递是自上而下的":["81.12"],"的值":["81.13"],"component":["81.14","82.11","82.13","82.14","86.17","87.7","87.10","92.2"],"getelementbyid":["81.15"],"root":["81.15","123.2"],"如果没有传递":["81.15"],"将使用默认值":["81.15"],"spa":["82.1"],"在用户体验和性能方面有很大的优势":["82.1"],"在传统多页应用中":["82.1"],"每次用户切换页面都会导致整个页面的重新加载":["82.1"],"route":["82.3"],"react":["82.4","82.5"],"加载对应的数据":["82.5"],"提供了":["82.6","82.7"],"link":["82.6","87.6","157.7","157.9"],"history":["82.7","93.4"],"对象来管理导航历史记录":["82.7"],"bash":["82.8","87.2"],"install":["82.8","102.10","157.3"],"我们就可以在项目中开始使用它了":["82.9"],"以下是使用":["82.9"],"path":["82.11","82.13","82.14","87.9","123.14"],"exact":["82.11","82.13","82.14"],"reactdom":["82.12"],"user":["82.15","85.2","85.3","85.4","123.2"],"export":["82.15","85.3","85.4","111.12"],"default":["82.15","91.2"],"组件来创建导航链接":["82.15"],"从而实现页面之间的切换":["82.15"],"允许我们在组件内部保存数据":["83.0"],"发生变化时":["83.1"],"会重新渲染组件":["83.1"],"并根据新的":["83.1"],"updated":["83.5","90.28"],"错误的方式":["83.6"],"直接修改state的值":["83.6"],"onclick":["83.7"],"increment":["83.7"],"我们将":["83.7"],"提升到了":["83.7"],"传递给":["83.7"],"这样":["83.7","88.3"],"列表渲染是一种常见的技术":["84.0"],"用于动态地生成列表元素":["84.0"],"的数组和":["84.1"],"listitems":["84.4"],"的性能优化技术":["84.6"],"purecomponent":["84.6"],"来避免不必要的重新渲染":["84.6"],"使用箭头函数":["84.6"],"条件渲染是一种根据特定条件决定是否渲染组件或组件的一部分的技术":["85.0"],"或三元表达式来实现条件渲染":["85.1"],"条件渲染允许我们根据不同的条件来显示或隐藏组件":["85.1"],"或者根据不同的状态来渲染不同的内容":["85.1"],"please":["85.2","85.3","85.5"],"to":["85.3","85.5","87.8"],"continue":["85.3","85.5"],"以避免额外的":["85.6"],"节点":["85.6"],"如果返回的元素列表可能会发生变化":["85.6"],"框架":["86.1","120.1"],"它允许您将应用程序划分为可复用的组件":["86.1"],"直接引入vue":["86.3"],"on":["86.7","121.4","148.2"],"用于监听":["86.7"],"visible":["86.9"],"isvisible":["86.10"],"items":["86.12","157.9","157.10"],"handleclick":["86.13"],"me":["86.13"],"message":["86.16","90.5","118.8","121.3","121.6"],"数据更新后":["86.18"],"在数据更新之后调用":["86.18"],"发生在重新渲染之后":["86.18"],"可以在此处执行依赖于更新后":["86.18"],"的操作":["86.18"],"beforedestroy":["86.18"],"销毁前":["86.18"],"在实例销毁之前调用":["86.18"],"可以在此处进行清理工作":["86.18"],"的路由功能":["87.1"],"学习":["87.1"],"项目中":["87.2"],"使用npm":["87.2"],"template":["87.4","90.0","90.12","92.13","92.14","92.17"],"home":["87.5"],"beforeeach":["87.8"],"category":["87.9"],"lazy":["87.10"],"重定向":["87.12"],"应用中的共享状态":["88.0"],"state":["88.0"],"中唯一允许修改状态的地方":["88.1"],"它们类似于事件":["88.1"],"每个":["88.1"],"mutation":["88.1"],"都有一个字符串的事件类型和一个回调函数":["88.1"],"在回调函数中进行实际的状态修改操作":["88.1"],"actions":["88.1"],"动作":["88.1"],"的繁琐操作":["88.2"],"可预测性":["88.2"],"由于状态的变更必须通过":["88.2"],"导入":["88.3"],"并将其关联到":["88.3"],"实例中":["88.3"],"整个应用的组件都可以通过":["88.3"],"来访问":["88.3"],"decrement":["88.4"],"组件中的代码":["88.4","88.5","88.6"],"methods":["88.4","88.5"],"我们在":["88.5"],"中新增了一个":["88.5"],"会建立一个与该属性的依赖关系":["89.1"],"每个依赖关系都会跟踪哪些":["89.1"],"watcher":["89.1"],"观察者":["89.1"],"依赖于这个属性":["89.1"],"响应式触发":["89.1"],"reactivity":["89.1","89.2"],"trigger":["89.1","89.2"],"当数据对象的属性被修改时":["89.1"],"当数据对象的属性被访问或修改时":["89.2"],"会捕获这些操作":["89.2"],"并触发相应的依赖":["89.2"],"这使得":["89.2"],"能够更精确地追踪数据的依赖关系":["89.2"],"从而避免不必要的更新":["89.2"],"优化与缓存":["89.2"],"引入了许多性能优化策略":["89.2"],"才能于":["90.0"],"中使用":["90.0"],"也不用写":["90.0"],"compositionapi":["90.1"],"新特性都应该写在这个函数内部":["90.1"],"组件中所用到的":["90.1"],"count3":["90.2"],"changemsg":["90.4"],"创建一个自定义的":["90.7"],"并对其依赖项跟踪和更新触发进行显式控制":["90.7"],"需求":["90.7"],"ref":["90.9","90.15"],"change1":["90.10"],"test1":["90.10"],"按钮":["90.13","90.14"],"vue":["90.15","92.13","92.14","92.17","111.6"],"参数二":["90.16"],"数据改变时触发的回调函数":["90.16"],"newval":["90.16","90.17"],"oldval":["90.16","90.17"],"name2":["90.20"],"不用直接指定要监视的数据":["90.21"],"回调函数中使用的哪些响应式数据就监视哪些响应式数据":["90.21"],"用于清除":["90.22"],"effect":["90.22"],"侦听器会被链接到该组件的生命周期":["90.23"],"并在组件卸载时自动停止":["90.23"],"sync":["90.24"],"组合式api":["90.25"],"是没有":["90.25"],"update":["90.27","113.2"],"这个周期方法被移除":["90.27"],"beforeupdate":["90.28"],"更新之前":["90.28"],"为":["90.29"],"modifiers":["90.29"],"包含修饰符":["90.29"],"的对象":["90.29"],"onresize":["90.31"],"window":["90.31"],"innerwidth":["90.31"],"bus":["91.1"],"可以实现任意组件通信":["91.1"],"pubsub":["91.1"],"发布订阅模式实现任意组件通信":["91.1"],"vuex":["91.1"],"接受的数据类型":["91.2"],"默认参数":["91.2"],"接受默认数据":["91.2"],"事件可以让用户与网页进行交互":["91.3"],"handler1":["91.4"],"我要传递多个参数":["91.4"],"方法执行":["91.5"],"传递一个数组":["91.5"],"数组元素即为将来组件需要触发的自定义事件类型":["91.5"],"此方执行会返回一个":["91.5"],"emit":["91.5"],"方法用于触发自定义事件":["91.5"],"当点击按钮的时候":["91.5"],"事件回调内部调用":["91.5"],"方法去触发自定义事件":["91.5"],"写法没有":["91.6"],"那么在":["91.6"],"想实现全局事件的总线功能就有点不现实啦":["91.6"],"vue3":["91.7","95.1","111.6"],"中一个组件可以通过使用多个":["91.7"],"让父子组件多个数据同步":["91.7"],"下方代码相当于给组件":["91.7"],"success":["91.8"],"size":["91.8"],"small":["91.8"],"标题":["91.8"],"但是需要注意":["91.9"],"如果想让父组件获取子组件的数据或者方法需要通过":["91.9"],"defineexpose":["91.9"],"对外暴露":["91.9"],"方法用于提供数据":["91.10"],"此方法执需要传递两个参数":["91.10"],"分别提供数据的":["91.10"],"也是集中式管理状态容器":["91.11"],"b替换":["91.12"],"填入组件b部分的结构":["91.12"],"作用域插槽":["91.12"],"可以理解为":["91.12"],"子组件数据由父组件提供":["91.12"],"但是子组件内部决定不了自身结构与外观":["91.12"],"样式":["91.12"],"子组件":["91.12"],"代码如下":["91.12"],"更加友好":["92.5"],"在使用":["92.5"],"right":["92.6","136.6"],"fancybutton":["92.10"],"msg":["92.12","92.16","123.11"],"插槽里的节点":["92.13"],"异步组件":["92.13"],"自定义classname等等":["92.14"],"comp":["92.15"],"v":["92.15","95.4"],"选项已移除":["92.17"],"父组件":["92.17"],"modelvalue简写为v":["92.17"],"cli":["93.2"],"babel":["93.4","111.7"],"alongside":["93.4"],"linter":["93.4"],"formatter":["93.4"],"config":["93.4","107.4","108.4","111.11"],"动态导入":["93.5"],"hmr":["93.5"],"速度快到惊人的":["93.5"],"构建的项目模板":["93.6"],"latest":["93.7"],"位贡献者":["94.1"],"内存减少54":["94.2"],"使用proxy代替defineproperty实现数据响应式":["94.2"],"provide与inject":["94.3"],"新组件":["94.3"],"fragment":["94.3"],"的改进":["95.1"],"不好定义了需要在开启一个":["95.3"],"也可以使用es6的字符串模板":["98.1"],"decimal":["98.2"],"使用构造函数":["98.3"],"创造的对象不是布尔值":["98.3"],"第二种方式是使用数组泛型":["98.4"],"当赋值或访问一个已知索引的元素时":["98.5"],"会得到正确的类型":["98.5"],"字符串枚举":["98.6"],"warning":["98.8"],"test":["98.9","123.2"],"num1":["98.9"],"throw":["98.10"],"只会抛出异常没有返回值":["98.11"],"定义一个一个函数得到一个数字或字符串值的长度":["98.12"],"getlength":["98.12"],"strlength2":["98.14"],"可以定义类":["99.0"],"基本上":["99.0"],"es6的class可以看作只是一个":["99.0"],"我":["99.1"],"了":["99.1"],"创建类的实例":["99.1"],"cry":["99.2"],"可以让你定义的变量":["99.4"],"内部访问":["99.4"],"代表定义的变量私有的只能在内部访问":["99.5"],"zs":["99.6"],"静态函数":["99.8"],"同样也是不能通过this":["99.8"],"去调用":["99.8"],"也是通过类名去调用":["99.8"],"constructor":["99.9"],"super":["99.11"],"的类型":["100.0"],"fn":["100.2","103.7"],"str":["101.2","121.8","121.10"],"树哥":["101.5"],"interface":["101.7","103.1"],"len":["101.7"],"它是":["102.1"],"ts属于":["102.2"],"强类型":["102.2"],"语言":["102.2"],"ts不能直接执行":["102.3"],"需要先编译成":["102.3"],"支持最新的javascript新特特性":["102.5"],"typescript就并不是那么顺畅":["102.6"],"ts":["102.7","111.8"],"indexts":["102.7"],"升成tsconfig":["102.7"],"和行为":["103.0"],"必须与接口保持一致":["103.1"],"any":["103.6","105.0","111.8"],"类":["104.0"],"严格模式下":["104.1"],"不可以":["104.1"],"bigobject":["104.1"],"表达式值为":["105.0"],"类型的时候":["105.0"],"生成一个错误":["105.0"],"alwaysstrict":["105.0"],"以严格模式检查每个模块":["105.0"],"并在每个文件里加入":["105.0"],"use":["105.0","111.11","123.14"],"额外的检查":["105.0"],"nounusedlocals":["105.0"],"有未使用的变量时":["105.0"],"抛出错误":["105.0"],"nounusedparameters":["105.0"],"有未使用的参数时":["105.0"],"noimplicitreturns":["105.0"],"并不是所有函数里的代码都有返回值时":["105.0"],"nofallthroughcasesinswitch":["105.0"],"abc":["106.1"],"不能将类型":["106.1"],"s1":["106.2"],"可以用在浏览器和":["107.1"],"axios":["107.2"],"在发送请求之前做些什么":["107.4"],"对请求错误做些什么":["107.4"],"提出了要求":["107.5"],"但没有收到答复":["107.5"],"是浏览器中xmlhttprequest的一个实例":["107.5"],"请求头设置":["108.1"],"一般可以在请求头中携带公共的参数":["108.1"],"baseurl":["108.2"],"application":["108.3"],"urlencoded":["108.3"],"请求超时":["108.4"],"系统已存在相同数据":["108.4"],"imort":["108.6"],"getaction":["108.6"],"getaction方法所在的文件路径":["108.6"],"省时又省力他不香吗":["108.7"],"前端架构带你":["108.7"],"local":["109.1"],"比较两个版本的差异":["109.7"],"以前者为基准看后者的变化":["109.7"],"表示最后一次":["109.7"],"commit":["109.7"],"对应的版本":["109.7"],"查看所有分支的版本历史":["109.8"],"all":["109.8"],"以图形形式展示版本历史":["109.8"],"强制删除本地分支":["109.12"],"分":["109.14"],"做":["109.14"],"以便把":["109.14"],"合":["109.14"],"到当前分":["109.14"],"amend":["109.16"],"合并":["109.16"],"删除远程仓库别名":["109.18"],"克隆远程仓库指定分支到本地":["109.19"],"等同于推送一个空的本地分支到远程分支":["109.21"],"表示删除指定的远程分支":["109.21"],"等同于":["109.21"],"scm":["110.1"],"bush":["110.2"],"here":["110.2"],"email":["110.3"],"xxxx":["110.3"],"xxx":["110.4"],"直接按三次回车":["110.4"],"ssh个人设置":["110.5"],"commitlint":["111.2"],"来统一提交规范":["111.2"],"preinstall":["111.2"],"pnpm":["111.3"],"内部潜在的":["111.4"],"bug":["111.4"],"极大的优化了性能":["111.4"],"扩展了使用场景":["111.4"],"被誉为":["111.4"],"最先进的包管理工具":["111.4"],"对象不能出现重复key":["111.6"],"recommended":["111.6"],"vue3语法规则":["111.6"],"plugin":["111.6"],"essential":["111.6"],"ts语法规则":["111.6"],"typescript":["111.6"],"要为特定类型的文件指定处理器":["111.6"],"查找违规风格指南":["111.7"],"该解析器允许使用eslint校验所有babel":["111.7"],"io":["111.8"],"unused":["111.8"],"vars":["111.8"],"禁止定义未使用的变量":["111.8"],"prefer":["111.8"],"expect":["111.8"],"禁止使用":["111.8"],"ignore":["111.8"],"explicit":["111.8"],"全局样式文件中没有办法使用":["111.9"],"变量":["111.9"],"因此需要给项目中引入全局变量":["111.9"],"variable":["111.9"],"创建一个":["111.9"],"system":["111.10"],"系统管理员":["111.10"],"用户登录接口":["111.10"],"login":["111.10"],"请求地址":["111.10"],"请求方式":["111.10"],"response":["111.10","111.11"],"响应拦截器":["111.11"],"处理网络错误":["111.11"],"logout":["111.12"],"登录接口":["111.12"],"reqlogin":["111.12"],"qrouter":["112.0"],"加上这一句":["112.0"],"找指定路径下的文件":["112.0"],"d":["112.1"],"下面列出了一些常用的":["113.0"],"向表中添加一个新的列":["113.1"],"set":["113.2","152.1","156.3"],"identified":["113.3"],"by":["113.3"],"password":["113.3","123.2"],"创建一个新用户":["113.3"],"alter":["113.3"],"的数据类型":["114.0"],"每个数据类型都有特定的存储需求和可接受的值范围":["114.0"],"bigint":["114.1"],"double":["114.2"],"双精度浮点数":["114.2"],"7976931348623157e":["114.2"],"timestamp":["114.4"],"存储时间戳":["114.4"],"范围从":["114.4"],"mysql":["114.5"],"还提供了其他特定用途的数据类型":["114.5"],"如二进制类型":["114.5"],"用户可以对数据库进行各种操作":["115.0"],"包括创建":["115.0"],"读取":["115.0"],"更新和删除数据":["115.0"],"数据库的优势包括":["115.0"],"索引和缓存等技术":["115.1"],"提供了快速的数据读写性能":["115.1"],"丰富的功能":["115.1"],"mysql提供了丰富的功能和工具":["115.1"],"包括存储过程":["115.1"],"触发器":["115.1"],"插入数据":["117.0"],"查询数据":["117.0"],"database":["117.2","123.2"],"将":["117.3","117.5","117.6","123.14"],"datatype":["117.4"],"column2":["117.4"],"value2":["117.5","117.7"],"where":["117.6","117.7","117.8","123.3"],"condition":["117.6","117.7","117.8"],"开放":["118.0"],"极简的":["118.0"],"query":["118.2"],"可以获取到客户端发送过来的查询参数":["118.2"],"目录下的静态资源":["118.3"],"localhost":["118.3"],"images":["118.3"],"bg":["118.3"],"向外导出路由对象":["118.4"],"module":["118.4"],"exports":["118.4","122.8"],"注册路由模块":["118.4"],"在注册路由之前注册中间件":["118.5"],"错误级别中间件除外":["118.5"],"中间件可连续调用多个":["118.5"],"调用了第2个全局中间件":["118.6"],"page":["118.7"],"发生了错误":["118.8"],"listen":["118.8"],"server":["118.8"],"running":["118.8"],"require":["118.10"],"主要在服务器端进行配置":["118.11"],"客户端浏览器无须做任何额外的配置":["118.11"],"即可请求开启了":["118.11"],"ccess":["118.12"],"对额外的请求头进行声明":["118.12"],"否则这次请求会失败":["118.12"],"viewport":["118.14"],"在浏览器与服务器正式通信之前":["118.15"],"浏览器会先发送":["118.15"],"option":["118.15"],"init":["119.1"],"它不会像网络浏览器那样解释结果":["119.2"],"具体来说":["119.2"],"它不会生成视觉渲染":["119.2"],"top250":["119.3"],"each":["119.4"],"star":["119.4"],"info":["119.4"],"bd":["119.4"],"pianista":["119.6"],"sull":["119.6"],"oceano":["119.6"],"p2574551676":["119.6"],"三傻大闹宝莱坞":["119.6"],"idiots":["119.6"],"p579729551":["119.6"],"放牛班的春天":["119.6"],"les":["119.6"],"choristes":["119.6"],"p2884280708":["119.6"],"机器人总动员":["119.6"],"wall":["119.6"],"运行时环境":["120.1"],"基于":["120.1"],"express":["120.1"],"可以快速构建":["120.1"],"web":["120.1","123.12"],"这是因为":["120.2"],"采用的是异步的":["120.2"],"非阻塞的模型":["120.2"],"这里所谓的":["120.2"],"可能会出现服务不可用的情况":["120.3"],"写文件":["121.1"],"不存在则创建":["121.1"],"存在则覆盖原有内容":["121.1"],"wx":["121.1"],"文件存在打开失败":["121.1"],"failed":["121.3","121.6"],"可写流打开了":["121.4"],"可写流关闭了":["121.4"],"要读取一个可读流中的数据":["121.4"],"要为可读流绑定一个data事件":["121.4"],"data事件绑定完毕自动开始读取数据":["121.4"],"err":["121.6"],"流关闭了":["121.7"],"通过ws向文件中输出内容":["121.7"],"因此大小一旦确定就不能修改":["121.8"],"常用方法":["121.8"],"encoding":["121.8"],"直接提供完整的路径":["121.9"],"从而防止路径动态拼接的问题":["121.9"],"renamesync":["121.10"],"监视文件更改":["121.10"],"watchfile":["121.10"],"filename":["121.10"],"listener":["121.10"],"hello前端":["121.10"],"buf":["121.10"],"buffer":["121.10"],"官方提供的":["121.11","121.15"],"readfile":["121.12"],"fullname":["121.13"],"设置":["121.16"],"响应头":["121.16"],"模块的内部数据":["122.2"],"实现是私有的":["122.2"],"实现按需加载":["122.3"],"第三方模块":["122.5"],"只能在当前模块内被访问":["122.6"],"指向的对象":["122.7"],"默认情况下":["122.7"],"是对外的接口":["122.8"],"提高模块加载效率":["122.9"],"按确切的文件名加载":["122.11"],"补全":["122.11","122.21"],"tools":["122.12"],"则":["122.12","122.23"],"会按以下顺序查找":["122.12","122.22"],"文件":["122.13","157.2"],"的内置模块仅提供了一些底层的":["122.15"],"现在也有其他的包管理工具":["122.16"],"版本号":["122.18"],"入口文件":["122.18"],"核心代码":["122.18"],"用户自定义模块":["122.19"],"会按顺序分别尝试加载以下的文件":["122.21"],"按照确切的文件名进行加载":["122.21"],"入口不存在或无法解析":["122.23"],"将会试图加载目录下的":["122.23"],"快捷方式":["123.3"],"页面最终在浏览器里生成":["123.6"],"缺点":["123.6"],"不利于":["123.6"],"seo":["123.6"],"完整的":["123.6"],"交互性强":["123.7"],"无需考虑":["123.7"],"status":["123.11"],"done":["123.11"],"从":["123.11"],"取数据":["123.11"],"token":["123.12"],"是真正的用户信息":["123.13"],"加密后的字符串":["123.13"],"是安全性相关部分":["123.13"],"保证":["123.13"],"安全性":["123.13"],"三者使用":["123.13"],"分隔":["123.13"],"authorization":["123.14"],"字段":["123.14"],"字符串发送到服务器进行身份认证":["123.14"],"服务器可以通过":["123.14"],"中间件将客户端发送过来的":["123.14"],"解析还原成":["123.14"],"unless":["123.14"],"指定哪些接口无需访问权限":["123.14"],"cache":["124.0"],"clean":["124.0"],"检查过时的依赖项":["124.0"],"outdated":["124.0","125.3"],"安装全局依赖项":["124.0"],"包管理器":["125.0"],"允许开发者轻松地安装":["125.1"],"更新":["125.1","126.6"],"也会自动安装":["125.2"],"你可以通过在终端中运行以下命令来检查是否已安装":["125.2"],"检查过时的包":["125.3"],"run":["125.3"],"运行在":["125.3"],"在创建项目时":["125.4"],"可以提供一些信息":["125.4"],"如项目名称":["125.4"],"当其他开发者获得你的项目时":["125.5"],"他们可以使用":["125.5"],"命令":["125.6"],"你可以将自己的包发布到":["125.6"],"官方网站":["126.1"],"shell":["126.2"],"可以创建一个或多个":["126.3"],"命令生成":["126.4"],"并包含了你的包的基本信息":["126.4"],"publish":["126.5"],"这将会将你的包上传到":["126.5"],"package":["126.6","126.7"],"json":["126.6"],"npm":["127.1","157.3"],"全局安装":["127.1"],"打开终端并运行以下命令":["127.1"],"是你要添加的包的名称":["127.2"],"移除依赖项":["127.2"],"如果你想移除不再需要的依赖项":["127.2"],"remove":["127.2"],"它提供了许多":["130.1"],"访问":["130.3"],"轴和":["130.3"],"2d":["130.4","144.1"],"webgl":["130.4"],"它们都通过特定的方法和属性来控制视觉效果":["130.4"],"可以简单地绘制圆形":["130.5"],"矩形":["130.5"],"线条等图形":["130.5"],"在实现过程中":["130.6","130.7"],"您可以使用":["130.6"],"来监控用户的交互":["130.6"],"从而创建动画效果":["130.7"],"您可以通过原生":["130.7"],"translate":["131.0"],"图像平移":["131.0"],"上面代码会显示一个顺时针倾斜":["131.1"],"如果缩放因子为":["131.2"],"就表示图像没有任何缩放":["131.2"],"如果为":["131.2"],"则表示方向翻转":["131.2"],"下面是一个例子":["131.4"],"只有源图像外的目标图像部分会被显示":["132.1"],"lighter":["132.1"],"显示源图像":["132.1"],"目标图像":["132.1"],"copy":["132.1"],"忽略目标图像":["132.1"],"xor":["132.1"],"getcontext":["133.1"],"当前浏览器不支持canvas":["133.1"],"请下载最新的浏览器":["133.1"],"位置的直线":["133.2"],"linewidth":["133.2"],"设置或返回当前的线条宽度":["133.2"],"linejoin":["133.2"],"getlinedash":["134.1"],"返回一个数组":["134.1"],"表示虚线里面线段和间距的长度":["134.1"],"setlinedash":["134.1"],"用于指定虚线里面线段和间距的长度":["134.1"],"context":["134.1"],"beginpath":["134.1","138.2"],"fillstyle":["134.2"],"fillrect":["134.2"],"定义了渐变样式":["134.2"],"以后":["134.2"],"将这个样式指定给":["134.2"],"就会生成以这个样式填充的矩形区域":["134.2"],"该方法的返回值是一个":["134.3"],"canvaspattern":["134.3"],"src":["134.3"],"stroke":["136.2"],"显示路径":["136.2"],"closepath":["136.2","141.3"],"右眼":["136.3"],"时会填充为三角形":["136.4"],"onload":["136.5"],"第一种绘制图片的方式":["136.5"],"参数1图片对象":["136.5"],"3将图片渲染到画布的水平和垂直位置":["136.5"],"文本对齐选项":["136.6"],"center":["136.6"],"end":["136.6"],"文本基线对齐":["136.6"],"destination":["138.2"],"out":["138.2"],"onmousemove":["138.2","141.3"],"arc":["138.2"],"pagex":["138.2"],"getseconds":["139.3"],"绘制秒针":["139.3"],"onmouseup":["141.3"],"lineto":["141.3","150.5"],"clearbtn":["141.4"],"橡皮擦":["141.4"],"isca":["141.4"],"鼠标进入移出事件":["143.1"],"pointerenter":["143.1"],"stage":["143.2"],"addchild":["143.2"],"用于创建交互式":["144.1"],"它还支持使用":["144.3"],"canvas":["144.3"],"使开发者能够快速上手并高效地创建图形和动画":["144.4"],"纹理":["144.5"],"texture":["144.5"],"并提供了针对移动设备的优化":["144.6"],"创建一个精灵":["144.7","149.2","152.1","152.2"],"sprite":["144.7","152.1","152.2"],"0xff0000":["145.2"],"beginfill":["145.2","146.2"],"0x66ccff":["145.2"],"drawrect":["145.2"],"fontfamily":["146.1"],"楷体":["146.1"],"fontsize":["146.1"],"fill":["146.1"],"graphics":["146.2"],"drawcircle":["146.2"],"360buyimg":["148.1"],"pop":["148.1"],"jfs":["148.1"],"t1":["148.1"],"5c1b0581e1fa6c1c3":["148.1"],"58519cee2a0039e0":["148.1"],"interactive":["148.2"],"distance":["148.3"],"虚化":["148.3"],"innerheight":["149.1"],"backgroundcolor":["149.1"],"0x1099bb":["149.1"],"vite":["149.2"],"svg":["149.2"],"旋转45度":["149.3"],"rotation":["149.3"],"delta":["149.4"],"endfill":["150.1"],"drawroundedrect":["150.3"],"textures":["152.1","152.2"],"创建容器":["152.1","152.2"],"锚点":["152.1"],"anchor":["152.1"],"加载完成后创建精灵":["152.2"],"then":["152.2"],"smil":["153.1"],"等其他网络标准无缝衔接":["153.1"],"y1":["153.3"],"rx":["153.6"],"灯光":["154.0"],"相机等":["154.0"],"相机":["154.0"],"camera":["154.0"],"相机定义了观察者在场景中看到的位置和视角":["154.0"],"提供了不同类型的相机":["154.0"],"包括透视相机":["154.0"],"perspectivecamera":["154.0"],"和正交相机":["154.0"],"orthographiccamera":["154.0"],"可根据需求进行选择":["154.0"],"几何体":["154.0"],"geometry":["154.0"],"几何体是":["154.0"],"scene1":["155.3"],"orbitcontrols":["155.7"],"renderer":["155.8"],"单独设置某个轴的位移":["156.2"],"从无到有的过程":["157.0"],"file":["157.1"],"新建文件夹":["157.1"],"git":["157.2"],"如果下载了":["157.2"],"可以在当前的文件夹右键":["157.2"],"选择":["157.2"],"public":["157.6"],"文件夹用于静态资源的引用":["157.6"],"目录结构如下":["157.6"],"快速开始":["157.7"],"guide":["157.7"],"features":["157.7"],"icon":["157.7"],"右上角的导航栏":["157.9"],"关于":["157.9"],"导航标签的名字":["157.9"],"这种格式是有下拉菜单的版本":["157.9"],"关于1":["157.9","157.10"],"默认是不是展开":["157.10"],"lining98":["157.11"],"master":["157.11"],"gh":["157.11"],"pages":["157.11"],"配置":["157.11"]},{"0":["0.2","8.21","29.2","30.6","51.8","65.14","84.3","91.2","98.5","118.8","136.5","141.3","148.2","148.3","152.2","153.8"],"1":["6.14","8.11","38.3","49.13","49.14","65.12","66.6","78.22","80.3","98.5","101.6","105.0","121.7","121.12","143.1","148.3"],"2":["2.5","9.17","18.4","20.6","28.9","30.10","48.4","91.2","101.6","114.2","145.2","146.2","152.1","152.2"],"3":["1.3","1.4","2.5","9.2","9.17","19.3","24.2","25.11","30.2","37.7","57.3","58.0","65.5","68.1","70.1","90.24","93.6","109.1","126.6"],"4":["1.12","5.7","9.11","32.8","36.1","59.3","74.6","88.3","89.1","93.6","108.1","109.14","109.18","123.3","149.3"],"5":["5.7","13.0","43.9","48.3","66.10","89.2","100.4","134.4","141.3","152.1","152.2","154.0"],"6":["9.11","34.4","67.25","100.4","105.0"],"7":["6.4","67.25","109.8","111.7","121.10"],"8":["36.1","111.3","121.16"],"9":["3.4","114.1"],"10":["2.6","49.9","150.3"],"13":["121.10"],"15":["43.3"],"16":["112.1","118.8"],"18":["8.5","29.7","31.1","49.8","99.1","101.5"],"19":["111.7"],"20":["30.10","138.2","139.3"],"21":["49.9"],"24":["49.8"],"25":["2.2","54.1"],"29":["30.9"],"30":["31.2","53.2","153.7"],"40":["24.24"],"50":["131.3","131.4","150.5","153.4","153.7","153.9"],"63":["155.9"],"71":["155.9","155.12"],"73":["155.12"],"80":["25.2"],"87":["156.5"],"99":["24.2","25.2","153.9"],"100":["24.24","131.4","134.1","136.5","146.2"],"111":["26.3"],"123":["101.4","108.6"],"127":["118.8"],"145":["121.10"],"180":["49.13"],"200":["32.6","134.1","150.5"],"201":["111.10"],"213":["103.6"],"223":["114.1"],"250":["137.1","153.7"],"299":["41.5"],"300":["132.1","135.0"],"308":["114.2"],"350":["137.2"],"372":["114.1"],"401":["111.11"],"404":["87.12"],"500":["108.4","136.4"],"501":["108.4"],"502":["108.4"],"600":["17.2","94.1"],"775":["114.1"],"800":["17.2"],"808":["114.1"],"854":["114.1"],"1234":["92.11"],"2000":["8.1"],"2018":["3.4"],"2600":["94.1"],"9000":["108.2"],"46539":["49.7"],"31250000":["30.2"],"清空map":["0.2"],"初始化map":["0.2"],"initialmap":["0.2"],"key1":["0.2"],"value1":["0.2","56.5"],"key2":["0.2"],"value2":["0.2","56.5"],"遍历map":["0.2"],"函数将":["0.4"],"对象转回去":["0.4"],"console":["0.5","1.3","1.6","1.7","2.1","4.8","4.9","4.11","4.16","4.19","4.21","6.20","9.13","9.14","10.6","10.9","24.9","24.12","24.13","24.17","24.31","24.32","25.8","25.9","29.2","29.6","38.1","39.3","43.6","43.7","46.2","47.2","48.4","56.6","56.7","56.8","56.12","56.13","56.16","56.19","59.4","90.4","90.18","90.19","90.20","99.1","99.10","99.11","101.4","121.10","121.13","123.14","138.2"],"merged":["0.6"],"即":["1.1","105.0"],"使用":["1.5","82.5","153.1","157.11"],"删除不存在的成员":["1.5"],"什么都不会发生":["1.5"],"也不会报错":["1.5"],"entry":["1.6"],"of":["1.6"],"log":["1.7","1.8","2.1","2.5","4.8","4.9","4.11","4.19","6.12","6.20","7.2","7.4","9.10","9.13","9.14","10.6","10.9","24.9","24.12","24.13","24.14","24.17","24.23","24.32","25.9","29.2","29.6","32.9","38.1","39.3","43.6","43.7","48.4","49.1","56.6","56.8","56.10","56.14","59.4","85.2","90.4","90.17","90.18","90.19","90.20","99.1","99.10","99.11","121.10","121.13","123.14"],"next":["1.8","9.12","87.8"],"value":["1.8","8.22","56.11","90.8","91.10"],"set":["1.9","25.11","30.12","38.6","145.2","150.1","152.2"],"hello":["1.12","4.9","86.16"],"h":["1.12","88.3"],"返回":["1.15"],"true":["1.15","9.1","25.3","32.4","90.29","143.2","144.7"],"false":["1.15","56.15","150.4"],"解构成数组":["1.15"],"过滤":["1.15"],"sayhello":["2.1","2.2","4.13"],"你好":["2.1","2.2"],"子类的方法":["2.3"],"introduce":["2.3"],"this":["2.4","9.9","20.5","37.3","76.3","78.20","79.11","80.9","81.4","84.6","99.11"],"name":["2.4","4.23","8.1","56.9","56.17","90.13","92.17","117.2"],"定义了脚本语言的语法规范":["3.2"],"类型":["3.2"],"操作符":["3.2"],"对象和一系列的内置函数等内容":["3.2"],"的扩展语言":["3.3"],"在浏览器环境中的组成关系":["3.3"],"web":["3.3","118.0","121.15"],"用于遍历对象的键值对和值":["3.4"],"string":["3.4","81.14","100.2","101.2","101.3","103.1"],"padstart":["3.4","6.5"],"padend":["3.4","6.5"],"用于字符串填充":["3.4"],"async":["3.4"],"await":["3.4"],"语法":["3.4","5.10"],"更方便地处理异步操作":["3.4"],"getownpropertydescriptors":["3.4"],"返回对象属性的描述符":["3.4"],"es9":["3.4"],"es2018":["3.4"],"es6":["4.1","8.3","55.2"],"引入了原生的模块化支持":["4.1"],"模块之间通过导入":["4.2"],"import":["4.2","87.10"],"测试和重构模块都更加方便":["4.4"],"我们可以将模块中的变量":["4.6"],"函数或类导出":["4.6"],"const":["4.7","4.14","4.18","5.10","22.1","32.3","37.7","42.8","51.3","51.10","59.3","78.4","78.20","81.10","81.11","90.6","99.2","103.4","103.5","107.3","111.10"],"输出":["4.13","4.19","7.2","7.4","25.9","42.3","42.4","53.2","54.1","54.2","56.11"],"person":["4.14","8.1"],"new":["4.14","4.18","51.4","53.2","53.3","54.0","77.1","86.13","98.3","99.1","99.7","99.10","113.3"],"from":["4.17","4.22","9.4","9.5","87.8"],"else":["4.23","43.5","78.14","92.15","108.3","141.3"],"module2":["4.23"],"模块化为前端开发带来了巨大的便利性和效率":["4.28"],"是":["4.28","81.15","83.7"],"开发的重要进步之一":["4.28"],"就是":["5.4"],"这种写法不能省略第二个参数":["5.5"],"如果结合函数参数的默认值":["5.5"],"就可以省略第二个参数":["5.5"],"这时":["5.5","5.6","28.11"],"就出现了双重默认值":["5.5"],"上面代码中":["5.6","131.4"],"有默认值的参数都不是尾参数":["5.6"],"无法只省略该参数":["5.6"],"而不省略它后面的参数":["5.6"],"除非显式输入":["5.6"],"如果传入":["5.6"],"将触发该参数等于默认值":["5.6"],"null":["5.6","8.21","37.6","59.10","59.14","78.2","111.8"],"则没有这个效果":["5.6"],"由于":["5.7"],"的实参为":["5.7"],"所以默认值为":["5.7"],"再因为":["5.7"],"是解构赋值":["5.7"],"内为":["5.7"],"所以解构赋值启用默认值":["5.7"],"所以真正的形参为":["5.7"],"剩余语法与展开语法是相反的":["5.9"],"给出了它的完美解决方案":["5.10"],"剩余参数":["5.10"],"那剩余参数是如何在函数传参中使用的呢":["5.10"],"下面我们来看看实例":["5.10"],"add":["5.10"],"x":["5.10","17.1","28.13","98.14","118.14","146.1","148.1","152.1","152.2"],"y":["5.10","119.1","152.1","152.2"],"z":["5.10"],"args":["5.10","37.5"],"伪数组":["5.11"],"剩余参数的名字可以自定义":["5.11"],"在函数传参的时候也可以是和解构一起使用":["5.12"],"而引入的":["5.13"],"如解构赋值":["5.14"],"模板字符串等":["5.14"],"a":["5.15","9.3","27.7","103.4"],"b":["5.15","9.6","92.15","122.22"],"undefined":["5.17","8.12","30.1","31.4"],"的场景":["5.18"],"如事件处理函数":["5.18"],"就势必要在原来最后一个参数后面添加一个逗号":["5.19"],"这对于版本管理系统来说":["5.19"],"就会显示添加逗号的那一行也发生了变动":["5.19"],"这看上去有点冗余":["5.19"],"因此新的语法允许定义和调用时":["5.19"],"尾部直接有一个逗号":["5.19"],"代码块可能用不到这个参数":["5.20"],"但是":["5.20","28.4"],"为了保证语法正确":["5.20"],"还是必须写":["5.20"],"需要知道字符串的特点是一旦创建了":["6.1"],"还可通过":["6.2"],"w":["6.4"],"e":["6.14","32.6"],"replace":["6.17"],"matches":["6.18"],"pos":["6.19"],"ond":["6.20"],"来包裹字符串":["7.1"],"下面是一个实际的例子":["8.1"],"let":["8.1","99.6","99.7","99.11","138.2"],"birth":["8.1"],"01":["8.1","114.4"],"张三":["8.1"],"等同于birth":["8.1"],"增强":["8.3"],"valuea":["8.4"],"valueb":["8.4"],"age":["8.5","30.9","30.10","46.3","47.3","100.2"],"等同于":["8.6"],"getprototypeof":["8.6"],"或":["8.6"],"call":["8.6"],"方法":["8.6","23.2","42.2","103.0","122.2"],"字符串直接展开":["8.13"],"因为":["8.15","91.9"],"不能展开":["8.15"],"不同之处只有两个":["8.20"],"一是":["8.20"],"不等于":["8.20"],"二是":["8.20"],"等于自身":["8.20"],"str":["8.21","98.1"],"s":["8.21"],"t":["8.21"],"r":["8.21"],"同名属性的替换":["8.21"],"后面的直接覆盖前面的":["8.21"],"黄色":["8.21"],"key":["8.22","78.17","84.4","84.5","91.10","91.12","95.4"],"下标":["9.3"],"array":["9.4","24.21","24.31","30.8"],"item":["9.8","24.28","24.29","67.4","67.15","67.16","67.30","91.12","111.10"],"值":["9.9","44.4"],"参数2":["9.15"],"可选":["9.15"],"搜索的起始索引":["9.15"],"默认为0":["9.15"],"infinity":["9.16"],"tip":["10.0","25.10","31.4","37.2","74.4","83.7","84.6","85.6","90.2"],"解构赋值是一种简洁而强大的语法":["10.0"],"它在处理数据时非常实用":["10.0"],"childelement":["11.1"],"将其添加到文档中":["11.1"],"修改元素属性":["11.1"],"这是新创建的段落":["11.2"],"appendchild":["11.2"],"加载历史记录中的不同页面":["12.0","13.0"],"delta":["12.1"],"导航到相对于当前页面的偏移量为":["12.1"],"history":["13.0","82.15"],"它提供了对浏览器历史记录的操作":["13.0"],"可以使用它向前或向后导航":["13.0"],"navigator":["13.0"],"它提供了关于浏览器的信息":["13.0"],"如浏览器的名称":["13.0"],"的各个部分":["14.0"],"如协议":["14.0"],"的查询字符串部分":["14.1"],"assign":["14.1"],"https":["14.2","126.1","134.3"],"www":["14.2","118.14","126.1"],"example":["14.2","134.3"],"用户代理字符串等":["15.0"],"浏览器的版本":["15.1"],"appversion":["15.2"],"获取操作系统平台":["15.2"],"分辨率等":["16.0"],"availheight":["16.1","16.2"],"屏幕的可用高度":["16.1"],"屏幕可用高度":["16.2"],"表示浏览器窗口或标签页":["17.0"],"它提供了操作浏览器窗口的方法和属性":["17.0"],"moveto":["17.1","134.1","136.3"],"resizeto":["17.2"],"btn1":["18.1"],"css":["18.2","65.9","66.2","66.9","67.1","67.4","67.15","67.26","79.24","118.3","119.2"],"我们可以依据节点之间的关系查找节点":["18.3"],"javascript":["18.5","36.2","46.5","47.5","51.6","57.4","76.5","79.23","86.13","102.1"],"基础":["18.5"],"这使得开发者可以使用":["19.1"],"动态地修改网页的内容":["19.1"],"样式和结构":["19.1"],"以及响应用户的交互事件":["19.1"],"链接名":["19.2"],"div":["19.2","21.1","65.12","78.4","78.19","78.22","80.3","83.5","83.6","86.4","90.15"],"id":["19.2","20.12","59.3","75.13","82.14","86.4","86.12","87.9","91.12","110.4","118.2"],"class":["19.2","19.3"],"文本节点":["19.3"],"通过":["19.4","79.18","82.3","82.6","92.6","132.0"],"可以实现动态修改网页内容":["19.4"],"实时更新页面":["19.4"],"下面是一些常见的方法和技巧来处理":["20.0"],"keyup":["20.2","37.1","37.4"],"等":["20.2","25.11","51.11"],"是一个函数":["20.2"],"它会在事件触发时执行":["20.2"],"使用匿名函数来定义事件处理程序":["20.2"],"removeeventlistener":["20.3","90.31"],"eventname":["20.3"],"监听鼠标是移入当前":["20.5"],"dom":["20.5","82.8","89.1"],"元素":["20.5","85.3"],"addeventlistener":["20.5","59.3","90.31"],"function":["20.5","32.6","43.8","73.11","98.14","100.4","121.12","134.3"],"修改文本内容":["20.5"],"键盘谈起了":["20.6"],"用户输入文本事件":["20.6"],"blur":["20.7"],"事件也可以用于检测键盘输入":["20.8"],"并做出相应的响应":["20.8"],"keypress":["20.8"],"当用户按下键盘上的字符键时触发":["20.8"],"以下是一些常用的事件对象属性":["20.9"],"target":["20.9"],"触发事件的目标元素":["20.9"],"事件将从祖先元素开始":["20.10"],"向下传播到触发事件的元素":["20.10"],"load":["20.11","73.8","74.6"],"domcontentloaded":["20.11"],"视图事件":["20.11"],"高效的事件处理方式":["20.12"],"html":["20.12","21.2","27.0","33.1","59.3","65.12","121.16","123.6"],"body":["20.12","27.3","86.4","111.10"],"ul":["20.12","74.2","84.4","91.12"],"mylist":["20.12"],"li":["20.12","74.2","78.17","84.4","84.5","91.12"],"选项1":["20.12"],"设置元素的属性值":["21.0"],"是你想要创建的元素的标签名":["21.1"],"例如":["21.1","51.10"],"设置元素的":["21.2"],"内容":["21.2","90.30"],"之前":["21.3","87.1"],"作为它的兄弟元素":["21.3"],"从父元素中移除子元素":["21.3"],"removechild":["21.3"],"文档对象模型":["22.0"],"来操作元素的样式和类":["22.0"],"computedstyle":["22.1"],"window":["22.1"],"这将返回一个布尔值":["22.2"],"指示元素是否具有指定的类名":["22.2"],"上述方法可以用于修改元素的样式和类":["22.2"],"以实现动态的样式变化或元素状态的切换":["22.2"],"你可以根据需要进行组合和应用":["22.2"],"innerhtml":["23.0"],"获取或设置元素的":["23.0"],"tagname":["23.1"],"使用选择器获取元素":["23.1"],"setattribute":["23.2"],"数组中可以存放任意类型的数据":["24.0"],"例如字符串":["24.0"],"arr1":["24.1"],"zzz":["24.2"],"其他元素都是undefined":["24.2"],"需要留意的是哪些方法会对原数组产生影响":["24.5"],"哪些方法不会":["24.5"],"concat":["24.6","36.5","43.5","43.6"],"blue":["24.7","24.8","65.7","84.3","132.1"],"推入两项":["24.7"],"red":["24.8","84.3"],"从数组开头推入两项":["24.8"],"slice":["24.11"],"concole":["24.15"],"直接使用sort":["24.24"],"方法排序":["24.24"],"var":["24.24","56.4","73.11"],"arr":["24.24"],"foreach":["24.27"],"filter":["24.27"],"index":["24.28","24.29","24.31","38.5","43.1","79.24","91.12","95.4","122.23"],"后的条件表达式进行求值判断":["25.1"],"如果结果为true":["25.1"],"则执行if后的语句":["25.1"],"如果为false则不执行":["25.1"],"语句只会控制紧随其后其后的那一行代码":["25.1"],"汽车一辆":["25.2"],"当成绩为":["25.2"],"时":["25.2"],"奖励一台iphone":["25.2"],"如果比较结果为":["25.3"],"则自当前":["25.3"],"处开始执行代码":["25.3"],"执行完毕":["25.5"],"继续判断":["25.5"],"如果为":["25.5"],"则再次执行循环体":["25.5"],"如果为false":["25.6"],"则循环终止":["25.6"],"如果为true":["25.6"],"则继续执行循环体":["25.6"],"以此类推":["25.6"],"注意":["25.10","31.4","73.7","98.8","131.1"],"它不能直接用于遍历普通的对象":["25.10"],"要遍历对象属性":["25.10"],"需要使用":["25.10"],"object":["25.10","28.12","30.6","42.3","42.6"],"entries":["25.10"],"typedarray":["25.11"],"迭代对象的顺序不同":["25.11"],"循环的迭代顺序是不确定的":["25.11"],"因为对象的属性没有固定的顺序":["25.11"],"中的函数":["26.0"],"变量名":["26.2"],"fn1":["26.3"],"fn2":["26.3"],"cook":["26.6"],"aru":["26.6"],"形参是接受实参的":["26.6"],"酸辣土豆丝":["26.6"],"形参类似于一个变量":["26.6"],"是一个变量但是没有接受值":["26.7"],"结果就是undefined":["26.7"],"建议":["26.7"],"getresult":["26.8"],"res":["26.8"],"不仅可以退出循环":["26.9"],"立即执行":["26.12"],"可以与":["27.0"],"和":["27.0","36.2","42.4","45.1","73.6","74.2","88.6","90.25","122.7"],"write":["27.1","121.4","121.7"],"代码引入到":["27.2"],"内联形式":["27.3"],"属性":["27.4","79.8"],"其中":["28.2"],"键名":["28.2"],"成员的名称":["28.2"],"字符串":["28.2"],"的属性":["28.3","28.13"],"就指向一个函数":["28.3"],"如果属性的值还是一个对象":["28.3"],"就形成了链式引用":["28.3"],"o1":["28.3"],"o2":["28.3"],"产生影响":["28.4"],"还是指向原来的那个对象":["28.4"],"这种引用只局限于对象":["28.4"],"如果两个变量指向同一个原始类型的值":["28.4"],"那么":["28.4"],"变量这时都是值的拷贝":["28.4"],"正确":["28.5"],"报错":["28.5"],"这种差异在":["28.5"],"eval":["28.5"],"语句":["28.5"],"作用是对字符串求值":["28.5"],"对象":["28.7","42.2"],"的数字键":["28.7"],"就定义好属性":["28.8"],"p":["28.8","65.12","78.6","81.4","83.5","83.6","86.6"],"属性是不能删除的":["28.10"],"所以":["28.10"],"命令返回":["28.10"],"关于":["28.10"],"方法的介绍":["28.10"],"请看":["28.10"],"标准库":["28.10","28.12"],"对象一章":["28.10"],"另外":["28.10","59.8"],"需要注意的是":["28.10","91.5"],"运算符会返回":["28.11"],"因为这个属性是继承的":["28.11"],"可以使用对象的":["28.11"],"hasownproperty":["28.11","35.2"],"方法判断一下":["28.11"],"该属性不会被":["28.12"],"循环遍历到":["28.12"],"因为它默认是":["28.12"],"不可遍历":["28.12"],"的":["28.12","83.3","105.0"],"关于对象属性的可遍历性":["28.12"],"参见":["28.12"],"章节中":["28.12"],"一章的介绍":["28.12"],"如果继承的属性是可遍历的":["28.12"],"那么就会被":["28.12"],"然后在":["28.13"],"区块内操作它":["28.13"],"这是因为":["28.13","44.4"],"区块没有改变作用域":["28.13"],"它的内部依然是当前作用域":["28.13"],"这造成了":["28.13"],"语句的一个很大的弊病":["28.13"],"就是绑定对象不明确":["28.13"],"单纯从上面的代码块":["28.13"],"递增和递减运算符":["29.1"],"比较运算符":["29.1"],"位小数":["29.2"],"但在进行计算时其精确度远远不如整数":["29.2"],"js":["29.2","32.3","73.11","90.5","105.0","119.5","121.9","122.21","132.1"],"除等于":["29.3"],"a2":["29.6"],"不等号":["29.7"],"它会转换为布尔值然后运算":["29.9","29.10"],"但是最终会返回原值":["29.9","29.10"],"则直接返回第一个值":["29.9"],"则返回第一个":["29.10"],"则执行表达式":["29.12"],"来改变优先级即可":["29.13"],"125e7":["30.2"],"等于":["30.2"],"在数值类型中":["30.2"],"存在一个特殊数值":["30.2"],"nan":["30.2","30.6"],"意为":["30.2"],"这个变量被声明了":["30.3"],"只是值为":["30.3"],"它们的值就不能变了":["30.4"],"lang":["30.4"],"值是由":["30.5"],"值派生而来":["30.5"],"非零数值":["30.6"],"包括无穷值":["30.6"],"foo":["30.7"],"otherfoosymbol":["30.7"],"箭头函数":["30.11"],"专门用来将字符串转换为数值的两个方法":["30.15"],"parseint":["30.15"],"将一个字符串转换为一个整数":["30.15"],"解析时":["30.15"],"会自左向右读取一个字符串":["30.15"],"直到读取到字符串中所有的有效的整数":["30.15"],"也可以使用":["30.15"],"来对一个数字进行取整":["30.15"],"parsefloat":["30.15"],"将一个字符串转换为浮点数":["30.15"],"解析器首先要确认的就是这个值是基本类型值还是引用类型值":["30.17"],"的值为一个基本类型":["30.18"],"是存储在栈中":["30.18"],"将":["30.18","59.8","117.2","117.4","117.7","117.8","126.7"],"是一个引用类型":["30.19"],"在赋值操作过程汇总":["30.19"],"实际是将堆内存对象在栈内存的引用地址复制了一份给了":["30.19"],"两个对象对应不同的地址":["30.20"],"关键字声明的变量会自动提升到函数作用域顶部":["31.1"],"相当于":["31.1"],"referenceerror":["31.3"],"catch":["31.5"],"语句或":["31.5"],"在延迟定时器执行时":["31.6"],"他是异步的":["31.6"],"循环已经结束了":["31.6"],"最后的值始终都是":["31.6"],"才是期望的值":["31.6"],"syntaxerror":["31.7"],"声明的作用域也是块":["31.7"],"上面的代码就相当于":["31.8"],"xmlhttprequest":["32.1","118.11"],"对象来向服务器发异步请求":["32.1"],"从服务器获得数据":["32.1"],"send":["32.2","118.6"],"方法发送给服务器端":["32.2"],"布尔值":["32.4"],"表示是否异步执行操作":["32.4"],"默认为":["32.4"],"请求发送数据的时候":["32.5"],"需要注意如下":["32.5"],"将请求数据添加到":["32.5"],"open":["32.5"],"if":["32.6","48.5","73.11","78.13","98.12","98.14","111.10","123.11"],"整个请求过程完毕":["32.6"],"status":["32.6","111.11"],"接收请求":["32.8"],"onreadystatechange":["32.8"],"readystate":["32.8"],"fail":["32.9","123.11"],"闭包可以捕获外部函数的变量和参数":["34.0"],"并将其保存在内部函数的词法环境中":["34.0"],"在上述示例中":["34.1","36.1","37.2","44.1","44.2","45.3","67.19"],"内部定义了":["34.1"],"函数返回了":["34.2"],"函数":["34.2","90.0","118.5"],"后者可以访问并修改":["34.2"],"柯里化是一种将多参数函数转化为一系列单参数函数的技术":["34.4"],"闭包可以用于实现函数柯里化":["34.4"],"使函数能够记住之前传递的参数":["34.4"],"并返回一个新的函数等待传递剩余的参数":["34.4"],"延迟执行函数":["34.4"],"可以使得函数更灵活":["34.5"],"更具可复用性":["34.5"],"合理使用闭包可以创建私有变量":["34.5"],"这些方法都会创建一个新对象":["35.1"],"originalobject":["35.2"],"函数接收一个参数":["36.1"],"并返回一个新的匿名函数":["36.1"],"新函数接收参数":["36.1"],"提供了一些工具库":["36.2"],"如":["36.2","79.16","122.16","130.5","130.7"],"lodash":["36.2"],"ramda":["36.2"],"这是一种使用闭包和递归的柯里化函数实现方式":["36.4"],"函数接收一个要柯里化的函数":["36.4","36.6"],"返回一个新的柯里化函数":["36.4"],"shift":["36.5"],"返回一个新的箭头函数":["36.6"],"极大地浪费资源":["37.0"],"降低前端性能":["37.0"],"为了优化体验":["37.0"],"需要对这类事件进行调用次数的限制":["37.0"],"mousemove":["37.1"],"函数接收一个要节流的函数":["37.2"],"当前时间":["37.3"],"remaining":["37.3"],"从上一次到现在":["37.3"],"还剩下多少多余时间":["37.3"],"context":["37.3","132.1","133.1"],"cleartimeout":["37.5"],"handlescroll":["37.7"],"处理滚动事件的逻辑":["37.7"],"创建函数":["37.7"],"throttlehandlescroll":["37.7"],"同时":["38.2"],"减少循环次数提升性能":["38.2"],"return":["38.2","43.8","74.6","78.10","78.11","78.19","78.22","80.3","80.4","80.8","80.10","83.5","83.6","86.16","98.12","123.11"],"includes":["38.4"],"queue":["39.1"],"中":["39.1","45.4","79.9","79.13","81.1"],"当":["39.1","123.14"],"执行栈":["39.1"],"先同步":["39.2"],"再取出第一个宏任务执行":["39.2"],"所有的相关微任务总会在下一个宏任务之前全部执行完毕":["39.2"],"如果遇见":["39.2"],"就":["39.2"],"再打印整个script中第一遍放入微任务队列中的代码":["39.3"],"循环第二遍":["39.3"],"按照任务队列的先进先出":["39.3"],"执行放入任务队列中的宏任务":["39.3"],"如定时器等":["39.3"],"在此等宏任务中":["39.3"],"parse":["40.2"],"isarray":["40.3"],"是一种用于处理异步操作的对象":["41.0"],"它表示一个异步操作的最终完成":["41.0"],"或失败":["41.0"],"及其结果的值":["41.0"],"读取文件等":["41.1"],"当异步操作成功时":["41.1"],"调用":["41.1","41.5"],"在":["41.2","55.2","73.5","78.1","79.9","80.1","81.1","84.6","91.4"],"方法中传递的函数会在异步操作成功时被调用":["41.2"],"并接收到成功的结果":["41.2"],"这样":["41.3"],"可以在第二个":["41.3"],"方法中继续处理":["41.3"],"方法会被调用":["41.4"],"传递一个包含所有":["41.4"],"实例结果的数组":["41.4"],"如果任意一个":["41.4"],"实例失败":["41.4"],"将调用新":["41.4"],"事件被触发":["41.5"],"函数判断响应的状态码":["41.5"],"如果在":["41.5"],"到":["41.5"],"的范围内":["41.5"],"则调用":["41.5"],"将响应文本作为成功的结果传递给":["41.5"],"否则":["41.5"],"将状态文本作为错误信息传递给":["41.5"],"它使得对象可以通过原型链":["42.1"],"prototype":["42.1","56.5"],"然后":["42.2"],"我们通过":["42.2","84.2"],"来定义":["42.2"],"当我们创建一个":["42.2"],"在这个例子中":["42.3","42.4","57.2"],"我们定义了两个构造函数":["42.4"],"create":["42.6"],"super":["42.8"],"buddy":["42.9"],"但也需要小心使用":["42.11"],"这种多重继承的能力是传统继承中不常见的":["42.12"],"使用构造函数和原型对象":["42.13"],"可以创建一个自定义的工具函数或对象":["42.15"],"这样可以降低内存使用":["42.16"],"在命名属性和方法时要小心":["42.17"],"方法提供了一种更灵活的方式来创建对象":["42.18"],"和数组本身":["43.1"],"prev":["43.8"],"cur":["43.8"],"方法在处理大量数据时可能不太高效":["43.9"],"因为它是顺序执行的":["43.9"],"每个元素依赖前一个元素的累积结果":["43.9"],"输出的是外部作用域的":["44.4"],"而不是全局作用域的值":["44.4"],"自动发送回服务器":["45.0"],"每个":["45.1"],"由一个键值对组成":["45.1"],"gmt":["45.3"],"path":["45.3","82.3","87.3"],"建议谨慎使用并根据实际需求控制数据量":["45.4","46.6","47.6"],"会在每次请求时自动发送到服务器":["45.4"],"不应将敏感信息存储在":["45.4"],"中的数据在浏览器关闭后仍然存在":["46.0"],"因此适用于需要长期保存的数据":["46.0"],"username":["46.1","47.1","118.2"],"因此":["46.6","47.6"],"存储大量数据可能会导致溢出或性能问题":["46.6","47.6"],"是基于域名的":["46.6"],"每个域名都有独立的":["46.6"],"不同域名之间的":["46.6"],"中的数据在用户关闭浏览器标签页或浏览器会话结束后会被清除":["47.0"],"因此适用于临时保存会话数据":["47.0"],"是基于域名和会话的":["47.6"],"每个域名和浏览器会话都有独立的":["47.6"],"不同域名或会话之间的":["47.6"],"setmilliseconds":["48.1"],"millisecond":["48.1"],"设置日期的毫秒数为指定的值":["48.1"],"setminutes":["48.1"],"minute":["48.1"],"设置日期的分钟数为指定的值":["48.1"],"setmonth":["48.1"],"month":["48.1"],"设置日期的月份为指定的值":["48.1"],"范围为":["48.1"],"setseconds":["48.1"],"datestring":["48.2"],"我们将日期对象设置为":["48.3"],"天后的日期":["48.3"],"获取时间戳":["48.4"],"和其他全局对象不同":["49.0"],"它不是一个构造器":["49.0"],"之间的随机数":["49.4"],"包含":["49.4"],"次方":["49.10"],"pi":["49.12","138.2","150.4"],"negative":["50.1"],"表示负无穷大":["50.1"],"当一个负数超过了":["50.1"],"使用正则表达式来查找匹配的模式":["51.1"],"并进行替换操作":["51.1"],"当涉及到字符串模式匹配和替换时":["51.1"],"的正则表达式":["51.1"],"匹配括号内的任意字符":["51.5"],"来匹配字符串的开始和结束":["51.6"],"匹配邮箱":["51.7"],"groups":["51.9"],"只从上次匹配结束的位置开始匹配":["51.10"],"标志可以通过在正则表达式字面量或构造函数中使用单个字符的方式添加":["51.10"],"markdown":["51.11"],"json":["51.11","80.6","80.11","98.8","102.7","122.11","122.21","157.11"],"日期处理":["52.0"],"正则表达式匹配等":["52.0"],"都可以依靠内置对象来完成":["52.0"],"数学对象":["52.1"],"regexp":["52.1"],"正则表达式对象":["52.1"],"error":["52.1","98.12","100.5"],"如对象的创建":["52.2"],"排序等":["52.3"],"这些方法可以帮助我们处理文本数据":["52.4"],"可以进行基本的数学计算":["52.5"],"两个值":["52.6"],"它提供了逻辑运算和条件判断的功能":["52.6"],"可以用于处理时间相关的任务":["52.7"],"promise":["52.9","107.4"],"map":["52.9"],"constructor":["53.1","80.13"],"bark":["53.1"],"john":["53.2","56.18","78.7","81.11","99.7"],"构造函数是一个带有":["54.0"],"关键字调用的函数":["54.0"],"它的主要作用是初始化对象的属性和方法":["54.0"],"person2":["54.1","101.5"],"jane":["54.1"],"对象是数据和操作数据的方法的封装单元":["55.1"],"作为一种支持面向对象编程的语言":["55.2"],"提供了创建对象":["55.2"],"定义类":["55.2"],"实现继承和封装等功能":["55.2"],"sex":["56.2"],"男":["56.2"],"调用属性还有一种方法":["56.3"],"年龄":["56.4"],"性别":["56.4"],"bigbai":["56.4"],"属性的值":["56.5"],"is":["56.5","86.10"],"判断两个值是否相同":["56.5"],"keys":["56.5"],"的原型是":["57.1"],"对象通过":["57.2"],"创建":["57.2"],"动态更新":["57.3"],"总结":["57.4","74.4","81.15","83.7","84.6"],"原型和原型链是实现继承和共享属性和方法的关键机制":["57.4"],"禁止删除变量":["58.0"],"delete":["58.0","108.5"],"和函数":["58.0"],"禁止使用八进制字面量":["58.0"],"012":["58.0"],"就会创建一个新的上下文对象":["59.1"],"他们之间是相互独立且独一无二的":["59.1"],"这个对象我们称为函数执行的":["59.2"],"事件绑定函数":["59.3"],"指向":["59.3"],"绑定事件的对象":["59.3"],"button":["59.3","83.4","86.7","92.16"],"mybutton":["59.3"],"click":["59.3","76.4","90.12","91.3","91.8","92.16"],"me":["59.3"],"document":["59.3","73.11"],"getelementbyid":["59.3","73.11"],"apply":["59.5"],"想要将this指向哪里":["59.7"],"函数实参1":["59.7"],"函数实参2":["59.7"],"备注":["59.7"],"son":["59.8"],"通过这一步":["59.8"],"里面的":["59.8"],"修改为":["59.8"],"加上相应的参数":["59.8"],"让":["59.8"],"第一个参数中":["59.10"],"如果不需要改变":["59.10","59.14"],"则传":["59.10","59.14"],"先将":["59.11"],"不让填null":["59.12"],"maxvalue":["59.12"],"求数组":["59.12"],"函数的":["59.14"],"margin":["65.1","69.5"],"h1":["65.2","65.6","78.8","78.10","78.11"],"font":["65.4"],"weight":["65.4"],"因为没有意义":["65.5"],"交集选择器中":["65.5"],"不可能":["65.5"],"出现":["65.5"],"两个元素选择器":["65.5"],"h2":["65.6","90.7"],"h3":["65.6"],"green":["65.8","72.1","135.0","153.5"],"选中div后紧紧相邻的兄弟p元素":["65.9"],"相邻兄弟选择器":["65.9"],"focus":["65.11"],"用于选择获取焦点的表单元素":["65.11"],"一般针对表单元素而言":["65.11"],"忽略其他非":["65.12"],"的元素":["65.12"],"span":["65.12"],"结尾的":["65.13"],"clearfix":["65.14"],"必须要有content属性":["65.14"],"display":["65.14","66.2","67.10","67.11","67.12","67.13","67.14"],"block":["65.14"],"块级元素":["65.14"],"height":["65.14","69.2","139.4"],"不要看见该元素":["65.14"],"核心代码清除浮动":["65.14"],"visibility":["65.14"],"将子元素定义为弹性项目":["66.0"],"使它们能够在主轴和交叉轴上灵活布局":["66.0"],"容器":["66.1"],"其中的子元素就会成为":["66.1"],"container":["66.2","66.9","67.12","67.13","67.14"],"项目靠交叉轴末尾位置对齐":["66.3"],"项目在交叉轴上居中对齐":["66.3"],"baseline":["66.3"],"项目的基线对齐":["66.3"],"stretch":["66.3","66.9"],"项目会自动换行到下一行":["66.4"],"reverse":["66.4"],"弹性增长因子为1":["66.6"],"inner":["66.8"],"默认值":["66.9"],"多行项目被拉伸以填满交叉轴空间":["66.9"],"center":["66.10","69.1","146.1"],"实现水平导航栏布局":["66.10"],"响应式网格":["66.10"],"wrap":["66.10"],"和媒体查询创建响应式网格布局":["66.10"],"布局在":["67.1"],"容器内部的子元素即成为网格项":["67.2"],"1fr":["67.3","67.6"],"2fr":["67.3","67.6"],"定义三列":["67.3"],"第二列是第一列的两倍宽度":["67.3"],"以下是一些常用的":["67.5"],"area":["67.7"],"header":["67.8","118.12"],"10px":["67.9"],"template":["67.11","90.15","92.5"],"grid":["67.15"],"了解如何创建网格布局对于掌握":["67.17"],"50px":["67.18"],"定义两行":["67.18","67.19"],"第一行高度为":["67.18"],"第二行占据剩余空间":["67.18"],"100px":["67.19","70.0"],"每行高度为100px":["67.19"],"我们使用":["67.19"],"1200px":["67.20"],"可以用于创建各种复杂的网页布局":["67.21"],"nav":["67.22"],"navigation":["67.22"],"sidebar":["67.23","67.24"],"中两种常用的布局模型":["67.26"],"适用于单一方向的布局":["67.27"],"即只控制主轴或交叉轴的布局":["67.27"],"支持网格项在主轴上的换行":["67.28"],"对齐和排序":["67.28"],"适用于弹性布局需求":["67.28"],"我们可能会遇到一些常见问题":["67.29"],"nth":["67.30"],"child":["67.30"],"可以使用":["67.31","82.7","157.1"],"在使用":["67.32"],"实现一维和二维布局的组合效果":["67.33"],"使用媒体查询和响应式设计":["67.33"],"实现在不同设备和屏幕尺寸下的布局适配":["67.33"],"通配选择器":["68.0"],"skyblue":["69.1"],"text":["69.1","79.23","84.5","114.3","121.16","121.17"],"align":["69.1","146.1"],"width":["69.2"],"400px":["69.2"],"200px":["69.3"],"items":["69.7"],"垂直居中":["69.7"],"place":["69.8"],"content":["69.8","70.3"],"border":["70.0"],"overflow":["70.1","70.2"],"hidden":["70.1","70.2"],"orient":["70.2"],"vertical":["70.2"],"检索伸缩盒子对象的子元素的排列方式":["70.2"],"after":["70.3"],"absolute":["70.3"],"right":["70.3"],"corner":["71.0"],"滚动条上的滚动滑块":["71.0"],"size":["72.2","121.8"],"mp4":["73.0"],"您的浏览器不支持视频播放":["73.0"],"control":["73.0"],"属性供添加播放":["73.0"],"wav":["73.2"],"ogg":["73.3","73.10"],"video":["73.5"],"循环播放":["73.7"],"warning":["73.7"],"type":["73.10","78.5","79.23","84.5","118.14","121.17"],"myvideo":["73.11"],"paused":["73.11"],"它通过使用一系列标签和属性来描述网页的结构和内容":["74.0"],"包含了与网页相关的配置和信息":["74.1"],"如字符编码":["74.1"],"标题":["74.1"],"引入外部资源等":["74.1"],"用于创建超链接到其他网页或文档":["74.2"],"img":["74.2","93.7","119.3","119.4"],"图像标签":["74.2","76.2"],"用于插入图片到网页中":["74.2","76.2"],"无序列表和列表项标签":["74.2","76.1"],"canvas":["74.3"],"绘图":["74.3"],"进一步提高网页开发技能":["74.4"],"创造出更加优秀的网页和网页应用程序":["74.4"],"help":["74.5"],"user":["74.5","82.14","118.6","118.7","123.14"],"be":["74.5"],"more":["74.5"],"successful":["74.5"],"important":["74.5"],"crucial":["74.5"],"necessary":["74.5"],"for":["74.5","75.11","91.12","119.6"],"file":["74.6"],"formats":["74.6"],"you":["74.6"],"only":["74.6"],"transform":["74.6","131.0"],"results":["74.6"],"currently":["74.6"],"writebundle":["74.6"],"我将在每个代码示例中添加特殊字符":["75.0"],"这是h4级别的标题":["75.1"],"h5":["75.1"],"com":["75.3","76.4","80.11","110.1","110.3","134.3"],"alt":["75.4"],"内联容器":["75.8"],"单元格1":["75.9"],"label":["75.11"],"contact":["75.14","82.10"],"联系方式":["75.14"],"标签可以分为两类":["76.0"],"用于创建无序列表":["76.1"],"ol":["76.1"],"br":["76.2"],"换行标签":["76.2"],"here":["76.4","157.2"],"自定义标签的功能通常需要通过":["76.5"],"来处理和操作":["76.5"],"可以看到":["78.2"],"element":["78.4","78.5","78.7","78.12"],"input":["78.5","79.16","84.5"],"learn":["78.6"],"comment":["78.8"],"组件是":["78.9"],"中最基本的概念之一":["78.9"],"render":["78.11","78.20","80.3","80.4","83.5","83.6","88.3"],"welcome":["78.12"],"please":["78.15"],"评论列表等":["78.16"],"onchange":["78.18","84.5"],"bind":["78.18"],"temperatureinput":["78.19"],"scale":["78.19","145.2","149.3"],"props":["78.20","79.8"],"themedbutton":["78.21"],"theme":["78.21"],"官方网址":["79.0"],"通过对比前后两个状态的":["79.1"],"差异":["79.1"],"最小化页面重绘":["79.1"],"从而提高性能和效率":["79.1"],"独立的组件":["79.3"],"每个组件负责特定的功能":["79.3"],"从而提高了页面的渲染效率":["79.4"],"这种单向数据流的模式使得数据流动更加可控":["79.5"],"减少了数据的混乱和不一致":["79.5"],"redux":["79.6"],"用于管理应用程序的状态":["79.6"],"并返回一个描述":["79.8"],"使得代码更易读和理解":["79.9"],"react":["79.9","81.6","85.6","123.6"],"组件更加可预测和易于维护":["79.10"],"在子组件中":["79.10"],"可以通过":["79.11","83.7"],"发送网络请求":["79.12"],"清理资源等":["79.12"],"条件渲染使得我们可以根据不同的情况展示不同的":["79.14"],"实现列表展示的功能":["79.15"],"通过列表渲染":["79.15","84.1"],"通过状态提升":["79.17"],"尤其对于跨多层级的组件共享数据非常有用":["79.19"],"然而":["79.19"],"我们可以在函数组件中使用类组件的功能":["79.20"],"如状态管理":["79.20"],"生命周期方法等":["79.20"],"world":["79.21"],"主要封装了和":["79.22"],"操作相关的包":["79.22"],"比如":["79.22"],"把组件渲染到页面上":["79.22"],"这一行的":["79.23"],"是写":["79.23"],"babel":["79.23","111.6"],"而不是":["79.23"],"代码运行后":["79.23"],"页面上的":["79.23"],"getsnapshotbeforeupdate":["80.1"],"之后":["80.1"],"更新之前调用":["80.1"],"用于获取更新前的":["80.1"],"component":["80.5","87.3","111.8"],"then":["80.6","80.11"],"response":["80.6","80.11","107.4"],"initialcount":["80.8"],"somestate":["80.9"],"data":["80.11","90.14","107.3","108.3","108.6","111.10","121.4"],"生命周期是组件在不同阶段经历的一系列方法调用":["80.13"],"通过这些方法":["80.13"],"我们可以在特定时间点执行代码":["80.13"],"控制组件的行为":["80.13"],"并进行必要的操作":["80.13"],"在组件创建阶段":["80.13"],"我们可以在":["80.13"],"这有助于确保组件的数据流向更加可预测和可维护":["81.1"],"在上面的例子中":["81.3","82.11","82.14","83.3","83.4","84.2","85.2","85.3","85.4","85.5","88.4","88.6"],"组件会根据传递的":["81.6"],"使用组件并传递props":["81.7","81.8","81.9","81.11","81.14"],"reactdom":["81.7","81.8","81.9","81.14"],"apple":["81.10"],"banana":["81.10"],"orange":["81.10"],"即数据只能从父组件传递到子组件":["81.12"],"而不能从子组件传递到父组件或者兄弟组件之间传递":["81.12"],"这样的设计有助于维护组件的数据流向":["81.13"],"避免对":["81.13"],"对props进行验证":["81.14"],"isrequired":["81.14"],"中用于向组件传递数据的机制":["81.15"],"它允许组件接收外部传入的数据":["81.15"],"并根据数据的变化进行动态渲染和交互":["81.15"],"通过使用":["81.15","83.0","83.7"],"这会增加服务器负担并且造成较长的加载时间":["82.1"],"而在单页应用中":["82.1"],"整个应用只加载一次":["82.1"],"组件来定义路由":["82.3"],"允许我们在一个页面组件中使用嵌套的":["82.4"],"route":["82.4"],"router":["82.5","93.4"],"paramname":["82.5"],"组件来创建路由链接":["82.6"],"push":["82.7","119.4"],"export":["82.11","82.13","82.14","84.2","85.2","85.5","111.9"],"default":["82.11","82.13","82.14","84.2","85.2","85.3","85.4","85.5","90.0","111.9"],"app":["82.12","118.4"],"我们新增了一个名为":["82.14"],"的页面组件":["82.14"],"点击链接后":["82.15"],"会自动更新":["82.15"],"url":["82.15","118.2"],"并渲染对应的页面组件":["82.15"],"如果希望在某个事件触发后实现页面导航":["82.15"],"可以使用编程式导航":["82.15"],"match":["82.15"],"并在数据发生变化时重新渲染组件":["83.0"],"值更新组件的显示内容":["83.1"],"是单向数据流的一部分":["83.1"],"我们在构造函数中初始化了一个名为":["83.3"],"onclick":["83.4","141.3"],"increment":["83.4"],"访问和显示":["83.7"],"的值":["83.7","88.6"],"并通过调用":["83.7"],"回调函数来更新":["83.7"],"组件用于存储和管理可变数据的一种机制":["83.7"],"我们可以创建交互性和动态性的组件":["83.7"],"列表渲染使我们能够根据数据数组来动态生成多个相似的元素":["84.0"],"方法来实现列表渲染":["84.1"],"方法遍历":["84.2"],"数组的每个元素":["84.2"],"style":["84.3","118.3"],"color":["84.3","148.3"],"number":["84.4","91.2","101.4"],"方法中使用箭头函数可以确保正确地绑定":["84.6"],"上下文":["84.6"],"从而避免出现意外的错误":["84.6"],"的列表渲染是一种根据数据数组来动态生成多个相似的元素":["84.6"],"条件渲染使我们能够根据不同的状态或数据来展示不同的内容":["85.0"],"中的条件渲染是一种基本且常用的技术":["85.1"],"它使我们能够根据用户的交互或应用程序的状态来实现动态的用户界面":["85.1"],"in":["85.2","91.12","95.4","107.5"],"to":["85.2","87.6","92.14"],"continue":["85.2"],"我们使用三元表达式来根据":["85.3"],"状态的值来返回不同的":["85.3"],"如果":["85.3","85.4","85.5"],"我们使用逻辑与来根据":["85.4"],"状态的值来决":["85.4"],"定是否渲染欢迎消息":["85.4"],"为":["85.4"],"我们使用条件运算符来根据":["85.5"],"状态的值来决定是否渲染提示信息":["85.5"],"建议为每个元素提供唯一的":["85.6"],"以帮助":["85.6"],"正确地更新":["85.6"],"并以声明式的方式构建数据驱动的":["86.1"],"js脚本":["86.3"],"或者":["86.3"],"bash":["86.3","111.4"],"message":["86.6","86.14","111.10"],"事件":["86.7"],"并在触发时执行相应的方法":["86.7"],"vue":["86.13","91.10","123.6","155.3"],"如清除定时器":["86.18"],"解绑事件等":["86.18"],"destroyed":["86.18"],"销毁后":["86.18"],"在实例销毁之后调用":["86.18"],"组件已经解除绑定的所有数据监听器":["86.18"],"可以执行一些销毁后的清理工作":["86.18"],"activated":["86.18"],"激活":["86.18"],"keep":["86.18"],"install":["87.2","111.7","125.5","127.1"],"routes":["87.3"],"about":["87.5","157.6","157.9","157.10"],"children":["87.7","92.13","92.17"],"components":["87.10"],"在大型应用程序中":["88.0"],"组件之间的数据共享和通信可能变得复杂":["88.0"],"用于提交":["88.1"],"而不是直接变更状态":["88.1"],"可以包含任意异步操作":["88.1"],"然后再通过提交":["88.1"],"mutations":["88.2"],"来进行":["88.2"],"使得状态变更变得可追踪和可预测":["88.2"],"插件支持":["88.2"],"mount":["88.3"],"在组件中使用":["88.3"],"在组件中":["88.3","88.5","88.6"],"可以通过计算属性":["88.3"],"computed":["88.3"],"或者方法":["88.3"],"methods":["88.3","118.12"],"来访问和修改":["88.3"],"我们在":["88.4","88.6"],"中定义了":["88.4"],"我们通过调用":["88.5"],"来触发":["88.5"],"action":["88.5"],"当点击按钮后":["88.5"],"传入id":["88.6"],"中定义了三个":["88.6"],"我们可以通过":["88.6"],"来获取这些":["88.6"],"会被调用":["89.1"],"负责通知相关的":["89.1"],"更新视图":["89.1"],"这种方式实现了数据的响应式更新":["89.1"],"确保视图总是与数据保持同步":["89.1"],"虚拟":["89.1"],"如缓存":["89.2"],"getter":["89.2"],"的结果":["89.2"],"避免不必要的触发和更新":["89.2"],"还使用了静态分析":["89.2"],"以在编译时生成更高效的代码":["89.2"],"composition":["89.2"],"api":["89.2","130.6"],"也不用写export":["90.0"],"数据":["90.1"],"方法等等":["90.1"],"均要配置在":["90.1"],"按钮":["90.2","90.12"],"提示":["90.2"],"模板中使用的数据和方法":["90.2"],"都需要通过":["90.2"],"msg":["90.4","92.13","92.17","111.11"],"这样是可以被监听到的修改value":["90.5"],"zs":["90.6","99.1"],"changemsg":["90.6","92.12","92.13"],"实现":["90.7"],"debounce":["90.7"],"的示例":["90.7"],"控制台警告":["90.8"],"cannot":["90.8"],"返回一个原值的只读代理":["90.9"],"change2":["90.10"],"change":["90.12","91.4"],"参数三":["90.16"],"options配置项":["90.16"],"为一个对象":["90.16"],"immediate":["90.16"],"新的值":["90.17"],"newval":["90.18","90.19","90.20"],"oldval":["90.18","90.19","90.20"],"默认初始时就会执行第一次":["90.21"],"产生的副作用":["90.22"],"就是在触发监听之前会调用一个函数可以处理你的逻辑":["90.22"],"但是我们采用异步的方式创建了一个监听器":["90.23"],"这个时候监听器没有与当前组件绑定":["90.23"],"强制效果始终同步触发":["90.24"],"beforecreate":["90.25"],"改用updated":["90.27"],"beforeunmount":["90.27","90.28"],"在元素被移除前调用":["90.27"],"更新结束":["90.28"],"bar":["90.29"],"修饰符对象为":["90.29"],"innerheight":["90.31"],"resize":["90.31"],"集中式状态管理容器":["91.1"],"实现任意组件通信":["91.1"],"ref":["91.1"],"父组件获取子组件实例":["91.1"],"dbclick":["91.3","91.4"],"vue3":["91.4","91.9"],"框架":["91.4"],"第一个参数为触发事件类型":["91.5"],"第二个":["91.5"],"三个":["91.5"],"n":["91.5"],"个参数即为传递给父组件的数据":["91.5"],"代码如下":["91.5"],"如果想在":["91.6"],"中使用全局事件总线功能":["91.6"],"可以使用插件":["91.6"],"mitt":["91.6"],"传递两个":["91.7"],"分别是":["91.7"],"pageno":["91.7"],"与":["91.7"],"pagesize":["91.7"],"以及绑定两个自定义事件":["91.7"],"handler":["91.8"],"子组件内部可以通过":["91.8"],"中组件内部的数据对外":["91.9"],"关闭的":["91.9"],"外部不能访问":["91.9"],"可以获取某一个组件的父组件实例":["91.9"],"与提供数据":["91.10"],"vuex":["91.11"],"但是核心概念没有":["91.11"],"组件内部遍历数组":["91.12"],"todos":["91.12"],"作用域插槽将数据回传给父组件":["91.12"],"row":["91.12"],"用法":["92.2"],"直接在其他":["92.2"],"子组件接受值":["92.6"],"来接受":["92.6"],"是无须引入的直接使用即可":["92.6"],"v":["92.8","138.1","141.4"],"简写":["92.9"],"这里的两个":["92.10"],"list":["92.12","92.13","124.0"],"默认渲染的页面":["92.13"],"插入至":["92.14"],"onchangemsg":["92.16"],"改变msg":["92.16"],"绑定多个v":["92.17"],"以上":["93.3"],"mode":["93.4"],"additional":["93.4"],"模块热更新":["93.5"],"rollup打包":["93.5"],"选择语言":["93.6"],"次提交":["94.1"],"重写虚拟dom的实现和tree":["94.2"],"文档碎片":["94.3"],"teleport":["94.3"],"瞬移组件的位置":["94.3"],"新增泛型支持":["95.1"],"需要在":["95.1"],"script":["95.1","111.8"],"标签上加上":["95.1"],"派发":["95.2"],"自定义":["95.3"],"现在有了":["95.3"],"hex":["98.2"],"0xf00d":["98.2"],"十六进制":["98.2"],"createdboolean":["98.3"],"元素类型":["98.4"],"length":["98.5","98.12","121.10"],"如果你配置了":["98.8"],"tsconfig":["98.8"],"开启了严格模式":["98.8"],"strict":["98.8"],"这样是没问题的":["98.9"],"因为存在死循环":["98.10"],"loop":["98.10"],"需求":["98.14"],"定义一个函数得到一个字符串或者数值数据的长度":["98.14"],"getlength":["98.14"],"语法糖":["99.0"],"它的绝大部分功能":["99.0"],"调用实例的方法":["99.1"],"wang":["99.2"],"也可以外部访问":["99.4"],"不能在外部访问":["99.5"],"为私有属性":["99.6"],"只能在类":["99.6"],"中访问":["99.6"],"可以在这里使用":["99.6"],"需注意":["99.8"],"如果两个函数都是static":["99.8"],"静态的是可以通过this互相调用":["99.8"],"extends":["99.9","101.7"],"c":["99.10","121.3","121.6","122.21","122.23"],"我的名字是":["99.11"],"年龄是":["99.11"],"info":["100.4"],"如果参数类型不同":["100.5"],"则参数类型应设置为":["100.5"],"any":["100.5","111.12"],"参数数量不同你可以将不同的参数设置为可选":["100.5"],"fn":["100.5"],"params":["100.5","118.2"],"如果不传类型":["101.3"],"那么typescript会类型推论":["101.3"],"abc":["101.4"],"的一个超集":["102.1"],"所以对于项目而言":["102.2"],"会使代码更加规范":["102.2"],"从而解决了大型项目代码的复杂性":["102.2"],"完全支持":["102.3"],"周边生态繁荣":["102.5"],"增加前期开发的成本":["102.6"],"毕竟你需要写更多的代码":["102.6"],"配置文件":["102.7"],"init":["102.7","126.2"],"ts":["102.10"],"obj":["103.3"],"a是必须要有的":["103.5"],"其他就不会校验了":["103.5"],"ok":["104.1"],"字面量模式":["104.1"],"空对象类型和大":["104.1"],"switch":["105.0","111.11"],"语句的":["105.0"],"fallthrough":["105.0"],"错误":["105.0"],"不允许":["105.0"],"case":["105.0","111.11"],"语句贯穿":["105.0"],"模块解析选项":["105.0"],"moduleresolution":["105.0"],"node":["105.0","107.1","107.5","122.13"],"选择模块解析策略":["105.0"],"classic":["105.0"],"typescript":["105.0","111.2"],"pre":["105.0"],"分配给类型":["106.1"],"定义变量时没有赋值":["106.1"],"推断为any类型":["106.1"],"s2":["106.2"],"使用cdn":["107.2"],"post":["107.3","111.12","118.12"],"reject":["107.4"],"添加响应拦截器":["107.4"],"也是http的实例":["107.5"],"http":["107.5"],"clientrequest":["107.5"],"token":["108.1"],"基础请求地址":["108.2"],"timeout":["108.2"],"qs":["108.3"],"stringify":["108.3"],"序列化":["108.3"],"比如表单数据":["108.3"],"服务器内部错误":["108.4"],"服务未实现":["108.4"],"网关错误":["108.4"],"put":["108.5"],"httpaction":["108.5"],"userid":["108.6"],"userlist":["108.6"],"封装":["108.7"],"指定文件添加暂存区":["109.5"],"提交指定文件":["109.6"],"往前一个版本":["109.7"],"版本号1":["109.7"],"版本号2":["109.7"],"graph":["109.8"],"查看涉及到指定文件的":["109.8"],"commit":["109.8"],"commitid":["109.10"],"基于当前分支创建分支并切换到新分支":["109.10"],"把":["109.14"],"staged":["109.15"],"unstage":["109.15"],"remove":["109.18"],"别名":["109.20"],"打开git":["110.2"],"配置后结果":["110.3"],"会生成":["110.4"],"20230222160826601":["110.5"],"来统一包管理工具":["111.2"],"涉及到技术栈包含":["111.2"],"安装指令":["111.4","111.7"],"i":["111.4"],"g":["111.4"],"项目初始化命令":["111.4"],"overrides":["111.6"],"指定解析器":["111.6"],"解析器":["111.6"],"esprima":["111.6"],"默认解析器":["111.6"],"babel解析器":["111.6"],"parser":["111.6","111.7"],"ts解析器":["111.6"],"pnpm":["111.7","122.16"],"d":["111.7"],"non":["111.8"],"assertion":["111.8"],"namespace":["111.8"],"禁止使用自定义":["111.8"],"模块和命名空间":["111.8"],"semi":["111.8"],"vuejs":["111.8"],"org":["111.8","122.17"],"multi":["111.8"],"word":["111.8"],"names":["111.8"],"要求组件名称始终为":["111.8"],"链接的单词":["111.8"],"vite":["111.9"],"config":["111.9"],"文件配置如下":["111.9"],"defineconfig":["111.9"],"获取请求体携带过来的用户名与密码":["111.10"],"调用获取用户信息函数":["111.10"],"用于判断是否有此用户":["111.10"],"checkuser":["111.10"],"find":["111.10"],"没有用户返回失败信息":["111.10"],"code":["111.10"],"账号或者密码不正确":["111.10"],"如果有返回成功信息":["111.10"],"token过期":["111.11"],"break":["111.11"],"获取用户信息":["111.12","123.14"],"如果不存在":["112.0"],"则转给哪个文件执行":["112.0"],"nginx项目部署500的问题":["112.0"],"vue项目路由不是真实存在的":["112.0"],"conf":["112.1"],"从表中删除一个列":["113.1"],"以下是":["114.0"],"大整数类型":["114.1"],"036":["114.1"],"2250738585072014e":["114.2"],"用于存储较长文本数据的字符串类型":["114.3"],"00":["114.4"],"binary":["114.5"],"varbinary":["114.5"],"blob":["114.5"],"数据组织和存储":["115.0"],"数据库提供了结构化的数据存储方式":["115.0"],"使数据的组织和管理更加方便和高效":["115.0"],"数据共享和访问控制":["115.0"],"视图":["115.1"],"复制和高可用性选项等":["115.1"],"强大的社区支持":["115.1"],"mysql拥有庞大的用户社区和活跃的开发者社区":["115.1"],"提供了广泛的文档":["115.1"],"更新数据和删除数据等操作":["117.0"],"下面是":["117.0"],"是您的":["117.1"],"用户名":["117.1"],"然后输入密码进行连接":["117.1"],"替换为要插入数据的表的名称":["117.5"],"等替换为要检索的列名":["117.6"],"替换为要更新数据的表的名称":["117.7"],"开发框架":["118.0"],"是一个动态的参数":["118.2"],"ids":["118.2"],"是动态匹配到的":["118.2"],"别忘记调用":["118.5"],"get":["118.6","118.12","123.14"],"内置中间件":["118.8"],"自":["118.8"],"版本开始":["118.8"],"内置了":["118.8"],"个常用的中间件":["118.8"],"极大的提高了":["118.8"],"项目的开发效率和体验":["118.8"],"static":["118.8"],"配置中间件":["118.10"],"的接口":["118.11"],"在浏览器中有兼容性":["118.11"],"只有支持":["118.11"],"level2":["118.11"],"custom":["118.12"],"仅支持客户端发起":["118.12"],"head":["118.12"],"请求":["118.12"],"如果客户端希望通过":["118.12"],"只有三个值":["118.14"],"application":["118.14"],"请求进行预检":["118.15"],"以获知服务器是否允许该实际请求":["118.15"],"所以这一次的":["118.15"],"应用":["119.2","120.1"],"加载外部资源或执行":["119.2"],"根据浏览器检查元素区":["119.3"],"rating":["119.4"],"num":["119.4"],"pic":["119.4"],"attr":["119.4"],"src":["119.4"],"p1461851991":["119.6"],"无间道":["119.6"],"無間道":["119.6"],"p2564556863":["119.6"],"疯狂动物城":["119.6"],"zootopia":["119.6"],"p2614500649":["119.6"],"控方证人":["119.6"],"witness":["119.6"],"prosecution":["119.6"],"electron":["120.1"],"可以构建跨平台的桌面应用":["120.1"],"指的是":["120.2"],"的主线程只有一个":["120.2"],"为了确保主线程不被阻塞":["120.2"],"主线程是用于接收客户端请求":["120.2"],"程序运行效率较低":["120.3"],"不存在创建":["121.1"],"存在截断":["121.1"],"读写":["121.1"],"存在打开失败":["121.1"],"复制文件内容":["121.3"],"users":["121.3","121.6"],"笔记":["121.3"],"mp3":["121.3"],"将读取到的数据写入到可写流中":["121.4"],"简便方式":["121.4"],"success":["121.6"],"通过可写流写入文件的内容":["121.7"],"将一个字符串转换为":["121.8"],"alloc":["121.8"],"创建指定大小的":["121.8"],"获取文件所处的绝对路径":["121.9"],"readfile":["121.9"],"占用内存的大小":["121.10"],"一个汉字3字节":["121.10"],"字符串的长度":["121.10"],"8进制输出第一个元素":["121.10"],"用来处理路径的模块":["121.11"],"它提供了一系列的方法和属性":["121.11"],"dirname":["121.12"],"files":["121.12"],"txt":["121.12"],"utf8":["121.12"],"fext":["121.14"],"用来创建":["121.15"],"解决中文乱码的问题":["121.16"],"setheader":["121.16","121.17"],"charset":["121.16"],"utf":["121.16"],"只是向外部暴露一些接口":["122.2"],"这种模块级别的访问限制":["122.6"],"叫做模块作用域":["122.6"],"加载某个模块即加载该模块的":["122.8"],"扩展名加载":["122.11"],"入口不存在或无法解析":["122.13"],"则":["122.13"],"导致在基于内置模块进行项目开发时":["122.15"],"效率很低":["122.15"],"包是基于内置模块封装出来的":["122.15"],"yarn":["122.16","157.3"],"taobao":["122.17"],"切换源头":["122.17"],"description":["122.18"],"介绍包做的什么功能":["122.18"],"描述":["122.18","125.4"],"keywords":["122.18"],"关键字":["122.18"],"xxx":["122.18"],"xx":["122.18"],"还是第三方模块":["122.19"],"他们都会优先从缓存中加载":["122.19"],"扩展名进行加载":["122.21"],"如果以上两步都失败了":["122.23"],"测试是否正常工作":["123.2"],"query":["123.2"],"select":["123.2"],"优点":["123.5"],"前端耗时短":["123.5"],"浏览器只需直接渲染页面":["123.5"],"无需额外请求数据":["123.5"],"有利于":["123.5"],"页面在浏览器拼接完成":["123.6"],"因此爬虫无法爬取页面的有效信息":["123.6"],"可使用前后端分离":["123.7"],"eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9":["123.13"],"eyjpzci6mtcsinvzzxjuyw1lijoiqnj1y2uilcjwyxnzd29yzci6iiisim5py2tuyw1lijoiagvsbg8ilcjlbwfpbci6innjdxracxeuy29tiiwidxnlcl9wawmioiiilcjpyxqioje2nde4nju3mzesimv4cci6mty0mtkwmtczmx0":["123.13"],"bmqzaknszgd8izxrggyvlvwgl7egmtwitvjgd":["123.13"],"a5u5c":["123.13"],"使用方式":["123.13"],"客户端会把":["123.13"],"中间件配置成功后":["123.14"],"即可在那些有权限的接口中":["123.14"],"来访问从":["123.14"],"字符串中解析出来的用户信息":["123.14"],"admin":["123.14"],"getinfo":["123.14"],"global":["124.0"],"移除全局依赖项":["124.0"],"列出安装的依赖项":["124.0"],"ls":["124.0"],"卸载和共享":["125.1"],"并查看版本":["125.2"],"shell":["125.2","127.1"],"文件的":["125.3"],"scripts":["125.3","157.11"],"部分定义的脚本":["125.3"],"publish":["125.3"],"将自己的包发布到":["125.3"],"仓库":["125.3","126.5"],"入口文件等":["125.4"],"在项目中":["125.4"],"你可以手动编辑":["125.4"],"命令安装所有的依赖项":["125.5"],"仓库中":["125.6"],"使其可供其他开发者使用":["125.6"],"在发布包之前":["125.6"],"按照以下步骤进行操作":["126.0"],"npm":["126.2"],"文件":["126.3"],"readme":["126.4"],"md":["126.4"],"并使其对其他人可用":["126.5"],"文件中的版本号":["126.6"],"是你要移除的包的名称":["127.2"],"更新依赖项":["127.2"],"要更新依赖项到最新版本":["127.2"],"upgrade":["127.2"],"允许控制绘图区域":["130.1"],"颜色":["130.1"],"线条":["130.1"],"轴上的位置以及宽度和高度等信息":["130.3"],"通过为图形或其他元素设置":["130.3"],"常见的":["130.4"],"绘图上下文时":["130.4"],"也可以绘制更高级的元素":["130.5"],"3d":["130.5"],"图形和曲线":["130.5"],"并使用":["130.6"],"来更新和显示数据":["130.6"],"语言或":["130.7"],"库":["130.7"],"jquery":["130.7"],"时存在差异":["130.8"],"因此需要在开发过程中进行跨浏览器的测试":["130.8"],"此外":["130.8"],"通过一个变换矩阵完成图像变换":["131.0"],"度的矩形":["131.1"],"方法必须在":["131.1"],"为水平翻转":["131.2"],"表示垂直翻转":["131.2"],"fillstyle":["131.3","132.1"],"fillrect":["131.4","132.1"],"原始图形是":["131.4"],"方法绘制的矩形":["131.5"],"左上角从":["131.5"],"平移到":["131.5"],"把图像源和目标图像":["132.0"],"使用异或操作对源图像与目标图像进行组合":["132.1"],"获取画笔":["133.1"],"2d":["133.1"],"设置或返回两条线相交时":["133.2"],"所创建的拐角类型":["133.2"],"linecap":["133.2"],"设置或返回线条的结束端点样式":["133.2"],"beginpath":["133.2"],"lineto":["134.1"],"方法定义一个辐射渐变":["134.2"],"需要指定两个圆":["134.2"],"r0":["134.2"],"r1":["134.2"],"方法接受六个参数":["134.2"],"是辐射起始的圆的圆心坐标":["134.2"],"是起始圆的半径":["134.2"],"pattern":["134.3"],"png":["134.3"],"onload":["134.3"],"rgba":["134.4"],"arcto":["136.3"],"方法主要用来绘制圆弧":["136.3"],"需要给出两个点的坐标":["136.3"],"当前点与第一个点形成一条直线":["136.3"],"第一个点与第二个点形成另一条直线":["136.3"],"然后画出与这两根直线相切的弧线":["136.3"],"第二种绘制图片的方式":["136.5"],"把图片缩放到600400":["136.5"],"top":["136.6"],"hanging":["136.6"],"middle":["136.6"],"ideographic":["136.6"],"bottom":["136.6"],"文本方向":["136.6"],"ltr":["136.6"],"scratchcard":["138.1"],"pagey":["138.2"],"math":["138.2"],"fill":["138.2","153.4","153.5","153.7","153.8"],"closepath":["138.2"],"random":["138.2"],"绘制分针":["139.3"],"stroke":["141.3","153.5"],"globalcompositeoperation":["141.3"],"source":["141.3"],"over":["141.3"],"linewidth":["141.3"],"nullbtn":["141.4"],"清空画布":["141.4"],"线宽":["141.4"],"alpha":["143.1"],"interactive":["143.2","144.7"],"给矩形添加点击事件":["143.2"],"图形和动画":["144.1"],"它提供了简单易用的":["144.1"],"进行降级渲染":["144.3"],"以确保在不支持":["144.3"],"它具有一致的接口设计和详细的文档":["144.4"],"滤镜":["144.5"],"filters":["144.5"],"它支持响应式设计":["144.6"],"resources":["144.7"],"texture":["144.7"],"允许交互":["144.7"],"endfill":["145.2","150.2","150.3","150.4","150.5"],"矩形缩放":["145.2"],"position":["145.2","150.1","150.2"],"位移":["145.2"],"pink":["146.1"],"设置文字位置":["146.1"],"screen":["146.1","152.1","152.2"],"jpg":["148.1"],"创建一个精灵":["148.1"],"sprite":["148.1","149.2","149.4"],"pointerover":["148.2"],"outerstrength":["148.3"],"强度":["148.3"],"innerstrength":["148.3"],"resolution":["149.1"],"devicepixelratio":["149.1"],"像素比":["149.1"],"设置缩放":["149.3"],"rotation":["149.4","152.1"],"创建容器":["152.0"],"设置位置":["152.1","152.2"],"旋转45度":["152.1"],"锚点":["152.2"],"anchor":["152.2"],"xml":["153.1"],"格式定义图形":["153.1"],"在不给":["153.1"],"y2":["153.3"],"ry":["153.6"],"opacity":["153.8"],"中表示":["154.0"],"物体形状的基本构建块":["154.0"],"提供了各种预定义的几何体":["154.0"],"如立方体":["154.0"],"球体":["154.0"],"圆柱体等":["154.0"],"也支持自定义几何体":["154.0"],"材质":["154.0"],"material":["154.0"],"材质定义了":["154.0"],"物体的外观和纹理":["154.0"],"提供了多种材质类型":["154.0"],"如基本材质":["154.0"],"meshbasicmaterial":["154.0"],"jsm":["155.6"],"controls":["155.6"],"camera":["155.7","155.8"],"renderer":["155.7"],"scene":["155.8"],"渲染下一帧的时候就会调用render函数":["155.8"],"单独设置某个轴的缩放":["156.1"],"官方网站":["157.0"],"blog":["157.1"],"也可以在":["157.2"],"vscode":["157.2"],"上使用":["157.2"],"按":["157.2"],"ctrl":["157.2"],"j":["157.2"],"about1":["157.6","157.9","157.10"],"功能":["157.7"],"特点":["157.7"],"details":["157.7"],"具体描述信息":["157.7"],"关于2":["157.9"],"about2":["157.9"],"text代表每一项的名字":["157.9"],"link":["157.10"],"package":["157.11"],"运行":["157.11"]},{"0":["6.8","9.13","37.3","43.8","49.13","66.6","69.6","72.2","101.4","106.2","121.10","134.3","145.2","149.4","156.3"],"1":["24.1","28.8","29.13","34.3","49.12","121.9","121.10"],"2":["5.13","6.7","6.11","12.2","24.1","65.12","67.4","121.7","146.1","148.1","157.7"],"3":["1.10","5.15","5.16","18.4","30.14","38.2","49.5","49.10","56.3","65.12","67.30","101.6","109.15","111.3","121.7","126.5","133.1","134.1"],"4":["1.3","1.5","5.16","19.3","25.11","26.8","37.7","38.2","49.5","49.6","49.7","49.11","58.0","65.5","65.12","65.14","67.4","67.16","109.1","109.21","139.3","152.1","152.2"],"5":["2.5","29.5","30.9","38.2","58.0","59.3","74.6","88.1","123.11","136.3","145.2"],"6":["5.6","13.0","24.32","49.8","58.0","66.10","123.14","149.3","154.0"],"7":["29.5","34.4","49.9","65.14"],"8":["24.32","43.3","109.8","121.10","121.17","152.1","152.2"],"9":["67.25"],"10":["3.4","24.32","49.3","100.3","121.10"],"11":["43.3"],"16":["49.11"],"18":["98.13","103.3"],"19":["49.8","114.4"],"20":["99.6","131.2"],"21":["56.4"],"24":["49.9"],"25":["24.24","136.3"],"26":["46.3","47.3"],"28":["24.21"],"30":["81.8","81.11"],"35":["50.2"],"45":["30.15"],"50":["134.2","145.2","153.6"],"54":["29.13"],"60":["25.2","153.9"],"68":["49.6"],"70":["153.9"],"79":["25.2"],"80":["118.2","118.6","118.7","121.17"],"88":["121.10"],"94":["24.2"],"100":["56.4","132.1","137.2","150.3"],"123":["28.3","28.7","101.7","103.6","104.1"],"150":["137.2","145.2"],"180":["49.12"],"200":["32.8","111.10","131.4","132.1","150.1","150.2"],"213":["103.5","106.2"],"300":["32.6","32.8","150.1","150.3","150.4"],"350":["137.1"],"400":["32.6","135.0","136.4","136.5","150.4","150.5"],"403":["111.11"],"404":["111.11"],"456":["30.15"],"500":["37.7","111.11","150.5"],"503":["108.4"],"504":["108.4"],"505":["108.4"],"560":["73.11"],"600":["65.4","150.2"],"807":["114.1"],"2019":["3.4"],"2038":["114.4"],"8080":["121.16"],"8601":["48.1"],"使用迭代器遍历map的键":["0.2"],"keysiterator":["0.2"],"for":["0.2"],"of":["0.2"],"使用迭代器遍历map的值":["0.2"],"valuesiterator":["0.2"],"outarray":["0.4"],"log":["0.5","0.6","1.3","1.4","1.5","1.6","1.10","2.3","4.16","4.21","4.22","5.6","5.15","6.18","6.19","8.1","8.6","24.7","24.8","24.31","25.8","26.6","30.2","32.6","43.5","46.2","47.2","56.7","56.12","56.13","56.16","56.19","59.12","80.6","80.11","101.4","108.3","121.14","123.2","136.6","138.2","143.2"],"解构传参":["0.6"],"console":["0.6","1.4","1.5","1.10","2.3","4.22","5.6","5.15","6.18","6.19","8.1","8.6","24.7","24.8","24.28","24.29","26.6","29.9","29.10","30.2","32.6","43.5","43.8","59.12","80.6","80.11","108.3","121.14","121.17","123.2","136.6","143.2"],"中的元素是唯一的":["1.1"],"输出":["1.6","4.11","4.12","4.16","4.17","4.18","4.21","38.1","42.7","42.9","46.2","47.2","53.1","53.3","57.1"],"array":["1.6","24.28","24.29","24.30"],"true":["1.7","30.5","30.9","31.7","38.6","56.11","57.1","81.9","85.3","85.4","85.5","90.4","90.16","98.8","101.3","111.9"],"对象中的按插入顺序排列的所有元素的值":["1.9"],"e":["1.12","143.2"],"l":["1.12"],"o":["1.12","6.12"],"注":["1.12"],"中":["1.12","90.1","107.1","123.13"],"解构传入":["1.14"],"传入":["1.15","23.1"],"中是否存在":["1.15"],"filter":["1.16"],"x":["1.16","8.6","28.4","100.4","131.4","156.1","156.2"],"has":["1.16"],"的概念":["2.0"],"允许我们以一种更面向对象的方式来创建和管理对象":["2.0"],"我的名字是":["2.1","8.1"],"并且我":["2.1"],"我的名字是john并且我30岁了":["2.2"],"我是一名":["2.3"],"我":["2.4"],"age":["2.4","8.21","46.4","47.4","56.20","90.13"],"tip":["2.6","7.5","26.7","36.2","39.3","41.4","44.4","54.2","59.11","76.5","92.10","92.16","136.3"],"总结":["2.6","25.10","36.2","54.2","76.5","85.6"],"es6":["2.6"],"中的类提供了更接近传统面向对象编程的语法":["2.6"],"使得创建和管理对象更加简洁和直观":["2.6"],"类的继承":["2.6"],"方法重写":["2.6"],"作为":["3.2"],"的一种实现":["3.2"],"是最广泛使用的一种":["3.2"],"其他脚本语言可以基于":["3.2"],"apis":["3.3","18.2","18.5"],"等":["3.3","30.12","52.9","154.0"],"环境中的组成关系":["3.3"],"finally":["3.4"],"用于在":["3.4"],"结束时执行回调":["3.4"],"rest":["3.4"],"spread":["3.4"],"属性":["3.4","5.17","22.2","45.1","67.5","81.3","81.4","84.2","122.8"],"提供了更便捷的对象和数组操作":["3.4"],"es10":["3.4"],"es2019":["3.4","5.20"],"flat":["3.4"],"使得":["4.1","19.4"],"可以更好地组织和管理代码":["4.1"],"和导出":["4.2"],"export":["4.2","84.3","84.4","84.5","90.31","111.8"],"机制进行交互":["4.2"],"以便其他模块可以使用它们":["4.6"],"name":["4.7","4.8","4.13","11.1","78.10","78.12","78.17","86.12","111.8"],"john":["4.7","46.1","47.1","56.9","56.10","56.17","78.12","81.7","81.14"],"hello":["4.8","4.12","4.13","78.7","78.10","78.11","78.20","79.23","80.5","121.3","131.2","136.6"],"my":["4.9","4.13"],"is":["4.9","76.3"],"alice":["4.14"],"bob":["4.18"],"object":["4.19"],"在日常开发中":["4.28"],"应该积极运用":["4.28"],"不会使用默认值":["5.4"],"没有第二个参数时":["5.5"],"函数参数的默认值就会生效":["5.5"],"然后才是解构赋值的默认值生效":["5.5"],"才会取到默认值":["5.5"],"注意":["5.5","28.7","39.3","59.11"],"函数参数的默认值生效以后":["5.5"],"参数解构赋值依然会进行":["5.5"],"f":["5.5"],"a":["5.5","24.24","29.13","74.6","76.3","86.16","121.1","141.3"],"b":["5.5","9.3","24.24","30.15","109.19"],"world":["5.5","131.2"],"foo":["5.6","5.7","49.14"],"注明":["5.7"],"这样做的好处是增加函数的健壮性":["5.7"],"某一个参数不得省略":["5.7"],"如果省略就抛出一个错误":["5.7"],"js":["5.7","5.12","29.9","29.10","90.2","107.1","107.2","122.13"],"function":["5.7","5.12","28.10","30.8","52.1","56.2","103.7","118.7"],"throwifmissing":["5.7"],"throw":["5.7","98.11"],"new":["5.7","32.3","39.3","42.6","42.8","53.1","59.8","98.11","99.2","99.6","99.11","141.3","149.2"],"error":["5.7","98.11","99.11","122.23"],"missing":["5.7"],"parameter":["5.7"],"mustbeprovided":["5.7"],"return":["5.7","80.5","80.6","80.9","88.3","90.2","90.31","98.14","103.7","121.12","123.2"],"上面代码的":["5.7"],"函数":["5.7","41.5","59.11","59.14","90.2"],"如果调用的时候没有参数":["5.7"],"就会调用默认值":["5.7"],"展开语法将数组展开为其中的各个元素":["5.9"],"而剩余语法则是将多个元素收集起来成为一个整体":["5.9"],"使用方式很简单在函数定义时使用":["5.10"],"紧接着跟一个收集的参数":["5.10"],"这个收集的参数就是我们所传入不定参数的集合":["5.10"],"也就是数组":["5.10"],"这样就很简单地摆脱了":["5.10"],"的束缚":["5.10"],"另外":["5.10"],"还可以指定一个默认的参数":["5.10"],"如下示例":["5.10"],"基础参数":["5.10"],"剩下的参数组成的数组":["5.10"],"剩余参数的位置":["5.11"],"剩余参数只能是最后一个参数":["5.11"],"之后不能再有其他参数":["5.11"],"fun":["5.12"],"c":["5.12","6.11","9.6","78.19","103.6"],"nan":["5.12","49.14","50.1","56.15"],"和":["5.12","8.4","20.8","25.6","37.0","44.3","81.3","82.11","92.15","130.3"],"都是":["5.12"],"undefined":["5.12","9.2","30.6"],"和展开语法相反":["5.13"],"结合使用":["5.14"],"使得代码更加现代化和易读":["5.14"],"在上面的例子中":["5.17","53.3","81.4","81.14","82.13","83.5","84.3","84.4","84.5"],"传统函数的":["5.17"],"方法使用了对象的":["5.17"],"因此":["5.17","28.13"],"指向了":["5.17"],"对象":["5.17","57.2"],"应使用传统函数而非箭头函数":["5.18"],"箭头函数在":["5.18"],"javascript":["5.18","18.1","82.1","130.5"],"代码中广泛使用":["5.18"],"做出了改变":["5.20"],"允许":["5.20"],"语句省略参数":["5.20"],"就不可变":["6.1"],"concat":["6.2"],"tolowercase":["6.5"],"touppercase":["6.5"],"foo000":["6.8"],"at":["6.19"],"cond":["6.20"],"并允许在字符串中插入变量":["7.1"],"表达式和多行文本":["7.1"],"模板字符串的引入简化了字符串拼接和多行文本的创建":["7.5"],"使得代码更加清晰易读":["7.5","10.0"],"在现代":["7.5"],"等同于hello":["8.1"],"this":["8.1","54.0","58.0","78.11"],"这种写法用于函数的返回值":["8.1"],"将会非常方便":["8.1"],"getpoint":["8.1"],"上面代码中":["8.4","136.3"],"得到的都是":["8.4"],"所以":["8.4"],"会把":["8.4"],"等价于":["8.5","28.8"],"null":["8.12","30.1","30.6","32.4","80.8","80.10","98.7"],"银色":["8.21"],"应用":["8.21"],"合并默认参数和用户参数":["8.21"],"loguser":["8.21"],"useroptions":["8.21"],"defaults":["8.21"],"username":["8.21"],"zhangsan":["8.21"],"不能转换为":["9.3"],"item":["9.9","24.30"],"自动跳过空位":["9.16"],"n":["9.17","29.5","30.6"],"无论是数组解构还是对象解构":["10.0"],"setattribute":["11.1","11.2","141.3"],"修改元素的属性":["11.2"],"的页面":["12.1"],"go":["12.2","82.15"],"版本":["13.0"],"用户代理字符串等":["13.0"],"它还可以用于检测浏览器的功能和特性":["13.0","15.0"],"screen":["13.0","148.1"],"它提供了关于用户屏幕的信息":["13.0"],"如屏幕的尺寸":["13.0"],"分辨率等":["13.0"],"可以使用它来调整页面在不同屏幕上的显示":["13.0","16.0"],"主机名":["14.0"],"路径和查询参数等":["14.0"],"加载一个新的":["14.1"],"com":["14.2","126.1"],"重新加载当前页面":["14.2"],"platform":["15.1"],"运行浏览器的操作系统平台":["15.1"],"pixeldepth":["16.1"],"获取屏幕的颜色深度":["16.2"],"屏幕颜色深度":["16.2"],"以及与窗口内容交互的功能":["17.0"],"y":["17.1","28.4","126.2","146.1","148.1"],"将窗口移动到指定的位置":["17.1"],"将窗口移动到屏幕左上角":["17.2"],"moveto":["17.2"],"在任意节点前插入":["18.1"],"ul":["18.1"],"li":["18.1"],"css":["18.1","23.1","27.0","65.12","66.3","66.4","67.31","67.33","111.9","118.8"],"web":["18.2","18.5","78.9"],"树的结构是层次化的":["19.1"],"由多个节点组成":["19.1"],"每个节点都有其特定的属性和方法":["19.1"],"可以用于获取或修改节点的信息":["19.1"],"添加":["19.1"],"如下图所示":["19.2"],"将":["19.2","79.22","84.4","123.13"],"文档以树状结构直观的表现出来":["19.2"],"标签的文字内容":["19.3"],"如":["19.3","79.1","79.20","117.1"],"title":["19.3"],"标签中的文字":["19.3"],"处理用户输入和交互等操作":["19.4"],"成为了":["19.4"],"事件":["20.0","91.5"],"鼠标拖拽":["20.1"],"网页中的一张图片":["20.1"],"event":["20.2","39.1"],"事件处理程序的逻辑代码":["20.2"],"也可以使用箭头函数来定义事件处理程序":["20.2"],"eventhandler":["20.3"],"innertext":["20.5"],"鼠标移入了":["20.5"],"修改光标的风格":["20.5"],"style":["20.5","23.2","59.3","78.21","153.7"],"cursor":["20.5"],"move":["20.5"],"监听鼠标是移出当前":["20.5"],"事件只在按下字符键时才触发":["20.8"],"不会在按下非字符键":["20.8"],"type":["20.9","86.14","111.8"],"事件类型":["20.9"],"preventdefault":["20.9"],"阻止事件的默认行为":["20.9"],"resize":["20.11"],"scroll":["20.11"],"触摸事件":["20.11"],"touchstart":["20.11"],"选项2":["20.12"],"选项3":["20.12"],"getattribute":["21.0"],"获取元素的属性值":["21.0"],"p":["21.1","78.7","78.22","80.3","80.4","80.5","80.8","92.17"],"span":["21.1","65.5"],"innerhtml":["21.2"],"childelement":["21.3"],"以下是一些常用的方法和技巧":["22.0"],"propertyvalue":["22.1"],"getpropertyvalue":["22.1"],"propertyname":["22.1"],"以满足具体的交互需求":["22.2"],"需要注意的是":["22.2"],"类名的操作只会修改元素的类列表":["22.2"],"而不会直接修改元素的":["22.2"],"class":["22.2","55.2"],"如果需要直接修改":["22.2"],"html":["23.0","27.7","91.9","118.8"],"内容":["23.0"],"textcontent":["23.0","59.3","138.2"],"queryselector":["23.1"],"选择器":["23.1"],"attributename":["23.2"],"attributevalue":["23.2"],"修改元素的样式":["23.2"],"数字":["24.0"],"布尔值等":["24.0"],"arr2":["24.1"],"空属性":["24.2"],"下面对数组常用的操作方法做一个归纳":["24.5"],"map":["24.27"],"index":["24.30","111.8","122.13"],"如果希望可以控制多行代码":["25.1"],"可以使用":["25.1","88.1","88.3","130.5"],"将语句扩起来":["25.1"],"最佳实践":["25.1"],"即使if后只有1行代码":["25.1"],"我们也应该编写代码块":["25.1"],"手机一台":["25.2"],"奖励一本参考书":["25.2"],"参考书一本":["25.2"],"其他时":["25.2"],"false":["25.3","29.12","101.3","108.2"],"则继续比较其他":["25.3"],"后的表达式":["25.3"],"直到找到":["25.3"],"为止":["25.3"],"语法":["25.4","79.22"],"如此重复":["25.5"],"知道条件表达式结果为":["25.5"],"的区别":["25.6"],"while语句是先判断再执行":["25.6"],"或":["25.10","66.2","123.13"],"keys":["25.10"],"将对象转换为可迭代对象后再使用":["25.10"],"in":["25.10"],"循环的迭代顺序是确定的":["25.11"],"因为可迭代对象的值是按照一定顺序排列的":["25.11"],"迭代对象的原理不同":["25.11"],"就是封装了一段可被重复调用执行的代码块":["26.0"],"调用的方式":["26.2"],"函数调用必须写到函数体下面":["26.2"],"叫花鸡":["26.6"],"尽量让实参的个数和形参相匹配":["26.7"],"小结":["26.7"],"函数可以带参数也可以不带参数":["26.7"],"声明函数的时候":["26.7"],"函数名括号里面的是形参":["26.7"],"形参的默认值为":["26.7"],"返回的是一个数组":["26.8"],"我们的函数如果有return":["26.8"],"则返回的是":["26.8"],"如果函数么有":["26.8"],"则返回undefined":["26.8"],"fun1":["26.8"],"还能够返回":["26.9"],"语句中的值":["26.9"],"调用":["26.11"],"其实本质已经调用了":["26.12"],"多个立即执行函数之间用分号隔开":["26.12"],"一起使用":["27.0","92.15"],"用于创建动态网页和":["27.0"],"alert":["27.1","48.5","86.13"],"那么内部的":["27.4"],"代码没有作用":["27.4"],"键值":["28.2"],"成员的值":["28.2"],"键名与键值之间用冒号分隔":["28.2"],"第二个键值对是":["28.2"],"指向对象":["28.3"],"就可以链式引用":["28.3"],"对象的属性之间用逗号分隔":["28.3"],"最后一个属性后面可以加逗号":["28.3"],"trailing":["28.3"],"comma":["28.3"],"也可以不加":["28.3"],"m":["28.3"],"上面的代码中":["28.3","28.4"],"属性后面的那个逗号":["28.3"],"当":["28.4"],"中反映得最明显":["28.5"],"加不加引号都可以":["28.7"],"因为会被自动转为字符串":["28.7"],"数值键名不能使用点运算符":["28.7"],"因为会被当成小数点":["28.7"],"只能使用方括号运算符":["28.7"],"命令只能删除对象本身的属性":["28.10"],"无法删除继承的属性":["28.10"],"关于继承参见":["28.10"],"面向对象编程":["28.10"],"章节":["28.10"],"tostring":["28.10","121.10"],"native":["28.10"],"code":["28.10"],"是否为对象自身的属性":["28.11"],"if":["28.11","31.7","80.10","121.12","123.2","138.1"],"一般情况下":["28.12"],"都是只想遍历对象自身的属性":["28.12"],"所以使用":["28.12"],"的时候":["28.12"],"应该结合使用":["28.12"],"hasownproperty":["28.12"],"方法":["28.12","42.4","59.5","83.7","118.12"],"在循环内部判断一下":["28.12"],"某个属性是否为对象自身的属性":["28.12"],"person":["28.12"],"根本无法判断":["28.13"],"到底是全局变量":["28.13"],"还是对象":["28.13"],"的一个属性":["28.13"],"这非常不利于代码的除错和模块化":["28.13"],"编译器也无法对这段代码进行优化":["28.13"],"只能留到运行时判断":["28.13"],"这就拖慢了运行速度":["28.13"],"建议不要使用":["28.13"],"可以考虑用一个临时变量代替":["28.13"],"obj1":["28.13"],"逻辑运算符":["29.1"],"赋值运算符":["29.1"],"30000000000000004":["29.2"],"模等于":["29.3"],"result":["29.5","107.4"],"aaa":["29.7"],"abc":["29.7","51.3","51.4","51.6","51.10"],"全等":["29.7"],"要求值和数据类型都一致":["29.7"],"则返回第二个值":["29.9"],"则返回第二个":["29.10"],"symbol":["30.1","36.5"],"不是数值":["30.2"],"用于表示本来要返回数值的操作失败了":["30.2"],"而不是抛出错误":["30.2"],"java":["30.4"],"只要变量要保存对象":["30.5"],"任意对象":["30.6"],"push":["30.10","38.3","38.4","38.6","40.4","82.15"],"函数声明和函数表达式两种方式":["30.11"],"利用":["30.14"],"拼接字符串的方法实现转换效果":["30.14"],"隐式转换":["30.14"],"直到读取到字符串中所有的有效的小数":["30.15"],"123px":["30.15"],"a123":["30.15"],"下面来举个例子":["30.17"],"的值赋给":["30.18"],"实际上他们共同指向了同一个堆内存对象":["30.19"],"所以更改":["30.19"],"会对":["30.19"],"复杂类型赋值":["30.20"],"是将保存对象的内存地址赋值给另一个变量":["30.20"],"反复多次使用":["31.1"],"声明同一个变量也没有问题":["31.1"],"两个关键字不能重复声明":["31.2"],"没有定义":["31.3"],"let":["31.3","32.8","136.6"],"不过":["31.4"],"声明还是在全局作用域中发生的":["31.4"],"变量会在整个页面生命周期内续存":["31.4"],"typeof":["31.5"],"操作符也不能解决":["31.5"],"会输出0":["31.6"],"然后用":["32.1"],"来操作":["32.1"],"对象提供的":["32.2"],"onreadystatechange":["32.2"],"事件监听服务器端你的通信状态":["32.2"],"接受并处理服务端向客户端响应的数据结果":["32.2"],"xhr":["32.3"],"可选的用户名用于认证用途":["32.4"],"方法中的":["32.5"],"url":["32.5","82.7","82.11","118.8"],"地址中":["32.5"],"发送请求数据中的":["32.5"],"服务端返回的结果":["32.6"],"else":["32.6","37.6","40.4","48.5","73.11","98.12","98.14","138.2"],"status":["32.8","32.9"],"success":["32.8","98.5","123.11"],"请求失败后的回调函数":["32.9"],"示例":["33.1"],"使得这些变量在内部函数执行时仍然可用":["34.0"],"以下是闭包的一些关键概念和用法":["34.0"],"可以访问外部函数":["34.1"],"中的":["34.1","88.3","88.5","132.0"],"函数作用域内的":["34.2"],"变量":["34.2"],"每次调用":["34.2"],"在上述示例中":["34.3","44.3","51.9","67.18","67.20","67.22","67.23","67.24","67.25"],"函数返回了一个包含":["34.3"],"可以延迟执行函数":["34.4"],"在某些场景中":["34.4"],"可以将函数包裹在闭包中":["34.4"],"并在需要时再调用执行":["34.4"],"以实现延迟执行的效果":["34.4"],"封装代码和状态":["34.5"],"并提供模块化的解决方案":["34.5"],"在编写复杂的":["34.5"],"并将原始对象":["35.1"],"的属性复制到新对象中":["35.1"],"但是":["35.1"],"此方法使用递归函数":["35.2"],"来复制对象的所有属性":["35.2"],"递归函数首先检查属性是否是基本类型或":["35.2"],"如果是":["35.2"],"则直接返回该属性":["35.2"],"如果是引用类型":["35.2"],"则创建一个新的对象或数组":["35.2"],"并递归复制嵌套的属性":["35.2"],"并返回":["36.1"],"的结果":["36.1"],"通过调用":["36.1"],"我们获得一个新函数":["36.1"],"它将传递的参数与":["36.1"],"可以简化函数柯里化的实现":["36.2"],"这些库提供了一些函数来帮助创建和组合柯里化函数":["36.2"],"简化开发过程":["36.2"],"函数首先检查传入的参数个数是否达到了原始函数的要求":["36.4"],"如果达到了":["36.4","36.6"],"则直接调用原始函数":["36.4","36.6"],"这种方法与前面的闭包递归方式类似":["36.5"],"但引入了一个占位符的概念":["36.5"],"函数检查传入的参数个数是否达到了原始函数的要求":["36.6"],"否则返回一个新的箭头函数":["36.6"],"对此我们就可以采用":["37.0"],"throttle":["37.0"],"防抖":["37.0"],"keydown":["37.1","37.4"],"和延迟时间":["37.2"],"返回一个新的函数":["37.2"],"该函数在延迟时间内只能执行一次":["37.2"],"当函数被调用时":["37.2"],"arguments":["37.3","74.6"],"cleartimeout":["37.3"],"表单事件":["37.4"],"settimeout":["37.5"],"apply":["37.5","37.6"],"debouncehandlescroll":["37.7"],"将函数绑定到事件上":["37.7"],"indexof":["38.5"],"中的所有任务执行完毕":["39.1"],"就会去任务队列中将对应的任务事件放入执行栈中执行":["39.1"],"主线程就是这样重复执行上面的步骤形成一个循环叫":["39.1"],"先微后宏":["39.2"],"一个宏任务执行完后会立即执行该宏任务中的微任务队列":["39.2"],"直至微任务队列清空继续执行任务队列中的下一个宏任务":["39.2"],"宏任务执行完会去清空微任务队列":["39.2"],"清空微任务后如果有":["39.2"],"再按照循环第一遍中的顺序":["39.3"],"去执行":["39.3"],"完成打印":["39.3"],"promise是同步的":["39.3"],"promise":["39.3"],"res4":["40.3"],"通过链式调用的方式":["41.0"],"使得异步操作的处理更加优雅和可读":["41.0"],"callback":["41.0"],"hell":["41.0"],"并将成功的结果":["41.1"],"传递给它":["41.1"],"当异步操作失败时":["41.1"],"方法中传递的函数会在异步操作失败时被调用":["41.2"],"成功的结果":["41.3"],"并返回另一个":["41.3"],"还有许多其他方法和特性":["41.4"],"例如":["41.4","118.8","118.11","125.4"],"race":["41.4"],"resolve":["41.4"],"当请求发生错误时":["41.5"],"函数调用":["41.5"],"将网络错误信息传递给":["41.5"],"使用封装的":["41.5"],"可以通过":["41.5","66.1"],"的":["41.5","88.6","98.5"],"方法处理请求成功的响应":["41.5"],"通过":["41.5","67.19","91.10","121.6","123.14"],"chain":["42.1"],"访问其他对象的属性和方法":["42.1"],"原型链是一个对象关联到其他对象的链条":["42.1"],"并调用":["42.2"],"方法时":["42.2"],"会首先查找":["42.2"],"对象本身是否有":["42.2"],"对象的原型对象是":["42.3"],"它是所有":["42.3"],"构造函数有一个":["42.4"],"而":["42.4"],"构造函数继承了":["42.4"],"构造函数":["42.4"],"并在其原型上创建了一个新对象":["42.4"],"该对象的原型是":["42.4"],"const":["42.6","51.6","53.1","90.5","103.1"],"buddy":["42.6","42.7","42.8","53.1"],"golden":["42.6","42.8"],"retriever":["42.6","42.8"],"以避免不必要的复杂性":["42.11"],"这种不同的方式可以导致不同的编程风格和理念":["42.13"],"而不是修改原型":["42.15"],"特别是当有大量对象实例时":["42.16"],"以避免不必要的覆盖":["42.17"],"并指定其原型":["42.18"],"它可以帮助你更清晰地定义对象之间的继承关系":["42.18"],"我们可以对数组中的每个元素进行自定义的累积运算":["43.0"],"最终得到一个累积结果":["43.0"],"是初始值":["43.1"],"在上面的示例中":["43.3"],"务必确保回调函数的正确性和无副作用":["43.9"],"以免产生意外的结果":["43.9"],"是一个全局变量":["44.1"],"在任何地方都可以访问":["44.1"],"是":["44.2"],"函数的局部变量":["44.2"],"在该函数内部和其嵌套函数中可访问":["44.2"],"内部可以访问它的父级作用域中的变量":["44.3"],"的词法作用域规则决定了函数在定义时就创建了自己的作用域":["44.4"],"作用域是":["44.4"],"中重要的概念之一":["44.4"],"了解作用域的工作原理和规则对于正确编写和组织":["44.4"],"以下是":["45.0","46.0","47.0"],"使用等号分隔":["45.1"],"通过设置":["45.1"],"可以指定":["45.1"],"的过期时间":["45.1"],"返回一个字符串":["45.2"],"包含当前域名下的所有":["45.2"],"我们将":["45.3"],"的过期时间设置为过去的时间":["45.3"],"以免遭受安全风险":["45.4"],"是一种在客户端浏览器上存储数据的常用机制":["45.4"],"适用于在用户计算机中存储有关网站的信息":["45.4"],"它提供了简单的设置":["45.4"],"获取和删除操作":["45.4"],"可用于实现用户身份验证":["45.4"],"数据是相互隔离的":["46.6","47.6"],"在使用":["46.6","47.6","86.18"],"时":["46.6","47.6","57.2"],"需要注意浏览器对于隐私和安全方面的限制":["46.6","47.6"],"例如隐私模式下的":["46.6","47.6"],"访问可能被限制":["46.6","47.6"],"second":["48.1"],"设置日期的秒数为指定的值":["48.1"],"settime":["48.1"],"time":["48.1"],"设置日期为指定的时间戳":["48.1"],"todatestring":["48.1"],"将日期对象转换为可读的字符串":["48.1"],"只返回日期部分":["48.1"],"toisostring":["48.1"],"将日期对象转换为":["48.1"],"iso":["48.1"],"格式的字符串":["48.1"],"tojson":["48.1"],"返回日期对象的":["48.1"],"year":["48.2"],"monthindex":["48.2"],"day":["48.2"],"hours":["48.2"],"还有一种获取时间戳的方法":["48.4"],"今天是2100年1月14日之前":["48.5"],"的所有方法和属性都是静态的":["49.0"],"不包含":["49.4"],"表示非数值":["50.1"],"regular":["51.1"],"expression":["51.1"],"提供了强大的工具":["51.1"],"正则表达式是一种描述字符串模式的表达式":["51.1"],"它可以用来检查":["51.1"],"pattern":["51.3","51.6","51.10"],"标记子表达式的开始和结束位置":["51.5"],"并捕获匹配的子字符串":["51.5"],"hi":["51.8"],"正则表达式":["51.9"],"gi":["51.10"],"pattern2":["51.10"],"正则表达式是":["51.11"],"中强大的工具之一":["51.11"],"它提供了灵活和高效的字符串处理能力":["51.11"],"开发者可以利用这些内置对象来编写更高效":["52.0"],"功能更强大的":["52.0"],"异常对象":["52.1"],"函数构造器":["52.1"],"属性的设置和获取等":["52.2"],"它是构建其他对象的基石":["52.2"],"的灵活性使得它在处理列表和集合数据时非常便利":["52.3"],"进行字符串操作和处理":["52.4"],"还可以用于日期和时间处理":["52.5"],"用于控制流程和决策":["52.6"],"如计算时间差":["52.7"],"添加或减去日期等":["52.7"],"可以用于复杂的数值计算和处理":["52.8"],"set":["52.9","150.2","150.3","150.4","150.5"],"它们提供了更特定的功能和方法":["52.9"],"woof":["53.1"],"mydog":["53.1"],"labrador":["53.1"],"在构造函数内部":["54.0"],"通过使用":["54.0","81.1"],"使用类的好处是它更加直观":["54.2"],"能够更清晰地表达对象的结构和行为":["54.2"],"此外":["54.2","130.6"],"方法在原型上定义":["54.2"],"因此它们在实例之间共享":["54.2"],"不会造成内存浪费":["54.2"],"它们通过相互之间的交互来完成特定的任务":["55.1"],"之后":["55.2"],"引入了":["55.2"],"关键字":["55.2"],"使得定义类和创建对象更加简洁和直观":["55.2"],"sayhi":["56.2"],"调用对象的方法":["56.3"],"大白":["56.4"],"男":["56.4"],"smallbai":["56.4"],"小白":["56.4"],"返回一个给定对象自身可枚举属性的名称数组":["56.5"],"seal":["56.5"],"封闭一个对象":["56.5"],"防止添加新属性和删除现有属性":["56.5"],"values":["56.5"],"writable":["56.11"],"enumerable":["56.11"],"其原型指向":["57.2"],"当我们调用":["57.2"],"由于":["57.2"],"原型上的属性和方法是动态的":["57.3"],"可以在运行时进行修改和添加":["57.3"],"它们使得":["57.4"],"具有强大的面向对象特性":["57.4"],"在严格模式下被视为无效的":["58.0"],"禁止对只读属性赋值":["58.0"],"禁止使用":["58.0"],"with":["58.0"],"语句":["58.0"],"当函数执行完毕":["59.1"],"它所产生的执行期上下文会被销毁":["59.1"],"上下文对象":["59.2"],"在这里":["59.3"],"this指向绑定事件的按钮元素":["59.3"],"也就是button对象":["59.3"],"clicked":["59.3"],"修改按钮文本内容为":["59.3"],"backgroundcolor":["59.3"],"green":["59.3","134.4"],"将按钮背景颜色设置为绿色":["59.3"],"输出调用foo":["59.4"],"bind":["59.5"],"第一个参数中":["59.7"],"如果不需要改变":["59.7"],"自动拥有":["59.8"],"里的属性":["59.8"],"最终实现继承":["59.8"],"son1":["59.8"],"张三":["59.8"],"json":["59.8","108.3","114.5","118.8","119.4"],"stringify":["59.8"],"到这里可以看出":["59.10"],"方法的作用是相同的":["59.10"],"唯一的区别在于":["59.10"],"然后执行":["59.11"],"中元素的最大值":["59.12"],"minvalue":["59.12"],"min":["59.12","79.22"],"其他参数":["59.14"],"函数的实参":["59.14"],"解释":["59.14"],"它不会调用":["59.14"],"但会返回":["59.14"],"color":["65.2"],"ccc":["65.2","139.3"],"因为一个元素":["65.5"],"不可能即使":["65.5"],"又是":["65.5"],"元素":["65.5","79.8","84.2"],"text":["65.6","65.9","70.1","78.5","86.14","146.2"],"align":["65.6"],"decoration":["65.9"],"underline":["65.9"],"选中div后所有的兄弟p元素":["65.9"],"通用兄弟选择器":["65.9"],"input":["65.11","76.2","90.7"],"textarea":["65.11","79.16"],"啥都选不到":["65.12"],"ie6":["65.14"],"专有":["65.14"],"zoom":["65.14"],"父级元素添加双伪元素":["65.14"],"布局提供了一种直观而强大的方法":["66.0"],"项目":["66.1","157.11"],"主轴为水平方向":["66.2"],"项目被拉伸以填满交叉轴空间":["66.3"],"container":["66.3","66.4"],"display":["66.3","66.9"],"项目逆向换行到上一行":["66.4"],"row":["66.5"],"水平排列":["66.5"],"200px":["66.7","67.11","69.2"],"项目的基准宽度为200像素":["66.7"],"wrap":["66.9"],"垂直居中":["66.10"],"设置":["66.10"],"实现垂直居中对齐":["66.10"],"规范中被称为":["67.1"],"layout":["67.1"],"items":["67.2"],"网格项可以跨越多个网格单元格":["67.2"],"100px":["67.3","67.6","67.8","67.11"],"auto":["67.3","67.8"],"网格项跨越第二列到第四列":["67.4","67.16"],"三列":["67.6"],"第二列是第一列的两倍宽度":["67.6"],"sidebar":["67.8"],"content":["67.8","74.5"],"20px":["67.9","67.10"],"行间距为":["67.9"],"列间距为":["67.10"],"定义两列":["67.11"],"center":["67.13","67.14","69.8"],"项目在列轴上居中对齐":["67.13","67.14"],"end":["67.15","121.16","121.17"],"项目在列轴上右对齐":["67.15"],"布局至关重要":["67.17"],"我们使用":["67.18","81.14","83.4"],"关键字和":["67.18"],"单位来设置网格轨道的大小":["67.18"],"函数来定义网格模板":["67.19"],"它可以简化重复的设置":["67.19"],"大于1200px时":["67.20"],"使用三列布局":["67.20"],"我们使用媒体查询来根据不同屏幕尺寸应用不同的网格布局":["67.20"],"当屏幕宽度大于":["67.20"],"我们创建了一个简单的网页布局":["67.22"],"footer":["67.23","67.24"],"我们创建了一个复杂的网页布局":["67.23"],"其中使用了":["67.23"],"我们创建了一个嵌套的网格布局":["67.24"],"它们分别适用于不同的布局需求":["67.26"],"并可以结合使用以实现复杂的布局":["67.26"],"布局适用于简单的水平或垂直布局":["67.27"],"如导航菜单":["67.27"],"共同点":["67.28"],"都支持灵活的响应式设计":["67.28"],"可以根据屏幕尺寸和设备动态调整布局":["67.28"],"以下是一些最佳实践和优化建议":["67.29"],"前缀或回退方案":["67.31"],"布局时":["67.32"],"建议合理控制网格项的数量和布局复杂度":["67.32"],"使用":["67.33","88.6","90.31","123.3"],"前缀和回退方案":["67.33"],"确保在不支持":["67.33"],"相同级别的选择器":["68.0"],"显示最后面的样式":["68.0"],"特殊规则":["68.1"],"行内样式":["68.1"],"权重大于":["68.1"],"所有选择器":["68.1"],"important":["68.1"],"的权重":["68.1"],"大于":["68.1"],"水平居中":["69.1"],"background":["69.2","69.3","70.3","78.21"],"skyblue":["69.3"],"right":["69.6"],"height":["69.7"],"100vh":["69.7"],"1px":["70.0"],"solid":["70.0"],"超出的内容溢出隐藏":["70.1"],"设置溢出隐藏":["70.2"],"ellipsis":["70.2"],"隐藏的文本以省略号显示":["70.2"],"word":["70.2"],"break":["70.2"],"0px":["70.3"],"bottom":["70.3"],"fff":["70.3"],"thumb":["71.0"],"border":["71.0"],"radius":["71.0"],"10px":["71.0","72.1"],"朝左的三角形":["72.1"],"polygon":["72.2"],"暂停和音量控件":["73.0"],"在":["73.0","81.3","82.14","90.2","111.8"],"与":["73.0","73.5"],"之间你需要插入浏览器不支持的":["73.0"],"元素的提示文本":["73.0"],"audio":["73.6"],"track":["73.6"],"ie":["73.7"],"下可以正常使用":["73.7"],"chrome":["73.7"],"重新加载":["73.8"],"您的浏览器不支持":["73.10"],"play":["73.11"],"pause":["73.11"],"使得网页可以在浏览器中正确显示和呈现":["74.0"],"定义文档使用的字符编码":["74.1"],"通常使用":["74.1"],"以支持多语言字符集":["74.1"],"定义网页的标题":["74.1"],"显示在浏览器的标题栏或标签页上":["74.1"],"用于创建无序列表":["74.2"],"ol":["74.2"],"有序列表和列表项标签":["74.2","76.1"],"用于创建有序列表":["74.2","76.1"],"div":["74.2","78.20","90.1","92.13","92.17"],"容器标签":["74.2"],"地理定位":["74.3"],"本地存储等":["74.3"],"这些新特性使得开发者可以更轻松地构建功能丰富":["74.3"],"是网页开发的基础":["74.4"],"它通过一系列标签和元素来描述网页的结构和内容":["74.4"],"html5":["74.4"],"引入了许多新特性":["74.4"],"使得网页开发更加强大和灵活":["74.4"],"succeed":["74.5"],"warning":["74.5"],"critical":["74.5"],"demanding":["74.5"],"immediate":["74.5","90.17"],"attention":["74.5"],"due":["74.5"],"serves":["74.6"],"as":["74.6"],"timing":["74.6"],"it":["74.6"],"doesn":["74.6"],"t":["74.6","95.1"],"pass":["74.6"],"any":["74.6"],"以确保它们不会被渲染":["75.0"],"请在复制代码时将特殊字符删除":["75.0"],"这是h5级别的标题":["75.1"],"点击这里跳转到示例网站":["75.3"],"示例图片":["75.4"],"列表项3":["75.5","75.6"],"标签":["75.8"],"单元格2":["75.9"],"复选框":["75.11"],"value":["75.13","90.6","106.2"],"版权所有":["75.14"],"mp3":["75.15"],"您的浏览器不支持音频播放":["75.15"],"块级标签和内联标签":["76.0"],"table":["76.1"],"tr":["76.1"],"th":["76.1"],"用于插入一个换行符":["76.2"],"输入标签":["76.2"],"用于创建各种输入字段":["76.2"],"paragraph":["76.3"],"不同的标签可以接受不同的属性":["76.4"],"它们有不同的用途和功能":["76.4"],"例如设置样式":["76.4"],"标签用于定义网页的结构和内容":["76.5"],"通过块级标签和内联标签可以构建丰富多样的网页布局和内容展示":["76.5"],"中扮演着非常重要的角色":["78.1"],"它是":["78.1"],"代码被转换为了一个函数调用":["78.2"],"第一个参数是标签名":["78.2"],"第二个参数是属性对象":["78.2"],"在这个例子中为空":["78.2"],"第三个参数是标签内容":["78.2"],"这个过程使得":["78.2"],"syntax":["78.4","78.8"],"placeholder":["78.5","90.7"],"enter":["78.5"],"about":["78.6"],"也是构建现代":["78.9"],"props":["78.11","91.8"],"和三元表达式":["78.13"],"来控制组件的渲染逻辑":["78.13"],"please":["78.14"],"sign":["78.14","78.15"],"up":["78.14","78.15"],"提供了方便的方式来实现列表渲染":["78.16"],"id":["78.17"],"onchange":["78.19"],"mycomponent":["78.20"],"usecontext":["78.21"],"button":["78.21","78.22","80.3","82.15","83.5","83.6","84.5"],"onclick":["78.22","82.15","83.5","83.6","84.5","144.7"],"不是一个全能型框架":["79.1"],"而是一个仅关注于视图层的库":["79.1"],"它可以与其他库或框架":["79.1"],"redux":["79.1"],"从而降低了代码的耦合度":["79.3"],"提高了代码的可读性和可维护性":["79.3"],"技术使得":["79.4"],"可以实现高效的页面更新":["79.4"],"减少了不必要的":["79.4"],"从而提高了应用程序的可维护性和稳定性":["79.5"],"axios":["79.6"],"用于发送网络请求等":["79.6"],"这些工具的存在使得我们可以更加专注于业务逻辑的实现":["79.6"],"ui":["79.8","79.14","86.1"],"外观的":["79.8"],"会被转换成对应的":["79.9"],"我们可以通过":["79.10","82.14","83.3"],"来访问传递过来的数据":["79.10"],"来访问和更新":["79.11"],"通过状态管理":["79.11"],"生命周期方法允许我们在组件不同阶段执行相应的逻辑":["79.12"],"从而更好地控制组件的行为和状态":["79.12"],"事件处理和原生":["79.13"],"dom":["79.13","79.23","91.5"],"事件处理非常相似":["79.13"],"实现动态和灵活的界面展示":["79.14"],"我们可以轻松地展示数据列表":["79.15"],"如商品列表":["79.15"],"select":["79.16"],"我们可以在多个组件之间共享数据和状态":["79.17"],"并保持数据的一致性和同步性":["79.17"],"我们可以将通用的逻辑封装成函数":["79.18"],"然后将该函数应用到多个组件中":["79.18"],"上下文的使用需要谨慎":["79.19"],"避免滥用":["79.19"],"从而使函数组件在功能上更接近类组件":["79.20"],"同时避免了类组件的一些问题":["79.20"],"babel":["79.22"],"jsx":["79.22"],"结构如下":["79.23"],"react":["79.23"],"代码解释":["79.23"],"render":["79.23","79.24","80.6","80.8","80.9","80.11","82.12","123.6"],"createroot":["79.24"],"document":["79.24","81.7","81.8","81.9","81.14","82.12","149.1"],"getelementbyid":["79.24","81.14"],"root":["79.24","81.14"],"生命周期对于优化性能":["80.0"],"处理副作用以及在开发过程中更好地掌握组件的行为至关重要":["80.0"],"快照":["80.1"],"componentdidupdate":["80.1"],"在组件更新之后调用":["80.1"],"使用组件并传递props":["80.4"],"reactdom":["80.4","81.10","81.11"],"处理数据":["80.6","80.11"],"使用getsnapshotbeforeupdate返回的快照进行处理":["80.10"],"进行一些操作":["80.10"],"中初始化状态和绑定方法":["80.13"],"中进行副作用操作":["80.13"],"在组件更新阶段":["80.13"],"shouldcomponentupdate":["80.13"],"中判断是否需要重新渲染":["80.13"],"允许我们向组件传递信息":["81.0"],"使组件能够根据外部数据的变化进行渲染和展示不同的内容":["81.0"],"是从父组件向子组件传递数据的主要方式":["81.1"],"上设置了":["81.3"],"并通过父组件传递了对应的值":["81.3"],"如果没有传递":["81.4"],"使用解构赋值":["81.5"],"可以直接将":["81.5"],"的值类型进行相应的渲染":["81.6"],"这样的设计有助于保持组件之间的独立性和可预测性":["81.12"],"进行意外的修改":["81.13"],"对":["81.14"],"我们可以将数据从父组件传递到子组件":["81.15"],"实现组件之间的数据传递和通信":["81.15"],"是只读的":["81.15"],"组件无法修改接收到的":["81.15"],"这有助于确保组件的数据流向更加可预测和可维护":["81.15"],"同时":["81.15","130.5","130.7"],"我们可以使用":["81.15","85.6"],"之后的页面切换是在客户端通过":["82.1"],"控制的":["82.1"],"只更新页面的部分内容":["82.1"],"属性指定":["82.3"],"路径":["82.3"],"组件":["82.4","86.18"],"从而实现页面之间的嵌套导航":["82.4"],"的语法来定义路由参数":["82.5"],"参数值可以通过":["82.5"],"match":["82.5","82.14"],"to":["82.6"],"属性指定链接的目标":["82.6"],"方法将新的":["82.7"],"添加到历史记录中":["82.7"],"add":["82.8","84.5","87.2"],"实现导航的基本步骤":["82.9"],"我们使用了":["82.11"],"组件来创建导航链接":["82.11"],"分别链接到":["82.11"],"页面":["82.11","92.2"],"然后使用":["82.11"],"指定":["82.11"],"路径和对应的页面组件":["82.11"],"我们新增了一个名为":["82.13"],"的页面组件":["82.13"],"并在":["82.13","82.14"],"组件中定义了一个嵌套路由":["82.13"],"当用户访问":["82.13"],"路径时":["82.13"],"组件会嵌套在":["82.13"],"组件中显示":["82.13"],"组件中定义了一个带有参数的路由":["82.14"],"表示这是一个路由参数":["82.14"],"params":["82.14","82.15"],"组件中获取传递的参数":["82.14"],"handlenavigate":["82.15"],"h2":["82.15"],"profile":["82.15","87.6"],"我们可以创建交互性和动态性的组件":["83.0"],"意味着数据流向是自上而下的":["83.1"],"通常":["83.1"],"是在组件的父组件中定义":["83.1"],"并通过":["83.1","84.4"],"并将其初始值设置为":["83.3"],"在组件的":["83.3"],"方法中":["83.3"],"我们定义了一个":["83.4"],"用于处理点击按钮时的事件":["83.4"],"在该方法中":["83.4"],"方法来更新":["83.4"],"increment":["83.5","83.6"],"我们在":["83.5"],"使用户界面能够随着用户操作或其他事件的发生而更新":["83.7"],"组件的一部分":["83.7"],"受到组件的生命周期和渲染过程的影响":["83.7"],"是单向数据流的一部分":["83.7"],"通常由父组件传递给子组件":["83.7"],"传递":["83.7"],"要正确地更新":["83.7"],"应始终使用":["83.7"],"并返回一个新的":["83.7"],"并将它们渲染到用户界面上":["84.0"],"我们可以轻松地生成多个元素":["84.1"],"并将它们动态地展示给用户":["84.1"],"并使用箭头函数生成一个新的":["84.2"],"我们为每个":["84.2"],"元素添加了":["84.2"],"用于帮助":["84.2"],"default":["84.3","84.4","84.5","90.31","111.11"],"我们使用条件语句判断数字的奇偶性":["84.3"],"并根据奇偶性为列表项设置不同的样式":["84.3"],"我们定义了一个名为":["84.4"],"的子组件":["84.4"],"数组传递给子组件":["84.4"],"并将它们渲染到用户界面上的技术":["84.6"],"我们可以使用数组的":["84.6"],"方法来实现列表渲染":["84.6"],"并根据条件来渲染不同样式的列表项":["84.6"],"通过将数据传递给子组件":["84.6"],"我们可以实现数据和渲染逻辑的分离":["84.6"],"使代码更加清晰和易于维护":["84.6"],"在使用列表渲染时":["84.6"],"我们应该遵循最佳实践":["84.6"],"从而实现动态和交互性的用户界面":["85.0"],"通过条件渲染":["85.1"],"我们可以根据不同的条件显示不同的组件":["85.1"],"或者在特定条件下渲染特定的内容":["85.1"],"我们通过":["85.2"],"状态来控制是否渲染欢迎消息":["85.2"],"如果用户已登录":["85.2"],"则渲染欢迎消息":["85.2"],"否则":["85.2","85.3","85.5"],"渲染提示信息":["85.2"],"为":["85.3","85.5","88.6"],"则返回":["85.3","85.4","85.5"],"返回":["85.3","85.4","85.5"],"的值":["85.5"],"的条件渲染是一种根据特定条件来决定是否渲染组件或组件的一部分的技术":["85.6"],"条件运算符等不同的方式来实现条件渲染":["85.6"],"使用npm安装vue":["86.3"],"message":["86.4"],"click":["86.7","143.2","144.7"],"handleclick":["86.7"],"hidden":["86.9"],"visible":["86.10"],"methods":["86.13"],"i":["86.16","109.16"],"am":["86.16"],"alive":["86.18"],"包裹的组件激活时调用":["86.18"],"deactivated":["86.18"],"停用":["86.18"],"确保您对":["87.1"],"使用yarn":["87.2"],"history":["87.3"],"userid":["87.6"],"child":["87.7"],"检查用户是否登录":["87.8"],"进行相关逻辑处理":["87.8"],"component":["87.9"],"lazyloadedcomponent":["87.10"],"vue":["87.10","90.1","90.9","90.21","90.22","111.2"],"页面等":["87.12"],"提供了一种可预测的方式来管理状态":["88.0"],"来改变状态":["88.1"],"modules":["88.1","91.11"],"模块":["88.1"],"当应用的状态较为复杂时":["88.1"],"将状态分割成多个子模块":["88.1"],"每个子模块有自己的":["88.1"],"支持插件":["88.2"],"可以方便地扩展和定制":["88.2"],"的状态":["88.3"],"通过计算属性获取状态":["88.3"],"count":["88.3"],"通过getters获取状态":["88.3"],"状态和两个":["88.4"],"在组件中":["88.4"],"我们通过调用":["88.4"],"会延迟":["88.5"],"秒钟":["88.5"],"然后通过":["88.5"],"mutation":["88.5","91.11"],"方法来修改":["88.5"],"状态":["88.5"],"返回所有的":["88.6"],"数组":["88.6"],"返回未完成的":["88.6"],"方法过滤出":["88.6"],"项":["88.6"],"这是一个带参数的":["88.6"],"在组件中调用时需要传入一个":["88.6"],"virtual":["89.1"],"使用虚拟":["89.1"],"来管理视图的渲染和更新":["89.1"],"当数据变化时":["89.1"],"会比较前后两个虚拟":["89.1"],"允许开发者更灵活地组织组件逻辑":["89.2"],"以及更好地重用和组合代码":["89.2"],"的设计也与":["89.2"],"的响应式系统紧密相关":["89.2"],"使得组件的代码更易于理解和维护":["89.2"],"总之":["89.2"],"的响应式原理通过":["89.2"],"对象来实现数据的监听和依赖追踪":["89.2"],"甚至是自定义指令也可以在我们的":["90.0"],"中自动获得":["90.0"],"本篇内容基于":["90.0"],"template":["90.1","90.31","92.2"],"setup":["90.2","111.8"],"出去才可以被使用":["90.2"],"函数创建的响应式数据":["90.2"],"在模板中可以直接被使用":["90.2"],"lisi":["90.6","99.6"],"app":["90.7","92.14","111.8","118.10","150.1","150.2","150.3","150.4"],"v":["90.7"],"model":["90.7","141.4"],"keyword":["90.7","125.3"],"be":["90.8"],"made":["90.8"],"test2":["90.10"],"state":["90.12"],"info":["90.15","111.10","124.0","125.3"],"deep":["90.16"],"是否立即调用一次":["90.16"],"旧的值":["90.17"],"新的值":["90.18","90.19","90.20"],"从而可以收集需要监视的数据":["90.21"],"例如防抖":["90.22"],"所以即使组件销毁了":["90.23"],"监听器依然存在":["90.23"],"post":["90.24"],"组件更新后执行":["90.24"],"created":["90.25"],"这两个生命周期的":["90.25"],"unmounted":["90.27","90.28"],"指令被移除后调用":["90.27"],"卸载之前":["90.28"],"dir":["90.29"],"一个对象":["90.29"],"在注册指令时作为参数传递":["90.29"],"在以下指令中":["90.29"],"第三个":["90.29"],"当前元素的虚拟dom":["90.29"],"也就是vnode":["90.29"],"h3":["90.31"],"屏幕尺寸":["90.31"],"vc":["91.1"],"获取子组件的响应式数据以及方法":["91.1"],"slot":["91.1"],"插槽":["91.1"],"默认插槽":["91.1"],"子组件获取到":["91.2"],"change":["91.3"],"mouseenter":["91.3"],"mouseleave":["91.3"],"这类原生":["91.4"],"不管是在标签":["91.4"],"自定义标签上":["91.4"],"组件标签":["91.4"],"正常说组件标签书写":["91.5"],"应该为原生":["91.5"],"但是如果子组件内部通过":["91.5"],"实现":["91.6"],"官网地址":["91.6"],"https":["91.6"],"www":["91.6"],"实现父子数据同步":["91.7"],"方法获取组件属性与事件":["91.8"],"因此你也发现了":["91.8"],"它类似于":["91.8"],"可以接受父组件传递过来的属性与属性值":["91.8"],"需要注意如果":["91.8"],"因此可以使用父组件内部的数据与方法":["91.9"],"必须子组件内部拥有一个按钮点击时候获取父组件实例":["91.9"],"当然父组件的数据与方法需要通过":["91.9"],"方法对外暴露":["91.9"],"后代组件可以通过":["91.10"],"方法获取数据":["91.10"],"父组件内部代码如下":["91.12"],"立即使用即可":["92.2"],"无需引入":["92.2"],"componenta":["92.5"],"菜单区域":["92.6"],"abcde":["92.8"],"插值表达式渲染的内容都是一样的":["92.10"],"父组件模板中的表达式只能访问父组件的作用域":["92.10"],"页面还没加载出来展示的页面":["92.13"],"children":["92.14"],"默认":["92.14","111.6"],"transition":["92.15"],"如果传递普通的值":["92.16"],"是不具有响应式的":["92.16"],"子组件":["92.17"],"lint":["93.4"],"where":["93.4"],"do":["93.4"],"prefer":["93.4"],"placing":["93.4"],"eslint":["93.4"],"它使用":["93.5"],"rollup":["93.5"],"打包你的代码":["93.5"],"切换目录":["93.6"],"安装包":["93.6"],"运行项目":["93.6"],"次pr":["94.1"],"vue3支持vue2的大多数特性":["94.1"],"shaking":["94.2"],"suspense":["94.3"],"异步加载组件的loading界面":["94.3"],"其它api更新":["94.3"],"generic":["95.1"],"ts":["95.2"],"写法":["95.2"],"vue3":["95.2"],"就可以随意定义":["95.3"],"ddd":["98.1"],"binary":["98.2"],"0b1010":["98.2"],"二进制":["98.2"],"这样会报错":["98.3"],"应为事实上":["98.3"],"数字是没有length":["98.5"],"元组类型还可以支持自定义名称和变为可选的":["98.5"],"异构枚举":["98.6"],"可以同时包含数字和字符串":["98.6"],"那么":["98.8"],"会报错":["98.8"],"或者这样的":["98.9"],"es5都可以做到":["99.0"],"新的class写法只是让对象原型的写法更加清晰":["99.0"],"如果不写默认就是public":["99.4"],"ls":["99.6"],"super":["99.9"],"d":["99.10","122.21","122.22"],"res":["99.11","107.3"],"zs":["99.11","103.2"],"无法创建抽象类的实例":["99.11"],"res1":["99.11"],"string":["100.4","111.8"],"args":["100.4"],"void":["100.5"],"params2":["100.5"],"默认t为boolean类型":["101.3"],"length":["101.4"],"而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程":["102.1"],"其次":["102.2"],"浏览器是不识别ts的":["102.2"],"所以在编译的时候":["102.2"],"可以直接转换":["102.3"],"有类型支持":["102.3"],"vue3已全面支持":["102.5"],"但是便于后期的维护":["102.6"],"严格模式":["102.7"],"在tsconfig":["102.7"],"json中":["102.7"],"strict":["102.7"],"直接进行ts":["102.10"],"的抽象":["103.0"],"描述":["103.0"],"一样":["104.1"],"也是表示原始类型和非原始类型的集合":["104.1"],"a1":["104.1"],"a2":["104.1"],"a3":["104.1"],"baseurl":["105.0"],"用于解析非相对模块名称的基目录":["105.0"],"paths":["105.0"],"模块名到基于":["105.0"],"的路径映射的列表":["105.0"],"rootdirs":["105.0"],"根文件夹列表":["105.0"],"其组合内容表示项目运行时的结构内容":["105.0"],"typeroots":["105.0"],"包含类型声明的文件列表":["105.0"],"types":["105.0"],"需要包含的类型声明文件名列表":["105.0"],"allowsyntheticdefaultimports":["105.0"],"允许从没有设置默认导出的模块中默认导入":["105.0"],"source":["105.0"],"options":["105.0"],"sourceroot":["105.0"],"指定调试器应该找到":["105.0"],"文件而不是源文件的位置":["105.0"],"maproot":["105.0"],"指定调试器应该找到映射文件而不是生成文件的位置":["105.0"],"inlinesourcemap":["105.0"],"n2":["106.1"],"any类型":["106.1"],"定义值的别名":["106.2"],"boolean":["106.2"],"对响应数据做点什么":["107.4"],"在设置请求时发生了一些事情":["107.5"],"触发了一个错误":["107.5"],"可以简化服务器返回的数据":["108.1"],"处理":["108.1"],"http":["108.1"],"请求超时设置":["108.2"],"withcredentials":["108.2"],"默认类型":["108.3"],"服务不可用":["108.4"],"服务暂时无法访问":["108.4"],"请稍后再试":["108.4"],"一次封装终身受益":["108.7"],"美团后端连连点赞":["108.7"],"查看全局配置":["109.1"],"list":["109.1","110.3"],"file1":["109.5"],"记录":["109.8"],"filename":["109.8"],"查看指定文件每一行修改对应的":["109.8"],"checkout":["109.10"],"到":["109.14","114.4"],"工作区和暂存区所有文件恢复成和":["109.15"],"hard":["109.15"],"rebase":["109.16"],"修改别名":["109.18"],"远程仓库分支名":["109.19"],"分支名":["109.20"],"delete":["109.21","113.2","118.12","123.3"],"强制推送":["109.21"],"downloads":["110.1"],"bash命令窗口":["110.2"],"文件":["110.4","111.8","118.8"],"这个文件一般在c盘的":["110.4"],"20230222161109182":["110.5"],"router":["111.2","112.0"],"pinia":["111.2"],"element":["111.2"],"plus":["111.2"],"create":["111.4"],"进入到项目根目录":["111.4"],"install":["111.4"],"指定解析器选项":["111.6"],"parseroptions":["111.6"],"ecmaversion":["111.6"],"latest":["111.6"],"校验ecma最新版本":["111.6"],"sourcetype":["111.6"],"设置为":["111.6"],"script":["111.6"],"或者":["111.6"],"uses":["111.8"],"防止":["111.8"],"src":["111.8","141.3"],"文件夹目录下创建一个":["111.8"],"用于注册":["111.8"],"components":["111.8"],"文件夹内部全部全局组件":["111.8"],"import":["111.8"],"svgicon":["111.8"],"from":["111.8"],"preprocessoroptions":["111.9"],"javascriptenabled":["111.9"],"additionaldata":["111.9"],"获取用户信息":["111.10"],"get":["111.10","111.12"],"request":["111.10"],"获取请求头携带token":["111.10"],"headers":["111.10"],"查看用户信息是否包含有次token用户":["111.10"],"无权访问":["111.11"],"请求地址错误":["111.11"],"服务器出现问题":["111.11"],"requserinfo":["111.12"],"退出登录":["111.12"],"要加上这段代码":["112.0"],"rewrite":["112.0"],"start":["112.1"],"命令":["113.0"],"删除一个表":["113.1"],"tables":["113.1"],"列出数据库中的所有表":["113.1"],"describe":["113.1"],"更新表中的数据":["113.2"],"更改用户的密码":["113.3"],"drop":["113.3"],"删除一个用户":["113.3"],"show":["113.3","138.1"],"中常用的数据类型":["114.0"],"utc":["114.4"],"类型等":["114.5"],"在设计表时":["114.5"],"数据库允许多个用户同时访问和共享数据":["115.0"],"同时提供了对数据的安全访问控制":["115.0"],"数据一致性和完整性":["115.0"],"数据库通过实施数据完整性约束和事务支持来保证数据的一致性和完整性":["115.0"],"教程和支持资源":["115.1"],"mysql提供了多种访问方式":["115.1"],"包括命令行客户端":["115.1"],"图形化客户端工具":["115.1","117.1"],"如mysql":["115.1"],"的基本使用步骤":["117.0"],"打开图形化客户端工具":["117.1"],"替换为您要使用的数据库的名称":["117.3"],"替换为您希望创建的表的名称":["117.4"],"等替换为表的列名":["117.5"],"替换为要检索数据的表的名称":["117.6"],"等替换为要更新的列名和相应的值":["117.7"],"替换为要删除数据的表的名称":["117.8"],"是用于快速创建服务器的第三方模块":["118.0"],"参数":["118.2"],"默认是一个空对象":["118.2"],"listen":["118.2","118.4","118.6","118.7","121.16","121.17"],"login":["118.3"],"通过带有":["118.3"],"前缀的地址访问":["118.3"],"目录下的文件":["118.3"],"添加访问前缀":["118.4"],"use":["118.4","118.10"],"api":["118.4","120.1","144.1"],"函数后别写代码":["118.5"],"多个中间件共享":["118.5"],"page":["118.6"],"快速托管静态资源的内置中间件":["118.8"],"图片":["118.8"],"样式等":["118.8"],"无兼容性":["118.8"],"解析":["118.8","123.14"],"格式的请求体数据":["118.8"],"有兼容性":["118.8"],"仅在":["118.8"],"版本中可用":["118.8"],"urlencoded":["118.8","118.14"],"的浏览器":["118.11"],"才能正常访问开启了":["118.11"],"的服务端接口":["118.11"],"put":["118.12"],"等方式请求服务器的资源":["118.12"],"alow":["118.12"],"来指明实际请求所允许使用的":["118.12"],"form":["118.14"],"multipart":["118.14"],"请求称为":["118.15"],"spa":["119.2"],"单页应用程序":["119.2"],"常见的":["119.2"],"要爬取的内容":["119.3"],"将数据写入文件中":["119.4"],"writefile":["119.4","121.3"],"files":["119.4","121.9"],"p1505392928":["119.6"],"大话西游之大圣娶亲":["119.6"],"西遊記大結局之仙履奇緣":["119.6"],"p2455050536":["119.6"],"熔炉":["119.6"],"도가니":["119.6"],"p1363250216":["119.6"],"教父":["119.6"],"godfather":["119.6"],"restify":["120.1"],"但不会处理具体的任务":["120.2"],"的背后还有一个线程池":["120.2"],"线程池会处理长时间运行的任务":["120.2"],"比如":["120.2"],"每秒的请求数维持在一个较低的水平":["120.3"],"追加":["121.1"],"ax":["121.1"],"存在失败":["121.1"],"将data写入到文件中":["121.3"],"lilichao":["121.4"],"desktop":["121.4"],"写入的内容":["121.6"],"w":["121.6"],"allounsafe":["121.8"],"可能包含敏感数据":["121.8"],"分配内存时不会清除内存残留的数据":["121.8"],"txt":["121.9"],"utf8":["121.9"],"创建一个10个字节的buffer":["121.10"],"buf2":["121.10"],"alloc":["121.10"],"通过索引":["121.10"],"来操作buf中的元素":["121.10"],"用来满足用户对路径的处理需求":["121.11"],"err":["121.12","123.2"],"datastr":["121.12"],"namewithoutext":["121.13"],"服务器的模块":["121.15"],"向客户端响应内容":["121.16"],"charset":["121.17"],"utf":["121.17"],"与外部其它模块通信":["122.2"],"模块化规范是对代码进行模块化拆分和组合时需要遵守的规则":["122.2"],"防止全局变量污染":["122.6"],"指向同一个对象":["122.7"],"最终共享的结果":["122.7"],"以":["122.7"],"将会试图加载目录下的":["122.13"],"提供了更高级":["122.15"],"更方便的":["122.15"],"极大提高了开发效率":["122.15"],"下载安装速度是比":["122.16"],"xxxx":["122.18"],"license":["122.18"],"isc":["122.18"],"开源协议":["122.18"],"发布":["122.18"],"publish":["122.18"],"从而提高模块的加载效率":["122.19"],"会在终端打印错误消息":["122.23"],"报告模块的缺失":["122.23"],"results":["123.2"],"删除数据":["123.3"],"语句会真正删除数据":["123.3"],"保险起见":["123.3"],"seo":["123.5"],"服务器响应的是完整的":["123.5"],"页面内容":["123.5"],"有利于爬虫爬取信息":["123.5"],"缺点":["123.5"],"占用服务器资源":["123.5"],"等框架的":["123.6"],"ssr":["123.6"],"server":["123.6"],"side":["123.6"],"为同时兼顾首页渲染速度和前后端分离开发效率":["123.7"],"可采用首屏服务器端渲染":["123.7"],"清空":["123.11"],"是目前最流行的跨域认证解决方案":["123.12"],"存储在":["123.13"],"localstorage":["123.13"],"sessionstorage":["123.13"],"此后客户端与服务端通信需要携带":["123.13"],"进行身份认证":["123.13"],"存在":["123.13"],"获取信息成功":["123.14"],"data":["123.14"],"捕获解析":["123.14"],"失败后产生的错误":["123.14"],"当使用":["123.14"],"如果客户端发送过来的":["123.14"],"字符串过期或不合法":["123.14"],"会产生一个解析失败的错误":["123.14"],"影响项目的正常运行":["123.14"],"的错误中间件":["123.14"],"捕获这个错误并进行相关的处理":["123.14"],"显示依赖项树":["124.0"],"tree":["124.0"],"查看包信息":["124.0"],"搜索包":["124.0","125.3"],"包":["125.1"],"它提供了一个庞大的软件生态系统":["125.1"],"使开发者能够快速构建复杂的应用程序":["125.1"],"version":["125.2"],"如果输出显示了":["125.2"],"使其可供他人使用":["125.3"],"search":["125.3"],"并添加或修改相关配置":["125.4"],"将会根据":["125.5"],"请确保遵循":["125.6"],"的发布准则和最佳实践":["125.6"],"npmjs":["126.1"],"实现你的功能逻辑":["126.3"],"这是你的包的说明文档":["126.4"],"提供关于包的介绍":["126.4"],"确保发布成功后":["126.5"],"你可以在":["126.5"],"执行以下命令发布新版本的包":["126.6"],"shell":["126.6"],"npm":["126.6","157.1"],"替换为你的包的名称":["126.7"],"g":["127.1"],"以上任一方法都将安装":["127.1"],"这将检查所有依赖项":["127.2"],"并将它们更新到最新可用版本":["127.2"],"运行脚本命令":["127.2"],"如果在":["127.2"],"文件的":["127.2"],"scripts":["127.2"],"部分定义了一些自定义脚本命令":["127.2"],"你可以使用以下命令运行它们":["127.2"],"文本":["130.1"],"图像等多种元素":["130.1"],"坐标值":["130.3"],"可以在":["130.3"],"渲染上下文":["130.4"],"它提供了许多":["130.4"],"来绘制图形":["130.4"],"还可以与其他":["130.6"],"greensock":["130.7"],"等库或框架":["130.7"],"来进行高级别的动画控制":["130.7"],"在处理大量的图像和其他复杂的数据时":["130.8"],"settransform":["131.0"],"方法之前调用":["131.1"],"否则是不起作用的":["131.1"],"旋转中心点始终是画布左上角的原点":["131.1"],"如果要更改中心点":["131.1"],"font":["131.2"],"16px":["131.2"],"serif":["131.2"],"filltext":["131.2"],"red":["131.3"],"的矩形":["131.4"],"结果缩放成":["131.4"],"并且左上角从":["131.4"],"方法取消了这个变换":["131.5"],"已绘制的图形不受影响":["131.5"],"将画布恢复到默认状态":["131.5"],"变换矩形":["131.5"],"globalcompositeoperation":["132.0","132.1"],"操作":["132.0"],"绘制图形":["133.1"],"新建一条路径":["133.2"],"生成之后":["133.2"],"图形绘制命令被指向到路径上生成路径":["133.2"],"生成路径的第一步":["133.2"],"叫做":["133.2"],"是辐射终止的圆的圆心坐标":["134.2"],"是终止圆的半径":["134.2"],"该方法的返回值也是一个":["134.2"],"fillstyle":["134.3","134.4"],"fillrect":["134.3"],"fill":["136.2"],"填充颜色":["136.2"],"清除模式":["136.2"],"lineto":["136.3"],"提示":["136.3"],"有":["136.3"],"个参数":["136.3"],"前两个参数是第一个点的坐标":["136.3"],"第三个参数和第四个参数是第二个点的坐标":["136.3"],"第三种绘制图片的方式":["136.5"],"裁剪图片":["136.5"],"img参数后面四个参数分别为原图片上面要裁剪的起点位置和终点位置":["136.5"],"最后四个参数分别为画布的位置和要渲染的矩形宽高":["136.5"],"rtl":["136.6"],"预测量文本宽度":["136.6"],"一等奖":["138.2"],"绘制时针":["139.3"],"urldata":["141.3"],"todataurl":["141.3"],"img":["141.3","157.4"],"image":["141.3"],"body":["141.3","149.1"],"appendchild":["141.3","149.1"],"downloada":["141.3"],"createelement":["141.3"],"download":["141.3"],"签名":["141.3"],"linewidth":["141.4"],"canvas":["141.4"],"pointerleave":["143.1"],"on":["143.2","144.7"],"和强大的渲染能力":["144.1"],"的设备上也能正常运行":["144.3"],"方便开发者查阅和学习":["144.4"],"事件处理等":["144.5"],"开发者可以通过组合这些功能来创建复杂的交互式图形界面和游戏":["144.5"],"使开发者能够创建适应不同屏幕大小和分辨率的应用":["144.6"],"点击事件处理函数":["144.7"],"将精灵添加到场景":["144.7"],"stage":["144.7","150.1"],"addchild":["144.7","152.1","152.2"],"相对于左上角":["145.2"],"rotation":["145.2","152.2"],"旋转":["145.2"],"pivot":["145.2"],"设置文字锚点":["146.1"],"anchor":["146.1"],"endfill":["146.2"],"mask":["146.2"],"使用图形作为精灵的遮罩":["146.2"],"设置精灵的锚点":["148.1"],"pointerout":["148.2"],"0xff0000":["148.3"],"quality":["148.3"],"将轮廓滤镜添加到精灵上":["148.3"],"将应用画布添加到dom中":["149.1"],"设置透明度":["149.3","152.1","152.2"],"alpha":["149.3","152.1","152.2"],"01":["149.4"],"position":["150.3","150.4","150.5"],"对多个资源分组":["152.0"],"设置容器属性即可应用到容器内的精灵":["152.0"],"math":["152.1","152.2"],"pi":["152.1","152.2"],"设置缩放":["152.1","152.2"],"scale":["152.1","152.2"],"将精灵添加到舞台":["152.1","152.2"],"创建精灵2":["152.1"],"旋转45度":["152.2"],"设置宽高时":["153.1"],"它的默认宽度是":["153.1"],"300px":["153.1"],"默认高度是":["153.1"],"stroke":["153.3","153.7","153.8"],"000000":["153.3"],"pink":["153.4"],"none":["153.5","153.7"],"cyan":["153.8"],"光滑材质":["154.0"],"meshphongmaterial":["154.0"],"和标准材质":["154.0"],"meshstandardmaterial":["154.0"],"光源":["154.0"],"light":["154.0"],"光源用于照亮场景中的":["154.0"],"物体":["154.0"],"支持不同类型的光源":["154.0"],"如环境光":["154.0"],"ambientlight":["154.0"],"点光源":["154.0"],"pointlight":["154.0"],"平行光":["154.0"],"directionallight":["154.0"],"完整代码":["155.3"],"domelement":["155.7"],"requestanimationframe":["155.8"],"line":["155.9","155.12","156.5"],"numbers":["155.9","155.12","156.5"],"中文网":["157.0"],"yarn":["157.1"],"打开终端":["157.2"],"点击":["157.2"],"符号右边的下三角":["157.2"],"输入以下命令":["157.2"],"mkdir":["157.2"],"run":["157.3"],"dev":["157.3"],"build":["157.4"],"md":["157.6"],"about2":["157.6"],"️":["157.7"],"link是连接的位置":["157.9"],"其他":["157.9"],"这种是没有下拉菜单的版本":["157.9"],"vitepress":["157.9"],"的根目录是从":["157.9"],"开始算的":["157.9"],"关于2":["157.10"],"or":["157.11"],"打开":["157.11"],"点击分支":["157.11"],"可以看到会多个一个名":["157.11"]},{"0":["6.18","9.9","17.2","74.6","118.2","118.4","118.6","118.7","121.16","121.17","136.2","136.6","143.1","146.1","148.1"],"1":["9.13","24.12","24.13","67.16","101.4","103.7","118.2","118.4","118.6","118.7","121.16","121.17"],"2":["24.7","24.8","29.13","51.7","103.7","121.10","136.6"],"3":["29.13","67.16","80.1","95.2","121.10","148.1","157.7"],"4":["1.7","1.10","6.12","9.17","26.6","109.15","121.7"],"5":["5.15","93.6","118.8","118.11","134.1","136.6","138.2","143.1","146.1"],"6":["2.5","9.17","109.7"],"7":["29.2","66.10","99.11","154.0"],"8":["5.15","154.0"],"10":["8.1","31.1","80.4"],"12":["5.16"],"13":["49.9"],"14":["114.4"],"15":["134.1","139.3"],"18":["31.3","103.2","114.1"],"20":["101.5","104.1"],"21":["49.8"],"25":["46.1","47.1"],"30":["31.1","100.3"],"50":["24.2"],"60":["43.8"],"80":["118.4"],"100":["24.2","29.2","72.2","99.2","133.1","134.4","139.3"],"123":["100.5","103.5","106.1"],"127":["118.2","118.4","118.6","118.7","121.16","121.17"],"150":["132.1"],"180":["98.13"],"200":["133.1"],"222":["26.3"],"250":["132.1"],"255":["121.10"],"300":["133.1","136.5","136.6"],"320":["73.11"],"400":["134.3","136.2"],"401":["123.14"],"446":["114.1"],"456":["100.5"],"500":["123.14","135.0"],"551":["114.1"],"600":["136.2","136.5","141.4"],"615":["114.1"],"666":["26.8"],"709":["114.1"],"744":["114.1"],"750":["141.4"],"849":["49.7"],"1234":["98.14"],"2023":["75.14"],"8080":["118.3"],"101010":["50.2"],"使用迭代器遍历map的键值对":["0.2"],"entriesiterator":["0.2"],"false":["0.5","1.7","8.8","8.17","9.15","24.29","25.5","56.20","90.4","102.7","118.8"],"新地址":["0.5"],"tostring":["1.12","48.1","98.12","98.14","121.8"],"方法是不能将":["1.12"],"转换成":["1.12"],"唯一值":["1.14"],"相当于去重":["1.14"],"存在返回":["1.15"],"不存在返回":["1.15"],"被过滤掉":["1.15"],"岁了":["2.1","2.4"],"我的名字是alice并且我25岁了":["2.2"],"专业的学生":["2.3"],"静态方法以及":["2.6"],"等特性让":["2.6"],"javascript":["2.6","3.4","119.2"],"开发者能够更好地组织和复用代码":["2.6"],"标准进行实现":["3.2"],"以保持互操作性和一致性":["3.2"],"fs":["3.3"],"net":["3.3"],"flatmap":["3.4"],"用于数组的扁平化和映射":["3.4"],"trimstart":["3.4"],"trimend":["3.4"],"用于去除字符串两端的空白字符":["3.4"],"fromentries":["3.4"],"用于将键值对列表转换为对象":["3.4"],"从":["3.4"],"开始":["3.4"],"标准每年都会发布一个新版本":["3.4"],"每个版本都会引入一些新的特性和改进":["3.4"],"以使":["3.4"],"语言变得更加强大":["3.4"],"现代和易用":["3.4"],"以及实现代码的重用和分割":["4.1"],"模块化的好处如下":["4.2"],"john":["4.11","4.12","46.2","47.2"],"is":["4.13","4.14"],"my":["4.14"],"输出":["4.22","5.15","38.2","42.6","42.8"],"age":["4.23","30.3","46.1","47.1","104.1"],"模块化特性":["4.28"],"以提升代码质量和开发效率":["4.28"],"hello":["5.5","80.6","80.9","80.10","80.11","103.4","157.2"],"上面示例中":["5.5"],"调用时没有参数":["5.5"],"所以参数默认值":["5.5"],"生效":["5.5"],"然后再对这个默认值进行解构赋值":["5.5"],"从而触发参数变量":["5.5"],"的默认值生效":["5.5"],"参数对应":["5.6"],"结果触发了默认值":["5.6"],"参数等于":["5.6"],"就没有触发默认值":["5.6"],"从而抛出一个错误":["5.7"],"从上面代码还可以看到":["5.7"],"参数":["5.7"],"的默认值等于":["5.7"],"函数的运行结果":["5.7"],"注意函数名":["5.7"],"之后有一对圆括号":["5.7"],"这表明参数的默认值不是在定义时执行":["5.7"],"而是在运行时执行":["5.7"],"如果参数已经赋值":["5.7"],"默认值中的函数就不会运行":["5.7"],"另外":["5.7"],"可以将参数默认值设为":["5.7"],"表明这个参数是可以省略的":["5.7"],"optional":["5.7"],"上面的代码中给函数第一个参数":["5.10"],"声明一个变量":["5.10"],"剩余的参数会被":["5.10"],"收集成一个数组":["5.10"],"这就是剩余参数":["5.10"],"引入剩余参数就是为了能替代函数内部的":["5.10"],"由于":["5.10"],"对象不具备数组的方法":["5.10"],"所以很多时候在使用之前要先转换成一个数组":["5.10"],"而剩余参数本来就是一个数组":["5.10"],"避免了这多余的一步":["5.10"],"使用起来既优雅又自然":["5.10"],"否则会报错":["5.11"],"多余的参数不会被获取到":["5.12"],"上面的代码中":["5.12"],"会去解构传入参数":["5.12"],"加上有剩余语法的作用":["5.12"],"对应的值从数组中的项解构出来":["5.12"],"在函数内部直接使用解构出来的参数即可":["5.12"],"剩余语法看起来和展开语法完全相同":["5.12"],"不同点在于":["5.12"],"剩余参数用于解构数组和对象":["5.12"],"剩余参数是将多个单个元素聚集起来形成一个单独的个体的过程":["5.13"],"输出了正确的结果":["5.17"],"而箭头函数中的":["5.17"],"方法继承了外层代码块的":["5.17"],"在浏览器环境中":["5.17"],"这里指向":["5.17"],"window":["5.17","37.7"],"因此输出了":["5.17"],"特别是在简单的回调函数和数组方法中":["5.18"],"能够减少代码量并提高代码的可读性":["5.18"],"这样的规定也使得":["5.19"],"函数参数与数组和对象的尾逗号规则":["5.19"],"保持一致了":["5.19"],"worl":["6.4"],"qux":["6.13"],"o":["6.14"],"开发中":["7.5"],"模板字符串广泛用于生成":["7.5"],"html":["7.5","27.4","32.2"],"标记":["7.5"],"日志信息":["7.5"],"网络请求等多种场景":["7.5"],"覆盖掉":["8.4"],"而":["8.4","25.10","35.2","67.18"],"最后只有一个":["8.4"],"属性":["8.4","81.14","105.0"],"指向原型对象":["8.6"],"但是绑定的":["8.6"],"却还是当前对象":["8.6"],"因此输出的就是":["8.6"],"true":["8.12","24.1","56.14","90.17","98.10","106.2"],"sex":["8.21"],"male":["8.21","98.13"],"options":["8.21"],"alex":["8.21"],"entires":["8.22"],"并不能保证顺序一定是你看到的样子":["8.22"],"这一点和":["8.22"],"in":["8.22","31.6"],"是一样的":["8.22","153.1"],"如果对遍历顺序有要求那么不能用":["8.22"],"以及这种方法":["8.22"],"而要用其他方法":["8.22"],"都可以显著提高代码的可读性和可维护性":["10.0"],"使用默认值":["10.4","10.10"],"value":["11.1","20.6","23.2","141.3"],"设置元素的属性":["11.1"],"class":["11.2"],"highlight":["11.2"],"这只是":["13.0"],"中的一些常见对象":["13.0"],"还有其他对象和方法可用于处理浏览器窗口和与浏览器交互的其他方面":["13.0"],"请注意":["13.0"],"在不同的浏览器中可能会有一些差异":["13.0"],"因此在编写跨浏览器的代码时需要注意兼容性":["13.0"],"reload":["14.1","14.2"],"重新加载当前页面":["14.1"],"platform":["15.2"],"屏幕的颜色深度":["16.1"],"pixeldepth":["16.2"],"位":["16.2"],"document":["17.1","80.4","81.10","81.11"],"当前窗口加载的文档对象":["17.1"],"中级":["18.4"],"删除或移动节点等操作":["19.1"],"以下是一些常用的":["19.1"],"操作":["19.1","79.4","120.2"],"我们称之为文档树或":["19.2"],"文档树直观的体现了标签与标签之间的关系":["19.2"],"根节点":["19.3"],"特指":["19.3"],"web":["19.4"],"开发中不可或缺的一部分":["19.4"],"鼠标移出了":["20.5"],"失去焦点触发":["20.7"],"如":["20.8"],"shift":["20.8"],"ctrl":["20.8"],"等":["20.8","21.1","41.4","79.1","79.16"],"时触发":["20.8"],"例如阻止表单提交或超链接跳转":["20.9"],"stoppropagation":["20.9"],"停止事件的传播":["20.9"],"touchend":["20.11"],"touchmove":["20.11"],"选项4":["20.12"],"选项5":["20.12"],"p":["21.2","80.6","80.9","80.10","80.11","90.7"],"这将从":["21.3"],"中移除":["21.3"],"这将返回元素的计算样式对象":["22.1"],"你可以使用":["22.1"],"方法来获取指定属性的值":["22.1"],"可以使用":["22.2"],"setattribute":["22.2"],"获取或设置元素的文本内容":["23.0"],"property":["23.2"],"abc":["24.1","100.4"],"undefined":["24.2","56.18","58.0","98.7"],"只有一个元素的数组":["24.14","24.17"],"log":["24.28","24.29","28.11","29.9","29.10","31.7","43.8","56.4","98.14","99.8","118.4","121.17"],"执行某些操作":["24.30"],"这样结构会更加的清晰":["25.1"],"如果":["25.1"],"后的添加表达式不是布尔值":["25.1"],"会转换为布尔值然后再运算":["25.1"],"什么奖励也没有":["25.2"],"啥也没有":["25.2"],"注意":["25.2","25.9","41.5","131.2","131.4"],"语句中只会有一个代码块被执行":["25.2"],"一旦有执行的代码块":["25.2"],"下边的条件都不会在继续判断了":["25.2"],"所以一定要注意":["25.2"],"条件的编写顺序":["25.2"],"如果所有的比较都是":["25.3"],"则执行":["25.3"],"后的语句":["25.3"],"时":["25.5","34.2","67.20","83.7","85.4"],"循环结束":["25.5"],"while语句是先执行再判断":["25.6"],"实质的区别":["25.6"],"while语句可以确保循环至少执行一次":["25.6"],"tip":["25.9","70.2","88.5","88.6","104.1"],"不应该用它来遍历数组":["25.9"],"因为它还会遍历从对象原型继承的可枚举属性":["25.9"],"用于遍历对象属性":["25.10"],"用于遍历可迭代集合":["25.10"],"如数组":["25.10"],"循环遍历对象时":["25.11"],"会遍历对象的原型链":["25.11"],"并且会包含从原型链继承的属性":["25.11"],"循环遍历的对象是可迭代对象":["25.11"],"它们的值是可枚举的":["25.11"],"通过此代码块可以实现大量代码的重复使用":["26.0"],"大肘子":["26.6"],"函数的参数可以有":["26.6"],"也可以没有个数不限":["26.6"],"调用函数的时候":["26.7"],"函数名括号里面的是实参":["26.7"],"多个参数中间用逗号分隔":["26.7"],"形参的个数可以和实参个数不匹配":["26.7"],"但是结果不可预计":["26.7"],"我们尽量要匹配":["26.7"],"返回":["26.8","28.10"],"fun2":["26.8"],"函数返回的结果是":["26.8"],"同时还可以结束当前的函数体内的代码":["26.9"],"应用程序":["27.0"],"有两种方式":["27.2"],"是键名":["28.2"],"是键值":["28.2"],"两个键值对之间用逗号分隔":["28.2"],"有没有都可以":["28.3"],"属性可以动态创建":["28.3"],"不必在对象声明时就指定":["28.3"],"直接对":["28.3"],"对象的":["28.3"],"属性赋值":["28.3"],"结果就在运行时创建了":["28.3"],"的值发生变化后":["28.4"],"的值并不变":["28.4"],"这就表示":["28.4"],"并不是指向同一个内存地址":["28.4"],"上面代码中":["28.5","134.1","134.3"],"如果没有圆括号":["28.5"],"将其理解为一个代码块":["28.5"],"加上圆括号以后":["28.5"],"就理解成一个对象":["28.5"],"报错":["28.7","30.3","101.3","103.6","122.11","122.22"],"上面代码的第一个表达式":["28.7"],"对数值键名":["28.7"],"使用点运算符":["28.7"],"结果报错":["28.7"],"第二个表达式使用方括号运算符":["28.7"],"结果就是正确的":["28.7"],"是对象":["28.10"],"继承的属性":["28.10"],"虽然":["28.10"],"但该属性并没有被删除":["28.10"],"依然存在":["28.10"],"这个例子还说明":["28.10"],"即使":["28.10","34.1"],"该属性依然可能读取到值":["28.10"],"console":["28.11","31.7","56.4","98.14","99.8","118.4"],"name":["28.12","78.5","78.11","90.5","104.1","123.14"],"老张":["28.12"],"key":["28.12","111.8"],"if":["28.12","119.4","123.14"],"obj2":["28.13"],"obj3":["28.13"],"可以写成":["28.13"],"temp":["28.13"],"07":["29.2","114.4"],"000000000000001":["29.2"],"没有声明过这个变量":["30.3"],"script":["30.4","127.2"],"先销毁再创建":["30.4"],"而当时又没有那个对象可保存":["30.5"],"就可用":["30.5"],"来填充该变量":["30.5"],"a":["30.6","50.1","98.5"],"不存在":["30.6"],"虽然两个变量的值相等":["30.18"],"但是两个变量保存了两个不同的内存地址":["30.18"],"产生影响":["30.19"],"也就是两个变量指向堆内存中同一个对象":["30.20"],"所以不要重复声明同一个变量":["31.4"],"避免":["31.4"],"syntaxerror":["31.4"],"每次迭代循环声明一个新的迭代变量":["31.6"],"每个":["31.6"],"引用的都是不同的变量实例":["31.6"],"这种风格也适用于":["31.6"],"of":["31.6","74.5","119.6"],"dom":["32.1","84.2"],"而更新页面":["32.1"],"将处理结果更新到":["32.2"],"页面中":["32.2"],"可选的密码用于认证用途":["32.4"],"方法中参数设置为":["32.5"],"错误信息":["32.6"],"post":["32.6"],"http":["32.6","108.4","118.2","118.4","118.6","118.7","123.13"],"xxxx":["32.6"],"responsetext":["32.8"],"responsexml":["32.8"],"fail":["32.8"],"已经执行完毕":["34.1"],"都会增加":["34.2"],"的值并打印":["34.2"],"和":["34.3","51.9","59.3","88.1"],"的对象":["34.3","59.4"],"变量被隐藏在闭包内部":["34.3"],"只能通过返回对象的方法来访问和修改":["34.3"],"事件处理":["34.4"],"闭包可以用于处理事件回调函数":["34.4"],"通过闭包":["34.4"],"可以在事件处理函数内部访问外部函数的数据和状态":["34.4"],"从而更方便地处理事件相关的逻辑":["34.4"],"应用程序时":["34.5"],"了解闭包的概念和使用方法是非常有益的":["34.5"],"如果原始对象的属性是引用类型":["35.1"],"如对象或数组":["35.1"],"新对象和原始对象的该属性仍然引用同一个对象":["35.1"],"深拷贝可能会涉及到循环引用的问题":["35.2"],"即对象内部存在相互引用的属性":["35.2"],"在实现深拷贝时":["35.2"],"需要处理循环引用的情况":["35.2"],"以避免无限递归和栈溢出":["35.2"],"综上所述":["35.2"],"浅拷贝和深拷贝是":["35.2"],"中常用的对象复制技术":["35.2"],"浅拷贝只复制对象的引用":["35.2"],"深拷贝创建一个独立的副本":["35.2"],"相加":["36.1","43.3"],"同样":["36.1"],"相乘":["36.1"],"函数柯里化是一种将多参数的函数转化为一系列接受单个参数的函数的技术":["36.2"],"它提供了灵活和可复用的函数调用方式":["36.2"],"有助于参数复用":["36.2"],"函数组合和高阶函数的创建":["36.2"],"否则":["36.4"],"返回一个新的函数":["36.4"],"该函数将之前的参数与新的参数连接起来":["36.4","36.6"],"并再次调用":["36.4","36.6"],"在柯里化函数中":["36.5"],"我们可以使用":["36.5"],"来表示一个占位符":["36.5"],"用于在函数调用过程中填充参数位置":["36.5"],"debounce":["37.0"],"的方式来减少调用频率":["37.0"],"else":["37.3","121.6"],"settimeout":["37.3"],"this":["37.5","79.20","93.4"],"addeventlistener":["37.7"],"scroll":["37.7"],"return":["38.3","38.4","38.6","80.11","99.8","99.9","108.3","123.14"],"loop":["39.1"],"事件循环":["39.1"],"渲染逻辑会线执行":["39.2"],"然后执行下一下宏任务":["39.2"],"then是异步":["39.3"],"归属微任务":["39.3"],"async":["39.3","88.3"],"await返回的是promise视为微任务":["39.3"],"整个async":["39.3"],"的函数加入微任务队列":["39.3"],"infinity":["40.1"],"的问题":["41.0"],"使异步代码更易于理解和维护":["41.0"],"以下是":["41.0"],"的基本概念和用法":["41.0"],"并将错误信息":["41.1"],"并接收到错误信息":["41.2"],"如果任意一个操作失败":["41.3"],"将调用最后的":["41.3"],"方法":["41.3","57.2","59.8"],"reject":["41.4","108.3","108.4","111.11"],"它们提供了更多的灵活性和功能":["41.4"],"通过使用":["41.4","88.5","88.6"],"可以更好地处理异步操作":["41.4"],"避免回调地狱":["41.4"],"并使代码更清晰和可维护":["41.4","44.4"],"方法处理请求失败的错误":["41.5"],"上述示例中假设请求的数据为":["41.5"],"格式":["41.5"],"并设置请求头的":["41.5"],"为":["41.5"],"根据具体的需求":["41.5"],"可以调整请求的数据和请求头":["41.5"],"通过封装":["41.5"],"请求为":["41.5"],"可以更优雅地处理异步请求":["41.5"],"并使用":["41.5"],"的链式调用":["41.5"],"错误处理和其他特性来组织和处理请求的结果":["41.5"],"使得属性和方法可以被共享和继承":["42.1"],"它会沿着原型链找到":["42.2"],"上的":["42.2"],"对象的基本原型":["42.3"],"这样":["42.4","67.24","84.5"],"对象就可以访问":["42.4"],"的":["42.4"],"可选参数":["43.1"],"方法从数组的第一个元素开始累加":["43.3"],"初始值为":["43.3"],"提供了":["43.3"],"initialvalue":["43.3"],"然后依次将每个元素与":["43.3"],"得到最终的累积结果":["43.3"],"方法是一个非常强大和灵活的数组方法":["43.9"],"通过合理使用它":["43.9"],"可以简化对数组的复杂计算和操作":["43.9"],"是一个全局函数":["44.1"],"也可以在任何地方调用":["44.1"],"在该函数内部可访问":["44.2"],"如果在":["44.3"],"中找不到变量":["44.3"],"引擎会向上查找并找到全局作用域中的":["44.3"],"代码至关重要":["44.4"],"作用域确定了变量和函数的可见性和访问范围":["44.4"],"可以帮助避免命名冲突和错误":["44.4"],"的基本用法和一些常见操作":["45.0","46.0","47.0"],"属性用于指定":["45.1"],"的可访问路径":["45.1"],"默认为当前页面的路径":["45.1"],"浏览器会将其视为已过期并删除该":["45.3"],"网站首选项等功能":["45.4"],"在实际应用中":["45.4","46.6","47.6"],"需要根据具体需求合理使用":["45.4"],"来增强用户体验和数据交互":["45.4"],"提供了一种简单而强大的在浏览器中进行本地持久化存储的方式":["46.6"],"它可用于保存用户的首选项":["46.6"],"配置信息":["46.6"],"用户身份验证信息等":["46.6"],"可以根据具体需求合理使用":["46.6","47.6"],"来增强用户体验和数据持久性":["46.6"],"提供了一种简单而强大的在浏览器中进行会话级别的本地存储的方式":["47.6"],"它适用于临时保存会话相关的数据":["47.6"],"如用户登录信息":["47.6"],"临时配置等":["47.6"],"来增强用户体验和会话管理":["47.6"],"json":["48.1","157.6"],"tolocaledatestring":["48.1"],"将日期对象转换为本地日期格式的字符串":["48.1"],"tolocalestring":["48.1"],"将日期对象转换为本地日期和时间格式的字符串":["48.1"],"tolocaletimestring":["48.1"],"将日期对象转换为本地时间格式的字符串":["48.1"],"将日期对象转换为字符串":["48.1"],"totimestring":["48.1"],"将日期对象的时间部分转换为字符串":["48.1"],"toutcstring":["48.1"],"时间格式的字符串":["48.1"],"minutes":["48.2"],"seconds":["48.2"],"milliseconds":["48.2"],"setdate":["48.3"],"getdate":["48.3"],"今天是2100年1月14日之后":["48.5"],"直接使用并传入对应的参数":["49.0"],"not":["50.1"],"当进行非法的数学运算时":["50.1"],"0101111011011001":["50.2"],"这些是":["50.2"],"对象的一些常用属性和方法":["50.2"],"通过使用这些属性和方法":["50.2"],"可以在":["50.2"],"中更方便地处理数字和数值相关的操作":["50.2"],"搜索和替换字符串":["51.1"],"下面是关于":["51.1"],"正则表达式的详细介绍":["51.1"],"gi":["51.6"],"z":["51.7","153.9"],"并将":["51.9"],"捕获到两个分组中":["51.9"],"使用编号或名称可以访问捕获的子串":["51.9"],"捕获分组可用于从字符串中提取特定部分的信息":["51.9"],"进行更精确的匹配和处理":["51.9"],"new":["51.10"],"regexp":["51.10"],"通过学习和掌握正则表达式的语法和方法":["51.11"],"可以提高字符串处理的效率和精确度":["51.11"],"从而更好地应对各种字符串操作的需求":["51.11"],"程序":["52.0"],"内置对象最大的优点就是帮助我们快速开发":["52.0"],"arguments":["52.1"],"函数参数集合":["52.1"],"用于处理不同的任务和需求":["52.9"],"函数根据传入的参数不同":["53.3"],"或":["53.3","67.1","105.0","113.1"],"对象":["53.3","98.3","118.5"],"展现了不同的行为":["53.3"],"这就是多态的体现":["53.3"],"可以引用将要创建的对象":["54.0"],"构造函数的优点是它可以直接在构造函数中定义对象的属性和方法":["54.1"],"但每次创建对象实例时":["54.1"],"都会重新创建一次方法":["54.1"],"这可能会导致内存浪费":["54.1"],"尤其是当实例数量较多时":["54.1"],"无论是构造函数还是类":["54.2"],"它们都可以用于创建对象":["54.2"],"在现代的":["54.2"],"中":["54.2","81.3"],"类更为普遍":["54.2"],"因为它提供了更清晰":["54.2"],"直观和易于维护的代码结构":["54.2"],"通过面向对象编程":["55.2"],"开发者可以更好地组织和管理代码":["55.2"],"提高代码的可维护性和可重用性":["55.2"],"并使得复杂的程序更易于理解和扩展":["55.2"],"alert":["56.2","144.7"],"大家好啊":["56.2"],"方法名":["56.3"],"千万别忘记添加小括号":["56.3"],"返回一个给定对象自身可枚举属性值的数组":["56.5"],"hasownproperty":["56.5"],"判断一个属性是否是对象自身的属性":["56.5"],"非继承的属性":["56.5"],"configurable":["56.11"],"对象本身没有":["57.2"],"会在原型链上查找并在":["57.2"],"对象上找到该方法":["57.2"],"并允许我们创建灵活和高效的代码结构":["57.4"],"在全局上下文中为":["58.0"],"而不是默认指向全局对象":["58.0"],"启用严格模式的代码在遵循更严格的语法规则后":["58.0"],"更容易发现潜在的错误":["58.0"],"并且在某些情况下可能会有更好的性能":["58.0"],"建议在新的项目中使用严格模式":["58.0"],"并逐步更新现有的代码以适应严格模式":["58.0"],"使用":["59.3","82.11","134.3"],"call":["59.3"],"apply":["59.3"],"指向指定的那个对象":["59.3"],"foo":["59.3"],"obj":["59.3"],"此处是obj":["59.4"],"则传":["59.7"],"null":["59.7"],"上方代码中":["59.8"],"继承了":["59.8"],"里面传入的":["59.10"],"实参":["59.10"],"必须是数组":["59.10"],"或者伪数组":["59.10"],"里面传实参时":["59.11"],"需要以数组的形式":["59.11"],"即便是传一个实参":["59.11"],"也需要传数组":["59.11"],"中元素的最小值":["59.12"],"由指定":["59.14"],"和指定实参的":["59.14"],"原函数拷贝":["59.14"],"可以看出":["59.14"],"方法是有返回值的":["59.14"],"用的最多的交集选择器":["65.5"],"元素选择器配合类名选择器":["65.5"],"例如":["65.5"],"center":["65.6","67.15"],"color":["65.9","65.12","91.12"],"red":["65.9","65.12","91.12","132.1"],"选到2号p标签":["65.12"],"blue":["65.12","72.1"],"属性且属性值含有":["65.13"],"table":["65.14"],"转换为块级元素并一行显示":["65.14"],"能够轻松地实现复杂的网页布局和响应式设计":["66.0"],"属性控制它们的布局行为":["66.1"],"主轴为垂直方向":["66.2"],"主轴居中对齐":["66.3"],"交叉轴顶部对齐":["66.3"],"允许项目换行":["66.4"],"允许换行":["66.5"],"不缩小":["66.6"],"嵌套的flex容器":["66.8"],"多行之间平均分布":["66.9"],"平均分布多行元素":["66.10"],"属性在多行中平均分布元素":["66.10"],"也可以占据一个单元格":["67.2"],"我们可以通过指定网格项的位置来控制它们在网格中的布局":["67.2"],"定义两行":["67.3"],"第一行高度为":["67.3","67.6"],"第二行高度自适应":["67.3","67.6"],"网格项跨越第一行到第三行":["67.4","67.16"],"auto":["67.6","67.25","69.3","69.6"],"两行":["67.6"],"footer":["67.8"],"50px":["67.8","67.11"],"列间距为":["67.9"],"10px":["67.10"],"行间距为":["67.10"],"自动创建的额外列宽度为":["67.11"],"自动创建的额外项目按照列进行放置":["67.12"],"end":["67.13","121.7"],"项目在行轴上底部对齐":["67.13"],"space":["67.14"],"between":["67.14"],"项目在行轴上均匀分布":["67.14"],"项目在行轴上居中对齐":["67.15"],"关键字表示网格轨道的大小将根据其内容自动调整":["67.18"],"表示网格轨道的大小将占据剩余可用空间":["67.18"],"我们定义了三列":["67.19"],"每列宽度为":["67.19"],"其中使用了":["67.22"],"布局将标题":["67.22"],"导航栏和内容区域分为三个网格项":["67.22"],"通过设置网格容器的列模板为":["67.22"],"1fr":["67.22","67.25"],"使得三个网格项平均占据网格容器的宽度":["67.22"],"布局将网页划分为多个网格项":["67.23"],"通过设置网格项的网格位置和跨度":["67.23"],"我们可以实现复杂的布局结构":["67.23"],"如标题横跨三列":["67.23"],"导航栏":["67.23"],"内容区域和侧边栏位于第二行":["67.23"],"页脚位于第三行":["67.23"],"img":["67.23","67.25","90.25","110.3","157.7","157.10"],"其中":["67.24"],"我们首先创建了一个主要的网格容器":["67.24"],"将页面划分为两列":["67.24"],"标题横跨两列":["67.24"],"然后":["67.24","136.3"],"我们在网格项中嵌套另一个网格容器":["67.24"],"用于进一步划分内容区域":["67.24"],"我们可以在同一个网格项中实现更复杂的布局":["67.24"],"我们使用":["67.25","82.11","84.4"],"repeat":["67.25"],"fill":["67.25","136.4","136.6"],"minmax":["67.25"],"200px":["67.25"],"来定义网格容器的列模板":["67.25"],"这将使网格容器动态调整列数":["67.25"],"以填充可用空间":["67.25"],"并保持每列最小宽度为":["67.25"],"最大宽度为可用空间的一份之一":["67.25"],"列表等":["67.27"],"都可以结合媒体查询实现不同屏幕尺寸下的适配":["67.28"],"都支持对齐和排序网格项":["67.28"],"将第三个网格项置于第一个位置":["67.30"],"以优化网页性能":["67.32"],"布局的旧版浏览器中正常显示":["67.33"],"权重最高":["68.1"],"在vscode中":["68.1"],"鼠标悬浮在样式上":["68.1"],"会弹出来显示选择器":["68.1"],"垂直居中":["69.1"],"设置行高和高度一样":["69.1"],"skyblue":["69.2"],"100px":["69.5"],"bottom":["69.6"],"为了让容器撑满视口高度":["69.7"],"000":["70.0","139.3"],"ellipsis":["70.1"],"以省略号显示隐藏的内容":["70.1"],"all":["70.2"],"强制打断单词换行":["70.2"],"多行溢出隐藏只能内核是":["70.2"],"的浏览器":["70.2"],"padding":["70.3"],"left":["70.3"],"4px":["70.3"],"d6d6d6":["71.0"],"右下角拖动块":["71.0"],"resizer":["71.0"],"元素允许使用多个":["73.0"],"元素":["73.0","73.10","79.9"],"元素可以链接不同的音频文件":["73.0"],"浏览器将使用第一个支持的音频文件":["73.0"],"标签中使用":["73.5"],"定义在媒体播放器文本轨迹":["73.6"],"edge":["73.7"],"只有在静音下可以使用":["73.7"],"网页的主体部分":["74.1"],"包含网页的实际内容":["74.1"],"如文本":["74.1"],"图像":["74.1"],"链接等":["74.1"],"用于组合多个元素为一个整体":["74.2"],"方便样式和布局控制":["74.2"],"span":["74.2","91.12"],"内联容器标签":["74.2"],"类似于":["74.2"],"但是它用于内联元素的包裹":["74.2"],"交互性强的现代网页应用程序":["74.3"],"通过学习":["74.4"],"你可以创建各种各样的网页":["74.4"],"并为用户提供丰富的在线体验":["74.4"],"potential":["74.5"],"risks":["74.5"],"caution":["74.5"],"negative":["74.5"],"consequences":["74.5"],"an":["74.5"],"action":["74.5"],"rspack":["74.6"],"supports":["74.6"],"resolveid":["74.6"],"with":["74.6"],"minimum":["74.6"],"required":["74.6"],"version":["74.6","93.3"],"v1":["74.6"],"alpha":["74.6"],"这是h6级别的标题":["75.1"],"提交":["75.13"],"copy":["75.14"],"公司名":["75.14"],"td":["76.1"],"表格标签":["76.1"],"用于创建表格":["76.1"],"如文本框":["76.2"],"单选按钮":["76.2"],"复选框等":["76.2"],"链接目标":["76.4"],"控制元素行为等":["76.4"],"在实际开发中":["76.5"],"合理使用标签和属性可以提高网页的可读性":["76.5"],"可访问性和用户体验":["76.5"],"元素的创建和组合的基础":["78.1"],"是构建复杂用户界面的核心":["78.1"],"可以根据":["78.2"],"的描述来创建相应的":["78.2"],"customelement":["78.4"],"mycomponent":["78.4"],"your":["78.5"],"应用程序的核心":["78.9"],"f":["78.19","99.10"],"mycomponentwithlogger":["78.20"],"click":["78.21","91.9","92.17","141.3"],"me":["78.21","86.7"],"increment":["78.22","80.3","88.3"],"router":["79.1"],"结合使用":["79.1"],"来构建更复杂的应用":["79.1"],"提高了页面的性能和响应速度":["79.4"],"而无需重复造轮子":["79.6"],"通过组合多个组件":["79.8"],"我们可以构建复杂的用户界面":["79.8"],"从而渲染到页面上":["79.9"],"并根据数据进行相应的渲染和逻辑处理":["79.10"],"我们可以实现用户界面的交互和动态变化":["79.11"],"但语法上更加简洁和易读":["79.13"],"评论列表等":["79.15"],"从而实现组件的复用":["79.18"],"以免影响代码的可维护性和可读性":["79.19"],"指向和生命周期混乱等":["79.20"],"解析为":["79.22"],"纯":["79.22"],"语法代码":["79.22"],"的中文含义是":["79.23"],"渲染":["79.23"],"方法的语法如下":["79.23"],"reactdom":["79.23"],"要渲染的虚拟dom对象":["79.23"],"容器":["79.23"],"container":["79.23"],"要渲染到页面上的哪个位置":["79.23"],"strictmode":["79.24"],"组件销毁阶段":["80.1"],"componentwillunmount":["80.1"],"在组件即将销毁时调用":["80.1"],"用于清理副作用操作":["80.1"],"如取消订阅":["80.1"],"清除定时器等":["80.1"],"onclick":["80.3"],"getelementbyid":["80.4","81.7","81.8","81.9","81.10","81.11","82.12"],"root":["80.4","81.7","81.8","81.9","81.10","81.11","82.12"],"componentdidupdate":["80.13"],"在组件销毁阶段":["80.13"],"中进行清理操作":["80.13"],"可以将数据传递给子组件":["81.1"],"并根据数据的变化更新子组件的显示内容":["81.1"],"实现动态渲染和交互":["81.1"],"可以通过":["81.3"],"来访问传递的":["81.3"],"将使用默认值":["81.4"],"中的属性解构出来":["81.5"],"使代码更加简洁易读":["81.5"],"从而使组件行为更加可预测和稳定":["81.13"],"属性进行了验证":["81.14"],"要求它必须是字符串类型":["81.14"],"并且是必需的":["81.14"],"如果传递的":["81.14"],"属性不是字符串或者没有传递":["81.14"],"将会在控制台输出警告信息":["81.14"],"对":["81.15"],"进行验证":["81.15"],"增加代码的健壮性和可维护性":["81.15"],"组件开发中非常重要和常用的一部分":["81.15"],"从而实现快速":["82.1"],"流畅的导航体验":["82.1"],"component":["82.3"],"属性指定对应的页面组件":["82.3"],"params":["82.5"],"属性在页面组件中获取":["82.5"],"url":["82.6"],"从而实现页面切换":["82.7"],"在":["82.11","82.15"],"组件中":["82.11"],"属性来指定":["82.11"],"路径":["82.11"],"属性来指定对应的页面组件":["82.11"],"属性用于确保只有在路径完":["82.11"],"全匹配时才渲染对应的组件":["82.11"],"h2":["82.13","82.14"],"sub":["82.13"],"page":["82.13"],"profile":["82.14"],"组件中定义了一个按钮":["82.15"],"当用户点击按钮时":["82.15","84.5"],"会触发":["82.15"],"函数":["82.15"],"通过":["82.15","111.8"],"方法实现页面导航":["82.15"],"编程式导航允许在事件触发后进行页面切换":["82.15"],"从而实现更灵活的导航控制":["82.15"],"使用户界面能够随着用户操作或其他事件的发生而更新":["83.0"],"props":["83.1"],"传递给子组件":["83.1"],"这样的设计有助于保持组件之间的独立性和可预测性":["83.1"],"来访问":["83.3"],"的值":["83.3"],"每次点击按钮时":["83.4"],"的值都会增加":["83.4"],"并触发组件的重新渲染":["83.4"],"中使用了一个回调函数":["83.5"],"该回调函数在":["83.5"],"更新后被调用":["83.5"],"用于打印最新的":["83.5"],"在上面的例子中":["83.6"],"我们展示了错误的方式直接修改":["83.6"],"这样做会导致":["83.6"],"无法正确地追踪":["83.6"],"并可能导致组件的显示内容不正确":["83.6"],"值":["83.7"],"在多个组件中共享":["83.7"],"正确地使用":["83.7"],"将有助于保持组件之间的独立性和可预测性":["83.7"],"并增加":["83.7"],"应用程序的交互性和可维护性":["83.7"],"而无需手动编写大量的重复代码":["84.1"],"正确地更新":["84.2"],"最后":["84.2"],"我们将生成的":["84.2"],"元素放置在":["84.2"],"元素中":["84.2"],"从而实现了一个包含数字的列表":["84.2"],"如果数字是偶数":["84.3"],"我们将列表项的颜色设为红色":["84.3"],"如果数字是奇数":["84.3"],"我们将列表项的颜色设为蓝色":["84.3"],"通过这种方式":["84.3","84.4"],"我们可以根据条件来渲染不同样式的列表项":["84.3"],"从而提供更丰富的用户界面":["84.3"],"在子组件中":["84.4"],"方法遍历":["84.4"],"数组":["84.4"],"并渲染对应的列表项":["84.4"],"我们可以将数据和渲染逻辑分离":["84.4"],"使代码更加清晰和易于维护":["84.4"],"我们添加了一个输入框和一个按钮":["84.5"],"用于输入新的列表项和添加新的列表项":["84.5"],"通过监听输入框的变化事件":["84.5"],"我们可以获取用户输入的新数字":["84.5"],"并保存在组件的状态中":["84.5"],"我们将新数字添加到":["84.5"],"数组中":["84.5"],"并通过更新组件状态来触发重新渲染":["84.5"],"新的列表项就会动态地显示在用户界面上":["84.5"],"如为列表项添加唯一的":["84.6"],"包裹多个元素等":["84.6"],"以确保代码的可读性和性能":["84.6"],"列表渲染使我们能够更高效地展示大量数据":["84.6"],"并为用户提供更好的用户体验":["84.6"],"从而提供更加个性化和灵活的用户体验":["85.1"],"根据":["85.2"],"状态的不同":["85.2"],"组件会根据条件渲染不同的内容":["85.2"],"通过使用三元表达式":["85.3"],"我们可以在一行代码中实现条件渲染":["85.3"],"使代码更加简洁和易读":["85.3","85.5"],"由于逻辑与是短路逻辑":["85.4"],"当":["85.4","88.6"],"不会继续执行后面的代码":["85.4"],"因此不会渲染任何内容":["85.4"],"条件运算符简化了条件渲染的写法":["85.5"],"在实现条件渲染时":["85.6"],"我们应该遵循最佳实践":["85.6"],"保持代码简洁":["85.6"],"可读性高":["85.6"],"并提高代码的复用性和可维护性":["85.6"],"条件渲染使我们能够根据用户的交互或应用程序的状态来实现动态和交互性的用户界面":["85.6"],"从而提供更好的用户体验":["85.6"],"install":["86.3","111.8"],"clicked":["86.13","144.7"],"包裹的组件停用时调用":["86.18"],"errorcaptured":["86.18"],"错误捕获":["86.18"],"在子孙组件抛出错误时被调用":["86.18"],"用于处理错误":["86.18"],"有一定的了解":["87.1"],"export":["87.3","111.11"],"default":["87.3","108.4","111.8"],"并且使得状态的变化变得可追踪":["88.0"],"这样可以更好地组织和管理状态":["88.1"],"使代码结构更清晰":["88.1"],"的功能":["88.2"],"doublecount":["88.3"],"通过方法修改状态":["88.3"],"commit":["88.3"],"通过actions进行异步操作":["88.3"],"fetchdata":["88.3"],"await":["88.3"],"dispatch":["88.3"],"来分别触发":["88.4"],"从而修改":["88.4"],"状态":["88.4"],"我们可以在异步操作中进行数据请求":["88.5"],"api":["88.5"],"调用等":["88.5"],"并在操作完成后通过调用":["88.5"],"来修改状态":["88.5"],"保持了状态的变更流程的一致性和可追踪性":["88.5"],"返回对应":["88.6"],"我们可以在组件中直接获取和使用派生状态":["88.6"],"而无需重复编写数据处理逻辑":["88.6"],"这样使得组件的代码更加简洁":["88.6"],"可维护性更高":["88.6"],"并且":["88.6"],"能够保持响应式":["88.6"],"发生变化时":["88.6"],"也会相应地更新":["88.6"],"树":["89.1"],"找到需要更新的部分":["89.1"],"并将更新应用到实际的":["89.1"],"上":["89.1"],"从而避免直接操作":["89.1"],"提高了性能和效率":["89.1"],"这使得系统更加灵活和高效":["89.2"],"还引入了一系列性能优化策略":["89.2"],"以及":["89.2"],"来改进开发体验":["89.2"],"使得开发者能够更方便地构建响应式的用户界面":["89.2"],"并提高了整体性能":["89.2"],"这些改进使得":["89.2"],"成为一个更强大和现代化的前端框架":["89.2"],"语法糖下进行":["90.0"],"message":["90.1","107.5","111.11","121.12","123.2"],"中需要通过":["90.2"],"的形式才能使用":["90.2"],"函数可以接收原始数据类型与引用数据类型":["90.2"],"函数只能接收引用数据类型":["90.2"],"lisi":["90.5"],"搜索关键字":["90.7"],"是否开启深度监听":["90.16"],"deep":["90.17"],"旧的值":["90.18","90.19","90.20"],"vue":["90.24"],"卸载完成":["90.28"],"第四个":["90.29"],"prevnode":["90.29"],"上一个虚拟节点":["90.29"],"钩子中可用":["90.29"],"div":["90.31"],"宽度":["90.31"],"高度":["90.31"],"具名插槽":["91.1"],"作用域插槽":["91.1"],"实现父子组件通信":["91.1"],"数据就可以在模板中使用了":["91.2"],"但是切记":["91.2"],"是只读的":["91.2"],"只能读取":["91.2"],"不能修改":["91.2"],"自定义事件可以实现子组件给父组件传递数据":["91.3"],"都是原生":["91.4"],"vue2中却不是这样的":["91.4"],"在vue2中组件标签需要通过native修饰符才能变为原生dom事件":["91.4"],"定义就变为自定义事件了":["91.5"],"let":["91.5"],"npmjs":["91.6"],"com":["91.6"],"package":["91.6","157.6"],"msg1":["91.7"],"defineprops":["91.8"],"接受了某一个属性":["91.8"],"方法返回的对象身上就没有相应属性与属性值":["91.8"],"button":["91.9","92.17"],"handler":["91.9"],"点击我获取父组件实例":["91.9"],"获取存储的数值":["91.10"],"使用方式参照官网":["91.11"],"父组件决定子组件的结构与外观":["91.12"],"style":["91.12"],"done":["91.12"],"green":["91.12","134.2"],"title":["91.12"],"或者":["92.2"],"非ts":["92.6"],"子组件模板中的表达式只能访问子组件的作用域":["92.10"],"loading":["92.13"],"下":["92.14"],"需要通过ref":["92.16"],"reactive":["92.16"],"添加响应式":["92.16"],"onchangemsg":["92.17"],"改变msg":["92.17"],"etc":["93.4","120.1"],"save":["93.4"],"as":["93.4"],"future":["93.4"],"projects":["93.4"],"并且它是预配置的":["93.5"],"并且支持大部分rollup插件":["93.5"],"项目的目录结构":["93.6"],"更好的支持typescript":["94.1"],"全局api的修改":["94.3"],"将原来的全局api转移到应用对象":["94.3"],"模板语法变化":["94.3"],"改进":["95.2"],"了":["95.3"],"octal":["98.2"],"0o744":["98.2"],"八进制s":["98.2"],"返回的是一个":["98.3"],"y":["98.5","145.2"],"boolean":["98.5"],"no":["98.6"],"yes":["98.6"],"不能":["98.8"],"赋予":["98.8"],"while":["98.10"],"aaa":["98.11"],"abcd":["98.14"],"更像面向对象编程的语法而已":["99.0"],"我叫zs":["99.1"],"我18了":["99.1"],"可以调用从父中继承得到的方法":["99.2"],"受保护":["99.6"],"及其子类中访问":["99.6"],"peter":["99.7"],"error":["99.7","108.3","123.14"],"sayyyy":["99.8"],"aa":["99.8","101.2"],"可以使用this调用":["99.8"],"e":["99.10","122.21","122.22"],"我的名字是zs":["99.11"],"年龄是7":["99.11"],"zs":["100.2","103.3","104.1"],"c":["100.4","103.5"],"b":["100.4","109.10","121.4"],"bb":["101.2"],"因为只有一个参数t":["101.3"],"tofixed":["101.4"],"张麻子":["101.5"],"number没有length属性":["101.7"],"ts文件会先编译为js文件":["102.2"],"有强大的代码类型提示":["102.3"],"typescript":["102.5"],"true为开启严格模式":["102.7"],"false为关闭":["102.7"],"启动文件名":["102.10"],"zhangsan":["103.1"],"字面量模式虽然可以赋值任意类型":["104.1"],"但是赋完值之后":["104.1"],"这个对象类型是没有办法去做一个修改的":["104.1"],"如果给它增加一个age属性":["104.1"],"它是没有办法去做增加的":["104.1"],"无法对这个变量的进行任何赋值的一个操作":["104.1"],"生成单个":["105.0"],"soucemaps":["105.0"],"而不是将":["105.0"],"sourcemaps":["105.0"],"生成不同的文件":["105.0"],"inlinesources":["105.0"],"将代码与":["105.0"],"生成到一个文件中":["105.0"],"要求同时设置了":["105.0"],"其他选项":["105.0"],"experimentaldecorators":["105.0"],"启用装饰器":["105.0"],"emitdecoratormetadata":["105.0"],"为装饰器提供元数据的支持":["105.0"],"变量s的值":["106.2"],"只能是上面value定义的值":["106.2"],"对响应错误做点什么":["107.4"],"config":["107.5"],"网络错误":["108.1"],"跨域请求是否需要携带":["108.2"],"cookie":["108.2"],"请求配置":["108.3"],"promise":["108.3","108.4","111.11"],"版本不受支持":["108.4"],"异常问题":["108.4"],"请联系管理员":["108.4"],"headers":["108.5"],"signheader":["108.5"],"查看局部配置":["109.1"],"file2":["109.5"],"filename":["109.6"],"比较两个分支指定文件的差异":["109.7"],"分支1":["109.7"],"分支2":["109.7"],"记录和作者":["109.8"],"blame":["109.8"],"工作区和暂存区所有文件恢复成和指定版本一样":["109.15"],"版本号":["109.15"],"head":["109.16"],"rename":["109.18"],"旧名":["109.18"],"新名":["109.18"],"force":["109.21","122.18","124.0"],"ssh目录下":["110.4"],"axios":["111.2","111.10"],"echarts":["111.2"],"等技术栈":["111.2"],"安装全部依赖":["111.4"],"安装完依赖运行程序":["111.4"],"run":["111.4","127.2"],"代码在ecmascript模块中":["111.6"],"eslint支持使用第三方插件":["111.6"],"在使用插件之前":["111.6"],"您必须使用npm安装它":["111.6"],"该eslint":["111.6"],"前缀可以从插件名称被省略":["111.6"],"plugins":["111.6"],"eslint规则":["111.6"],"rules":["111.6"],"object":["111.8"],"keys":["111.8"],"foreach":["111.8"],"在入口文件引入":["111.8"],"use":["111.8"],"方法安装自定义插件":["111.8"],"gloablcomponent":["111.8"],"less":["111.9"],"后面的":["111.9"],"不要忘记":["111.9"],"不然会报错":["111.9"],"配置完毕你会发现":["111.9"],"提供这些全局变量可以在组件样式中使用了":["111.9"],"没有返回失败的信息":["111.10"],"获取用户信息失败":["111.10"],"安装":["111.10"],"最后通过":["111.10"],"测试接口":["111.10"],"无网络":["111.11"],"type":["111.11"],"reqlogout":["111.12"],"last":["112.0"],"运行nginx":["112.1"],"desc":["113.1"],"显示表的结构":["113.1"],"从表中删除数据":["113.2"],"grants":["113.3"],"for":["113.3"],"显示用户的权限":["113.3"],"073":["114.1"],"03":["114.4"],"根据数据的特性和需求":["114.5"],"选择适当的数据类型是非常重要的":["114.5"],"数据查询和分析":["115.0"],"数据库提供了强大的查询语言和工具":["115.0"],"使用户能够轻松地执行复杂的数据查询和分析操作":["115.0"],"workbench":["115.1","117.1"],"以及各种编程语言的mysql连接器":["115.1"],"无论是小型应用程序还是大型企业级系统":["115.1"],"mysql都是一个可靠和优秀的选择":["115.1"],"输入服务器名称":["117.1"],"用户名和密码进行连接":["117.1"],"替换为您希望创建的数据库的名称":["117.2"],"等替换为表的列名和相应的数据类型":["117.4"],"等替换为要插入的值":["117.5"],"替换为检索条件":["117.6"],"替换为更新条件":["117.7"],"替换为删除条件":["117.8"],"server":["118.2","118.7"],"running":["118.2","118.7","121.16","121.17"],"at":["118.2","118.7","121.16","121.17"],"logo":["118.3"],"png":["118.3"],"encoded":["118.8"],"extended":["118.8"],"第三方中间件":["118.8"],"ie10":["118.11"],"chrome4":["118.11"],"firefox3":["118.11"],"text":["118.14"],"plain":["118.14"],"服务器成功响应预检请求后":["118.15"],"才会发送真正的请求":["118.15"],"并且携带真实数据":["118.15"],"stringify":["119.4"],"err":["119.4","121.9","123.14"],"throw":["119.4"],"arr":["119.4"],"文件保存成功":["119.4"],"p616779645":["119.6"],"触不可及":["119.6"],"intouchables":["119.6"],"p1454261925":["119.6"],"当幸福来敲门":["119.6"],"pursuit":["119.6"],"happyness":["119.6"],"p2614359276":["119.6"],"龙猫":["119.6"],"となりのトトロ":["119.6"],"p2540924496":["119.6"],"接口项目":["120.1"],"读写和操作数据库":["120.1"],"创建实用的命令行工具辅助前端开发":["120.1"],"网络操作":["120.2"],"线程池里的任务是通过队列和事件循环的机制来执行":["120.2"],"追加和读取":["121.1"],"jpg":["121.3"],"文件写入成功":["121.3"],"pipe":["121.4"],"可以将可读流中的内容":["121.4"],"直接输出到可写流中":["121.4"],"写入成功":["121.6"],"关闭流":["121.7"],"buf":["121.8"],"将":["121.8"],"数据转为字符串":["121.8"],"function":["121.9"],"data":["121.9"],"0xaa":["121.10"],"buf3":["121.10"],"allocunsafe":["121.10"],"如使用何种语法格式引用模块和向外暴露成员":["122.2"],"指向的对象为准":["122.7"],"若失败则报错":["122.13"],"可以从npm":["122.15"],"官网中搜索自己所需要的包":["122.15"],"要快的":["122.16"],"检查镜像源是否下载成功":["122.17"],"删除":["122.18"],"unpublish":["122.18"],"加载失败":["122.21"],"终端报错":["122.21"],"cannot":["122.23"],"find":["122.23"],"module":["122.23"],"xxx":["122.23"],"使用标记删除的形式":["123.3"],"模拟删除的动作":["123.3"],"即在表中设置状态字段":["123.3"],"标记当前的数据是否被删除":["123.3"],"status":["123.3"],"服务器需要完成页面内容的拼接":["123.5"],"若请求比较多":["123.5"],"会对服务器造成一定访问压力":["123.5"],"不利于前后端分离":["123.5"],"开发效率低":["123.5"],"技术能解决":["123.6"],"问题":["123.6"],"其他页面前后端分离的开发模式":["123.7"],"logout":["123.11"],"清空当前客户端的session信息":["123.11"],"destroy":["123.11"],"请求头":["123.13"],"authorization":["123.13"],"字段中":["123.13"],"加上":["123.13"],"bearer":["123.13"],"前缀":["123.13"],"next":["123.14"],"unauthorizederror":["123.14"],"invalid":["123.14"],"unknown":["123.14"],"search":["124.0"],"keyword":["124.0"],"清除缓存并重装依赖项":["124.0"],"并使用其他人已经创建的模块":["125.1"],"的版本号":["125.2"],"则说明已成功安装":["125.2"],"获取有关指定包的信息":["125.3"],"这只是一小部分常用的":["125.3"],"提供了更多的命令和选项":["125.3"],"可以根据需要进行学习和使用":["125.3"],"你可以添加依赖项":["125.4"],"配置脚本":["125.4"],"指定项目的许可证等":["125.4"],"文件中的配置自动下载和安装所需的包":["125.5"],"并确保提供清晰的文档":["125.6"],"合适的版本管理和高质量的代码":["125.6"],"并注册一个账号":["126.1"],"使用方法和示例代码":["126.4"],"上搜索你的包":["126.5"],"并查看它的页面":["126.5"],"publish":["126.6"],"到你的计算机上":["127.1"],"是你要运行的脚本命令的名称":["127.2"],"可以让开发人员创造出各种视觉效果":["130.1"],"上放置和移动元素":["130.3"],"文本":["130.4"],"图片等元素":["130.4"],"来动态地生成绘图元素":["130.5"],"从而实现更加复杂和丰富的视觉效果":["130.5"],"和库集成":["130.6"],"以创造更加丰富和定制化的用户体验":["130.6"],"的动画效果在各种设备与浏览器上都表现良好":["130.7"],"是非常适合移动设备和桌面浏览器上创建动态效果的途径":["130.7"],"的渲染速度可能会变慢":["130.8"],"取消前面的图像变换":["131.0"],"需要使用":["131.1"],"translate":["131.1"],"方法移动画布":["131.1"],"上面代码会显示一个水平倒转的":["131.2"],"高度放大":["131.2"],"倍的":["131.2"],"负向缩放本质是坐标翻转":["131.2"],"所针对的坐标轴就是画布左上角原点的坐标轴":["131.2"],"移动到":["131.4"],"多个":["131.4"],"方法具有叠加效果":["131.4"],"所以第二个矩形的左上角回到":["131.5"],"可以得到不同的效果":["132.0"],"fillrect":["133.1","134.4"],"closepath":["133.2"],"闭合路径之后图形绘制命令又重新指向到上下文中":["133.2"],"不是必需的":["133.2"],"stroke":["134.1","137.1","137.2"],"线条的宽度为":["134.1"],"线条的末端和交点都改成圆角":["134.1"],"并且设置为虚线":["134.1"],"white":["134.2"],"生成辐射样式以后":["134.2"],"用这个样式填充一个矩形":["134.2"],"图像加载成功以后":["134.3"],"生成图像样式":["134.3"],"然后使用这个样式填充指定区域":["134.3"],"第五个参数是半径":["136.3"],"与":["136.3"],"形成一条直线":["136.3"],"形成第二条直线":["136.3"],"弧线就是与这两根直线相切的部分":["136.3"],"arc":["136.6"],"math":["136.6"],"pi":["136.6"],"二等奖":["138.2"],"三等奖":["138.2"],"requestanimationframe":["139.3"],"href":["141.3"],"改变颜色":["141.3"],"onchange":["141.3"],"strokestyle":["141.3"],"destination":["141.3"],"out":["141.3"],"clearrect":["141.3"],"width":["141.4"],"height":["141.4"],"使开发者能够轻松构建高性能的图形界面和游戏":["144.1"],"锚点":["145.2"],"如旋转":["145.2"],"位移的基点":["145.2"],"x":["145.2"],"也是从左上角开始计算":["145.2"],"将矩形添加到舞台":["145.2"],"stage":["145.2","146.1","146.2","148.1","149.3","150.2","150.3","150.4","150.5","152.1","152.2"],"addchild":["145.2","146.1","146.2","148.1","149.3","150.1","150.2","150.3","150.4","150.5"],"set":["146.1","148.1"],"将文字添加到舞台":["146.1"],"anchor":["148.1"],"将精灵添加到舞台":["148.1","149.3"],"sprite":["148.3"],"view":["149.1"],"any":["149.1"],"app":["150.5"],"sprite2":["152.1","152.2"],"创建精灵2":["152.2"],"150px":["153.1"],"这点和":["153.1"],"canvas":["153.1"],"000000":["153.7"],"动画":["154.0"],"animation":["154.0"],"提供了强大的动画支持":["154.0"],"可以实现各种复杂的动画效果":["154.0"],"您可以通过修改场景中的属性或使用插值器来创建动画序列":["154.0"],"交互":["154.0"],"interaction":["154.0"],"可以与用户交互":["154.0"],"通过鼠标":["154.0"],"键盘和触摸事件来控制和操纵":["154.0"],"完整代码":["155.9","155.12","156.5"],"xzy":["156.3"],"pnpm":["157.1"],"echo":["157.2"],"比如你在":["157.9"],"下创建一个":["157.9"],"notes":["157.9"],"文件夹":["157.9"],"那么它的路径就是":["157.9"],"about2":["157.10"],"的分支":["157.11"],"这个分支存放着就是打包好的代码":["157.11"],"settings":["157.11"],"会有一个地址":["157.11"],"这个地址就是部署之后的地址了":["157.11"],"这个项目是实时更新的不需要你重新部署操作":["157.11"],"你要做的就是更新你的":["157.11"],"分支即可":["157.11"]}]'},e={"0.0":{t:"# Map 数据结构",p:"",l:"ECMAScript/es6/Map数据结构.html",a:"map-数据结构"},"0.1":{t:"简述",p:`Map 是 ES6 中一种强大的数据结构，它是一种用于存储键值对的集合。
`,l:"ECMAScript/es6/Map数据结构.html#简述",a:"简述"},"0.2":{t:"方法",p:`在 ES6 中，Map 数据结构提供了以下常用的方法：

set(key, value): 向 Map 中添加键值对，如果键已存在，则更新对应的值。
get(key): 获取指定键对应的值，如果键不存 ...`,l:"ECMAScript/es6/Map数据结构.html#方法",a:"方法"},"0.3":{t:"对象操作",p:"",l:"ECMAScript/es6/Map数据结构.html#对象操作",a:"对象操作"},"0.4":{t:"转换",p:`var kvArray = [
  ['key1', 'value1'],
  ['key2', 'value2']
]
// 可以将 二维 键值对数组转换 Map 对象

var myMap = n ...`,l:"ECMAScript/es6/Map数据结构.html#转换",a:"转换"},"0.5":{t:"克隆",p:`var myMap1 = new Map([
  ['key1', 'value1'],
  ['key2', 'value2']
])
var myMap2 = new Map(myMap1)
/* ...`,l:"ECMAScript/es6/Map数据结构.html#克隆",a:"克隆"},"0.6":{t:"合并",p:`var first = new Map([
  [1, 'one'],
  [2, 'two'],
  [3, 'three']
])
var second = new Map([
  [1, 'un ...`,l:"ECMAScript/es6/Map数据结构.html#合并",a:"合并"},"1.0":{t:"# Set 数据结构",p:"",l:"ECMAScript/es6/Set数据结构.html",a:"set-数据结构"},"1.1":{t:"简述",p:`Set对象是值的集合，你可以按照插入的顺序迭代它的元素。Set 中的元素只会出现一次，即 Set 中的元素是唯一的。
`,l:"ECMAScript/es6/Set数据结构.html#简述",a:"简述"},"1.2":{t:"实例的方法与属性",p:"",l:"ECMAScript/es6/Set数据结构.html#实例的方法与属性",a:"实例的方法与属性"},"1.3":{t:"add(value) 方法",p:`在 Set 对象尾部添加一个元素。返回该 Set 对象。
const s = new Set()
s.add(0)
// 可以连写
s.add(1).add(2).add(2).add(3)
cons ...`,l:"ECMAScript/es6/Set数据结构.html#add-value-方法",a:"add-value-方法"},"1.4":{t:"clear() 方法",p:`移除 Set 对象内的所有元素。
const s = new Set()
s.add(0)
s.add(1).add(2).add(2).add(3)
s.clear()
console.log(s) ...`,l:"ECMAScript/es6/Set数据结构.html#clear-方法",a:"clear-方法"},"1.5":{t:"delete(value) 方法",p:`移除值为 value 的元素，并返回一个布尔值来表示是否移除成功。Set.prototype.has(value) 会在此之后返回 false。
const s = new Set()
s.add(0 ...`,l:"ECMAScript/es6/Set数据结构.html#delete-value-方法",a:"delete-value-方法"},"1.6":{t:"entries() 方法",p:`返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值的 [value, value] 数组。为了使这个方法和 Map 对象保持相似，每个值的键和值相等。
const set ...`,l:"ECMAScript/es6/Set数据结构.html#entries-方法",a:"entries-方法"},"1.7":{t:"has(value) 方法",p:`返回一个布尔值，表示该值在 Set 中存在与否。
const s = new Set()
s.add(0)
s.add(1).add(2).add(2).add(3)
console.log(s.ha ...`,l:"ECMAScript/es6/Set数据结构.html#has-value-方法",a:"has-value-方法"},"1.8":{t:"values() 方法",p:`返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值。
const set1 = new Set()
set1.add(42)
set1.add('forty two')
 ...`,l:"ECMAScript/es6/Set数据结构.html#values-方法",a:"values-方法"},"1.9":{t:"keys() 方法",p:`与 values() 方法相同，返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值。
`,l:"ECMAScript/es6/Set数据结构.html#keys-方法",a:"keys-方法"},"1.10":{t:"size 属性",p:`返回 Set 对象中的值的个数
const s = new Set()
s.add(0)
s.add(1).add(2).add(2).add(3)

console.log(s.size) // 4 ...`,l:"ECMAScript/es6/Set数据结构.html#size-属性",a:"size-属性"},"1.11":{t:"使用 Set 实现的一些方法",p:"",l:"ECMAScript/es6/Set数据结构.html#使用-set-实现的一些方法",a:"使用-set-实现的一些方法"},"1.12":{t:"转换",p:`// Array 转 Set
var mySet = new Set(['value1', 'value2', 'value3']) // {&quot;value1&quot;, &quot;val ...`,l:"ECMAScript/es6/Set数据结构.html#转换",a:"转换"},"1.13":{t:"去重",p:`var mySet = new Set([1, 2, 2, 1, 3, 4, 4])
;[...mySet] // [1, 2, 3, 4]

`,l:"ECMAScript/es6/Set数据结构.html#去重",a:"去重"},"1.14":{t:"并集",p:`var a = new Set([1, 2, 3])
var b = new Set([4, 3, 2])
var union = new Set([...a, ...b]) // {1, 2, 3, ...`,l:"ECMAScript/es6/Set数据结构.html#并集",a:"并集"},"1.15":{t:"交集",p:`var a = new Set([1, 2, 3])
var b = new Set([4, 3, 2])

var intersect = new Set([...a].filter((x) =&g ...`,l:"ECMAScript/es6/Set数据结构.html#交集",a:"交集"},"1.16":{t:"差集",p:`var a = new Set([1, 2, 3])
var b = new Set([4, 3, 2])
var difference = new Set([...a].filter((x) =&g ...`,l:"ECMAScript/es6/Set数据结构.html#差集",a:"差集"},"2.0":{t:"# ES6 class",p:`在 ECMAScript 2015（ES6）中，引入了类（Class）的概念，允许我们以一种更面向对象的方式来创建和管理对象。
`,l:"ECMAScript/es6/class.html",a:"es6-class"},"2.1":{t:"创建类",p:`使用class关键字可以定义一个类，类名通常首字母大写。
class Person {
  // 构造函数，用于创建对象时进行初始化
  constructor(name, age) {
    th ...`,l:"ECMAScript/es6/class.html#创建类",a:"创建类"},"2.2":{t:"创建对象",p:`通过类创建对象时，需要使用new关键字。
const person1 = new Person('John', 30)
const person2 = new Person('Alice', 25)
 ...`,l:"ECMAScript/es6/class.html#创建对象",a:"创建对象"},"2.3":{t:"类的继承",p:`ES6 的类支持继承，可以使用extends关键字来继承另一个类的属性和方法。
class Student extends Person {
  constructor(name, age, majo ...`,l:"ECMAScript/es6/class.html#类的继承",a:"类的继承"},"2.4":{t:"方法重写",p:`子类可以重写继承自父类的方法。
class Student extends Person {
  // ...

  // 重写父类的方法
  sayHello() {
    console.log ...`,l:"ECMAScript/es6/class.html#方法重写",a:"方法重写"},"2.5":{t:"静态方法",p:`使用static关键字定义静态方法，静态方法属于类本身，而不是类的实例。
class MathUtils {
  static add(a, b) {
    return a + b
  }

   ...`,l:"ECMAScript/es6/class.html#静态方法",a:"静态方法"},"2.6":{t:"Getter 和 Setter",p:`使用get和set关键字定义属性的读取器和设置器。
class Circle {
  constructor(radius) {
    this._radius = radius
  }

  // ...`,l:"ECMAScript/es6/class.html#getter-和-setter",a:"getter-和-setter"},"3.0":{t:"# ECMAScript 的介绍",p:"",l:"ECMAScript/es6/index.html",a:"ecmascript-的介绍"},"3.1":{t:"ES6 入门教程",p:`阮一峰ECMAScript 6 入门
`,l:"ECMAScript/es6/index.html#es6-入门教程",a:"es6-入门教程"},"3.2":{t:"ECMAScript 简介",p:`
ECMAScript（简称 ES）是一种由 ECMA 国际（European Computer Manufacturers Association）制定和维护的脚本语言标准。它是 JavaScrip ...`,l:"ECMAScript/es6/index.html#ecmascript-简介",a:"ecmascript-简介"},"3.3":{t:"ECMAScript 与 JavaScript 的关系？",p:`
ECMAScript 简称 ES。ES 是一个脚本语言。注意，是 ES 也是脚本语言。
ES 通常可以看作是 JavaScript 的标准化规范。
ES 只提供了最基本的语法。如：怎样定义变量和函数 ...`,l:"ECMAScript/es6/index.html#ecmascript-与-javascript-的关系",a:"ecmascript-与-javascript-的关系"},"3.4":{t:"ECMAScript 版本发布记录",p:`以下是每个 ECMAScript 版本的主要内容概述：


ECMAScript 1 (ES1) - 1997:

第一个 ECMAScript 版本，定义了基本的语法和数据类型，包括变量、操作符、函 ...`,l:"ECMAScript/es6/index.html#ecmascript-版本发布记录",a:"ecmascript-版本发布记录"},"4.0":{t:"# ES6 模块化",p:"",l:"ECMAScript/es6/module.html",a:"es6-模块化"},"4.1":{t:"引言",p:"随着前端技术的不断发展，JavaScript 作为一种脚本语言，其应用范围也越来越广泛。然而，在处理复杂的项目和大规模的代码库时，传统的 JavaScript 代码组织方式会变得不够优雅和高效。为了解 ...",l:"ECMAScript/es6/module.html#引言",a:"引言"},"4.2":{t:"模块化的意义",p:`在传统的 JavaScript 代码中，所有的变量、函数和类等都在全局作用域下定义，这样容易导致命名冲突和代码复杂度的增加。尤其在大型项目中，代码量庞大、文件众多，这些问题会变得更为明显。
模块化的意 ...`,l:"ECMAScript/es6/module.html#模块化的意义",a:"模块化的意义"},"4.3":{t:"避免命名冲突",p:`在模块中定义的变量、函数和类等都只在当前模块的作用域内有效，不会污染全局命名空间，从而避免了命名冲突的问题。
`,l:"ECMAScript/es6/module.html#避免命名冲突",a:"避免命名冲突"},"4.4":{t:"更好的代码组织和维护",p:`模块化将代码分割成多个小块，每个模块都有自己的职责，使得代码的组织和维护变得更加清晰和简单。开发者可以更容易地理解每个模块的功能，并且修改、测试和重构模块都更加方便。
`,l:"ECMAScript/es6/module.html#更好的代码组织和维护",a:"更好的代码组织和维护"},"4.5":{t:"代码重用",p:`模块化使得代码可以被多个模块共享和复用，提高了代码的可重用性。当多个模块需要相同的功能时，只需要导入相应的模块，而不需要重复编写代码。
`,l:"ECMAScript/es6/module.html#代码重用",a:"代码重用"},"4.6":{t:"导出模块",p:`在 ES6 中，通过使用export关键字，我们可以将模块中的变量、函数或类导出，以便其他模块可以使用它们。
`,l:"ECMAScript/es6/module.html#导出模块",a:"导出模块"},"4.7":{t:"导出变量",p:`使用export关键字导出一个变量。
// module1.js
export const name = 'John'

`,l:"ECMAScript/es6/module.html#导出变量",a:"导出变量"},"4.8":{t:"导出函数",p:`使用export关键字导出一个函数。
// module1.js
export function sayHello() {
  console.log(\`Hello, \${name}!\`)
}

`,l:"ECMAScript/es6/module.html#导出函数",a:"导出函数"},"4.9":{t:"导出类",p:`使用export关键字导出一个类。
// module1.js
export class Person {
  constructor(name) {
    this.name = name
  } ...`,l:"ECMAScript/es6/module.html#导出类",a:"导出类"},"4.10":{t:"导入模块",p:`通过使用import关键字，我们可以将其他模块中的变量、函数或类导入到当前模块中。
`,l:"ECMAScript/es6/module.html#导入模块",a:"导入模块"},"4.11":{t:"导入单个变量",p:`使用import关键字导入其他模块中的单个变量。
// main.js
import { name } from './module1.js'

console.log(name) // 输出：Joh ...`,l:"ECMAScript/es6/module.html#导入单个变量",a:"导入单个变量"},"4.12":{t:"导入函数",p:`使用import关键字导入其他模块中的函数。
// main.js
import { sayHello } from './module1.js'

sayHello() // 输出：Hello, J ...`,l:"ECMAScript/es6/module.html#导入函数",a:"导入函数"},"4.13":{t:"导入类",p:`使用import关键字导入其他模块中的类。
// main.js
import { Person } from './module1.js'

const person = new Person('A ...`,l:"ECMAScript/es6/module.html#导入类",a:"导入类"},"4.14":{t:"导入全部内容",p:`使用as来导入整个模块的内容，并将其绑定到一个变量上。
// main.js
import as module1 from './module1.js'

console.log(module1.na ...`,l:"ECMAScript/es6/module.html#导入全部内容",a:"导入全部内容"},"4.15":{t:"默认导出",p:`除了命名导出，一个模块还可以有一个默认导出，用于导出模块中的主要功能或对象。
`,l:"ECMAScript/es6/module.html#默认导出",a:"默认导出"},"4.16":{t:"默认导出变量",p:`// module2.js
const age = 30
export default age

// main.js
import myAge from './module2.js'
console ...`,l:"ECMAScript/es6/module.html#默认导出变量",a:"默认导出变量"},"4.17":{t:"默认导出函数",p:`// module2.js
export default function sayHello() {
  console.log('Hello, default export!')
}

// mai ...`,l:"ECMAScript/es6/module.html#默认导出函数",a:"默认导出函数"},"4.18":{t:"默认导出类",p:`// module2.js
export default class Person {
  constructor(name) {
    this.name = name
  }

  sayHel ...`,l:"ECMAScript/es6/module.html#默认导出类",a:"默认导出类"},"4.19":{t:"同时使用命名导出和默认导出",p:`一个模块可以同时有命名导出和默认导出。
// module3.js
export const name = 'Alice'

export default class {
  // ...
}

// ...`,l:"ECMAScript/es6/module.html#同时使用命名导出和默认导出",a:"同时使用命名导出和默认导出"},"4.20":{t:"重命名导入和导出",p:`使用as关键字可以在导入和导出时重命名变量名，避免命名冲突或提高代码可读性。
`,l:"ECMAScript/es6/module.html#重命名导入和导出",a:"重命名导入和导出"},"4.21":{t:"重命名导入",p:`// module4.js
export const myName = 'Tom'

// main.js
import { myName as name } from './module4.js'
 ...`,l:"ECMAScript/es6/module.html#重命名导入",a:"重命名导入"},"4.22":{t:"重命名导出",p:`// module4.js
const myAge = 25
export { myAge as age }

// main.js
import { age } from './module4.js ...`,l:"ECMAScript/es6/module.html#重命名导出",a:"重命名导出"},"4.23":{t:"动态导入",p:`除了静态导入外，ES6 还引入了动态导入，可以在代码运行时根据条件来导入模块。这样可以优化代码加载，提高页面的响应速度。
const condition = true

if (condition)  ...`,l:"ECMAScript/es6/module.html#动态导入",a:"动态导入"},"4.24":{t:"注意事项",p:`在使用 ES6 模块化时，需要注意以下几点：
`,l:"ECMAScript/es6/module.html#注意事项",a:"注意事项"},"4.25":{t:"文件扩展名",p:`模块文件必须以.js为后缀。
`,l:"ECMAScript/es6/module.html#文件扩展名",a:"文件扩展名"},"4.26":{t:"模块的类型",p:`在浏览器环境中，需要在\`

`,l:"ECMAScript/es6/module.html#模块的类型",a:"模块的类型"},"4.27":{t:"严格模式",p:`模块中的代码在严格模式下运行，无需显式指定&quot;use strict&quot;。
`,l:"ECMAScript/es6/module.html#严格模式",a:"严格模式"},"4.28":{t:"导入和导出位置",p:`导入和导出语句只能位于模块的顶层，不能嵌套在其他块中。
::: tip 总结
ES6 模块化是一种优雅、灵活的 JavaScript 代码组织与交互方式，它允许开发者将代码分割成多个模块，每个模块都有 ...`,l:"ECMAScript/es6/module.html#导入和导出位置",a:"导入和导出位置"},"5.0":{t:"# ES6 函数的扩展",p:"",l:"ECMAScript/es6/函数的扩展.html",a:"es6-函数的扩展"},"5.1":{t:"函数参数的默认值",p:"",l:"ECMAScript/es6/函数的扩展.html#函数参数的默认值",a:"函数参数的默认值"},"5.2":{t:"认识函数参数的默认值",p:`调用函数的时候传参了，就用传递的参数；如果没传参，就用默认值
`,l:"ECMAScript/es6/函数的扩展.html#认识函数参数的默认值",a:"认识函数参数的默认值"},"5.3":{t:"函数参数默认值的基本用法",p:`// 之前的默认值实现方式
const multiply = (x, y) =&gt; {
  if (typeof y === 'undefined') {
    y = 3
  }
  retu ...`,l:"ECMAScript/es6/函数的扩展.html#函数参数默认值的基本用法",a:"函数参数默认值的基本用法"},"5.4":{t:"默认值的生效条件",p:`不传参数，或者明确的传递 undefined 作为参数，只有这两种情况下，默认值才会生效。
注意：null 就是 null，不会使用默认值。
`,l:"ECMAScript/es6/函数的扩展.html#默认值的生效条件",a:"默认值的生效条件"},"5.5":{t:"与解构赋值默认值结合使用",p:`参数默认值可以与解构赋值的默认值，结合起来使用。
function foo({ x, y = 5 }) {
  console.log(x, y)
}

foo({}) // undefined 5
 ...`,l:"ECMAScript/es6/函数的扩展.html#与解构赋值默认值结合使用",a:"与解构赋值默认值结合使用"},"5.6":{t:"参数默认值的位置",p:`通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。
// 例一
function f(x = 1, ...`,l:"ECMAScript/es6/函数的扩展.html#参数默认值的位置",a:"参数默认值的位置"},"5.7":{t:"函数参数默认值的应用",p:`接收很多参数的时候
// 普通时候
const logUser = (username = 'zjr', age = 18, sex = 'male') =&gt; {
  console.log(u ...`,l:"ECMAScript/es6/函数的扩展.html#函数参数默认值的应用",a:"函数参数默认值的应用"},"5.8":{t:"rest 参数",p:"",l:"ECMAScript/es6/函数的扩展.html#rest-参数",a:"rest-参数"},"5.9":{t:"前言",p:"剩余语法（Rest syntax 也可以叫剩余参数）看起来和展开语法完全相同都是使用 ... 的语法糖，不同之处在于剩余参数用于解构数组和对象。从某种意义上说，剩余语法与展开语法是相反的：展开语法将数 ...",l:"ECMAScript/es6/函数的扩展.html#前言",a:"前言"},"5.10":{t:"函数参数",p:`在讲解剩余参数前，我们先来看看，剩余参数在函数参数中都解决了哪些问题？为什么会引入剩余参数的概念？
在 ES5 中，函数经常会传入不定参数，在传入不定参数时，ES5 的给出的解决方案是通过 argum ...`,l:"ECMAScript/es6/函数的扩展.html#函数参数",a:"函数参数"},"5.11":{t:"注意事项",p:`箭头函数的剩余参数
箭头函数的参数部分即使只有一个剩余参数，也不能省略圆括号。
const add = (...args) =&gt; {};
使用剩余参数替代 arguments 获取实际参数

剩 ...`,l:"ECMAScript/es6/函数的扩展.html#注意事项",a:"注意事项"},"5.12":{t:"剩余参数的应用",p:`作为数组的应用：
const add = (...args) =&gt; {
  let sum = 0

  for (let i = 0; i &lt; args.length; i++) {
  ...`,l:"ECMAScript/es6/函数的扩展.html#剩余参数的应用",a:"剩余参数的应用"},"5.13":{t:"小结",p:`本节结合了 ES5 函数中的 arguments 对象引入了为什么 ES6 会引入剩余参数的概念，可以看到剩余参数所带来的好处。本节内容可以总结以下几点：

剩余参数是为了能替代函数内部的 argum ...`,l:"ECMAScript/es6/函数的扩展.html#小结",a:"小结"},"5.14":{t:"箭头函数",p:`ES6 引入了箭头函数（Arrow Functions），是一种更简洁和灵活的函数定义方式。箭头函数通常与其他 ES6 特性（如解构赋值、模板字符串等）结合使用，使得代码更加现代化和易读。
`,l:"ECMAScript/es6/函数的扩展.html#箭头函数",a:"箭头函数"},"5.15":{t:"基本语法",p:`箭头函数的基本语法如下：
const functionName = (parameter1, parameter2, ...) =&gt; {
  // 函数体
  return result;
}; ...`,l:"ECMAScript/es6/函数的扩展.html#基本语法",a:"基本语法"},"5.16":{t:"没有参数或多个参数",p:`当箭头函数没有参数或有多个参数时，需要使用括号来表示参数列表。
// 没有参数
const greet = () =&gt; console.log('Hello!')
greet() // 输出：H ...`,l:"ECMAScript/es6/函数的扩展.html#没有参数或多个参数",a:"没有参数或多个参数"},"5.17":{t:"箭头函数与 this",p:`箭头函数与传统函数有一个重要的区别：箭头函数没有自己的this，它继承自外层作用域的this。
在传统函数中，this的值是在函数调用时动态确定的，取决于调用方式（比如函数是否作为对象的方法调用、是否 ...`,l:"ECMAScript/es6/函数的扩展.html#箭头函数与-this",a:"箭头函数与-this"},"5.18":{t:"使用注意事项",p:`
如果箭头函数只有一个参数，可以省略参数列表的括号。
如果箭头函数的函数体为空或只有一个表达式，可以省略花括号和return关键字。
避免在对象方法中使用箭头函数，因为箭头函数会继承外层作用域的thi ...`,l:"ECMAScript/es6/函数的扩展.html#使用注意事项",a:"使用注意事项"},"5.19":{t:"函数参数的尾逗号",p:`ES2017 允许函数的最后一个参数有尾逗号（trailing comma）。
此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。
function clownsEverywhere(para ...`,l:"ECMAScript/es6/函数的扩展.html#函数参数的尾逗号",a:"函数参数的尾逗号"},"5.20":{t:"catch 命令的参数省略",p:`JavaScript 语言的try...catch结构，以前明确要求catch命令后面必须跟参数，接受try代码块抛出的错误对象。
try {
  // ...
} catch (err) {
  / ...`,l:"ECMAScript/es6/函数的扩展.html#catch-命令的参数省略",a:"catch-命令的参数省略"},"6.0":{t:"# Js 字符串的常用方法",p:"",l:"ECMAScript/es6/字符串的常用方法.html",a:"js-字符串的常用方法"},"6.1":{t:"一、操作方法",p:`我们也可将字符串常用的操作方法归纳为增、删、改、查，需要知道字符串的特点是一旦创建了，就不可变
`,l:"ECMAScript/es6/字符串的常用方法.html#一、操作方法",a:"一、操作方法"},"6.2":{t:"增",p:`这里增的意思并不是说直接增添内容，而是创建字符串的一个副本，再进行操作
除了常用+以及\${}进行字符串拼接之外，还可通过concat
`,l:"ECMAScript/es6/字符串的常用方法.html#增",a:"增"},"6.3":{t:"concat()",p:`用于将一个或多个字符串拼接成一个新字符串
let stringValue = 'hello '
let result = stringValue.concat('world')
console.log ...`,l:"ECMAScript/es6/字符串的常用方法.html#concat",a:"concat"},"6.4":{t:"删",p:`这里的删的意思并不是说删除原字符串的内容，而是创建字符串的一个副本，再进行操作
常见的有：

slice()
substr()
substring()

这三个方法都返回调用它们的字符串的一个子字符串 ...`,l:"ECMAScript/es6/字符串的常用方法.html#删",a:"删"},"6.5":{t:"改",p:`这里改的意思也不是改变原字符串，而是创建字符串的一个副本，再进行操作
常见的有：


trim()、trimLeft()、trimRight()


repeat()


padStart()、pad ...`,l:"ECMAScript/es6/字符串的常用方法.html#改",a:"改"},"6.6":{t:"trim()、trimLeft()、trimRight()",p:`删除前、后或前后所有空格符，再返回新的字符串
let stringValue = ' hello world '
let trimmedStringValue = stringValue.trim() ...`,l:"ECMAScript/es6/字符串的常用方法.html#trim-、trimleft-、trimright",a:"trim-、trimleft-、trimright"},"6.7":{t:"repeat()",p:`接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果
let stringValue = 'na '
let copyResult = stringValue.repeat(2)  ...`,l:"ECMAScript/es6/字符串的常用方法.html#repeat",a:"repeat"},"6.8":{t:"padStart() padEnd()",p:`复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件
没有第二个参数默认空格
let stringValue = 'foo'
console.log(stringValue.padSt ...`,l:"ECMAScript/es6/字符串的常用方法.html#padstart-padend",a:"padstart-padend"},"6.9":{t:"toLowerCase()、 toUpperCase()",p:`大小写转化
let stringValue = 'hello world'
console.log(stringValue.toUpperCase()) // &quot;HELLO WORLD&qu ...`,l:"ECMAScript/es6/字符串的常用方法.html#tolowercase-、-touppercase",a:"tolowercase-、-touppercase"},"6.10":{t:"查",p:"",l:"ECMAScript/es6/字符串的常用方法.html#查",a:"查"},"6.11":{t:"charAt()",p:`返回给定索引位置的字符，由传给方法的整数参数指定
let message = 'abcde'
console.log(message.charAt(2)) // &quot;c&quot;

`,l:"ECMAScript/es6/字符串的常用方法.html#charat",a:"charat"},"6.12":{t:"indexOf()",p:`从字符串开头去搜索传入的字符串，并返回位置（如果没找到，则返回 -1 ）
let stringValue = 'hello world'
console.log(stringValue.indexOf ...`,l:"ECMAScript/es6/字符串的常用方法.html#indexof",a:"indexof"},"6.13":{t:"startWith()、includes()",p:`从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值
let message = 'foobarbaz'
console.log(message.startsWith('foo')) // tr ...`,l:"ECMAScript/es6/字符串的常用方法.html#startwith-、includes",a:"startwith-、includes"},"6.14":{t:"at()",p:`at()方法接受一个整数作为参数，返回参数指定位置的字符，支持负索引（即倒数的位置）。
const str = 'hello'
str.at(1) // &quot;e&quot;
str.at(-1 ...`,l:"ECMAScript/es6/字符串的常用方法.html#at",a:"at"},"6.15":{t:"二、转换方法",p:"",l:"ECMAScript/es6/字符串的常用方法.html#二、转换方法",a:"二、转换方法"},"6.16":{t:"split()",p:`把字符串按照指定的分割符，拆分成数组中的每一项
let str = '12+23+34'
let arr = str.split('+') // [12,23,34]

`,l:"ECMAScript/es6/字符串的常用方法.html#split",a:"split"},"6.17":{t:"三、模板匹配方法",p:`针对正则表达式，字符串设计了几个方法：

match()
search()
replace()

`,l:"ECMAScript/es6/字符串的常用方法.html#三、模板匹配方法",a:"三、模板匹配方法"},"6.18":{t:"match()",p:`接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，返回数组
let text = 'cat, bat, sat, fat'
let pattern = /.at/
let mat ...`,l:"ECMAScript/es6/字符串的常用方法.html#match",a:"match"},"6.19":{t:"search()",p:`接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，找到则返回匹配索引，否则返回 -1
let text = 'cat, bat, sat, fat'
let pos = text ...`,l:"ECMAScript/es6/字符串的常用方法.html#search",a:"search"},"6.20":{t:"replace()",p:`接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素（可用函数）
let text = 'cat, bat, sat, fat'
let result = text.replace('at', ...`,l:"ECMAScript/es6/字符串的常用方法.html#replace",a:"replace"},"7.0":{t:"# ES6 字符串的扩展",p:"",l:"ECMAScript/es6/字符串的扩展.html",a:"es6-字符串的扩展"},"7.1":{t:"模板字符串",p:"ES6 引入了模板字符串（Template Strings），也被称为模板字面量，是一种方便拼接字符串的新语法。模板字符串使用反引号（`）来包裹字符串，并允许在字符串中插入变量、表达式和多行文本。\n",l:"ECMAScript/es6/字符串的扩展.html#模板字符串",a:"模板字符串"},"7.2":{t:"字符串插值",p:"使用${}来在模板字符串中插入变量或表达式，其中${}中的内容会被解析并替换为实际的值。\nconst name = 'John'\nconst age = 30\nconst message = `Hel ...",l:"ECMAScript/es6/字符串的扩展.html#字符串插值",a:"字符串插值"},"7.3":{t:"多行字符串",p:`使用模板字符串可以很方便地创建多行文本，不需要使用\\n来手动添加换行符。
const multiLineText = \`
  This is a multi-line text.
  It spans ...`,l:"ECMAScript/es6/字符串的扩展.html#多行字符串",a:"多行字符串"},"7.4":{t:"嵌套模板字符串",p:"模板字符串可以嵌套在其他模板字符串中，使得字符串拼接更加灵活。\nconst name = 'Alice'\nconst greeting = `Hello, ${`my name is ${name}` ...",l:"ECMAScript/es6/字符串的扩展.html#嵌套模板字符串",a:"嵌套模板字符串"},"7.5":{t:"带标签的模板字符串",p:`可以在模板字符串前添加一个标签函数，这个标签函数将模板字符串的各个部分解析成多个参数，使得我们可以对字符串进行自定义处理。
function tagFunc(strings, ...values) { ...`,l:"ECMAScript/es6/字符串的扩展.html#带标签的模板字符串",a:"带标签的模板字符串"},"8.0":{t:"# ES6 对象的扩展",p:"",l:"ECMAScript/es6/对象的扩展.html",a:"es6-对象的扩展"},"8.1":{t:"属性的简洁表示法",p:`ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。
const foo = 'bar'
const baz = { foo }
baz // {foo: &quo ...`,l:"ECMAScript/es6/对象的扩展.html#属性的简洁表示法",a:"属性的简洁表示法"},"8.2":{t:"方括号语法",p:"",l:"ECMAScript/es6/对象的扩展.html#方括号语法",a:"方括号语法"},"8.3":{t:"方括号语法的用法",p:`const prop = 'age'
const person = {}
person.prop = 18
console.log(person) // { prop: 18 }

// ------ ...`,l:"ECMAScript/es6/对象的扩展.html#方括号语法的用法",a:"方括号语法的用法"},"8.4":{t:"方括号中可以放什么",p:`// [值、可以得到值的表达式]
const prop = 'age'
const func = () =&gt; 'age2'
const person = {
  [prop]: 18,
  [f ...`,l:"ECMAScript/es6/对象的扩展.html#方括号中可以放什么",a:"方括号中可以放什么"},"8.5":{t:"方括号语法和点语法的区别",p:`
点语法是方括号语法的特殊形式
属性名由数字、字母、下划线以及 $ 构成，并且数字还不能打头的时候可以使用点语法（合法标识符）
能用点语法优先使用点语法

const person = {
    a ...`,l:"ECMAScript/es6/对象的扩展.html#方括号语法和点语法的区别",a:"方括号语法和点语法的区别"},"8.6":{t:"super 关键字",p:`我们知道，this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象。
const proto = {
  foo: 'hello'
}

cons ...`,l:"ECMAScript/es6/对象的扩展.html#super-关键字",a:"super-关键字"},"8.7":{t:"对象的展开运算符",p:"",l:"ECMAScript/es6/对象的扩展.html#对象的展开运算符",a:"对象的展开运算符"},"8.8":{t:"展开对象",p:`对象不能直接展开，必须在 {} 中展开。
const apple = {
  color: '红色',
  shape: '球形',
  taste: '甜'
}
console.log({ ...a ...`,l:"ECMAScript/es6/对象的扩展.html#展开对象",a:"展开对象"},"8.9":{t:"合并对象",p:`const apple = {
  color: '红色',
  shape: '球形',
  taste: '甜'
}

const pen = {
  color: '黑色',
  shape:  ...`,l:"ECMAScript/es6/对象的扩展.html#合并对象",a:"合并对象"},"8.10":{t:"注意事项",p:"",l:"ECMAScript/es6/对象的扩展.html#注意事项",a:"注意事项"},"8.11":{t:"空对象的展开",p:`如果展开一个空对象，则没有任何效果。
console.log({ ...{} }) // {}
console.log({ ...{}, a: 1 }) // { a: 1 }

`,l:"ECMAScript/es6/对象的扩展.html#空对象的展开",a:"空对象的展开"},"8.12":{t:"非对象的展开",p:`如果展开的不是对象，则会自动将其转为对象，再将其属性罗列出来（没有属性便为空）。
console.log({ ...1 }) // {}
console.log(new Object(1)) // [ ...`,l:"ECMAScript/es6/对象的扩展.html#非对象的展开",a:"非对象的展开"},"8.13":{t:"字符串的展开",p:`如果展开运算符后面是字符串，它会自动转成一个类似数组的对象，因此返回的不是空对象。
// 字符串在对象中展开
console.log({ ...'alex' }) // { '0': 'a', '1' ...`,l:"ECMAScript/es6/对象的扩展.html#字符串的展开",a:"字符串的展开"},"8.14":{t:"数组的展开",p:`console.log({ ...[1, 2, 3] }) // { '0': 1, '1': 2, '2': 3 }

`,l:"ECMAScript/es6/对象的扩展.html#数组的展开",a:"数组的展开"},"8.15":{t:"对象中对象属性的展开",p:`不会展开对象中的对象属性。
const apple = {
  feature: {
    taste: '甜'
  }
}

const pen = {
  feature: {
    colo ...`,l:"ECMAScript/es6/对象的扩展.html#对象中对象属性的展开",a:"对象中对象属性的展开"},"8.16":{t:"对象展开运算符的应用",p:"",l:"ECMAScript/es6/对象的扩展.html#对象展开运算符的应用",a:"对象展开运算符的应用"},"8.17":{t:"复制对象",p:`const a = { x: 1, y: 2 }
const c = { ...a }
console.log(c, c === a)
// { x: 1, y: 2 } false

`,l:"ECMAScript/es6/对象的扩展.html#复制对象",a:"复制对象"},"8.18":{t:"用户参数和默认参数",p:`const logUser = (userParam) =&gt; {
  const defaultPeram = {
    username: 'ZhangSan',
    age: 0,
  ...`,l:"ECMAScript/es6/对象的扩展.html#用户参数和默认参数",a:"用户参数和默认参数"},"8.19":{t:"对象的新增方法",p:"",l:"ECMAScript/es6/对象的扩展.html#对象的新增方法",a:"对象的新增方法"},"8.20":{t:"Object.is()",p:"ES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。JavaScript 缺乏一种 ...",l:"ECMAScript/es6/对象的扩展.html#object-is",a:"object-is"},"8.21":{t:"Object.assign()",p:`Object.assign()方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。
const target = { a: 1 }

const source ...`,l:"ECMAScript/es6/对象的扩展.html#object-assign",a:"object-assign"},"8.22":{t:"Object.keys()、Object.values() 和 Object.entries()",p:`Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。
Object.values方法返回一个数组，成员是参数对象自身的（不含继承的 ...`,l:"ECMAScript/es6/对象的扩展.html#object-keys-、object-values-和-object-entries",a:"object-keys-、object-values-和-object-entries"},"9.0":{t:"# ES6 Array 数组新增方法",p:"",l:"ECMAScript/es6/数组的扩展.html",a:"es6-array-数组新增方法"},"9.1":{t:"Array.of()",p:`将参数中所有值作为元素形成数组。
没有参数则返回空数组
Array.of(1, '2', true) // [1, '2', true]

`,l:"ECMAScript/es6/数组的扩展.html#array-of",a:"array-of"},"9.2":{t:"Array.from()",p:`将类数组对象或可迭代对象转化为数组。
Array.from([1, 2]) // [1, 2]
Array.from([1, , 3]) // [1, undefined, 3]

`,l:"ECMAScript/es6/数组的扩展.html#array-from",a:"array-from"},"9.3":{t:"转换类数组",p:`let arr = Array.from({
  0: '1',
  1: '2',
  2: 3,
  length: 3 // 必须有length属性，没有则返回空数组
})
// ['1', ' ...`,l:"ECMAScript/es6/数组的扩展.html#转换类数组",a:"转换类数组"},"9.4":{t:"转换 map",p:`let map = new Map()
map.set('key0', 'value0')
map.set('key1', 'value1')
Array.from(map) // [['key0', ...`,l:"ECMAScript/es6/数组的扩展.html#转换-map",a:"转换-map"},"9.5":{t:"转换 set",p:`let set = new Set([1, 2, 3])
Array.from(set) // [1, 2, 3]

`,l:"ECMAScript/es6/数组的扩展.html#转换-set",a:"转换-set"},"9.6":{t:"转换字符串",p:`Array.from('abc') // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]

`,l:"ECMAScript/es6/数组的扩展.html#转换字符串",a:"转换字符串"},"9.7":{t:"方法",p:"",l:"ECMAScript/es6/数组的扩展.html#方法",a:"方法"},"9.8":{t:"find()查找",p:`则返回符合条件的第一个元素。
let arr = Array.of(1, 2, 3, 4)
arr.find((item) =&gt; item &gt; 2) // 3

`,l:"ECMAScript/es6/数组的扩展.html#find-查找",a:"find-查找"},"9.9":{t:"findIndex() 查找索引",p:`则返回符合条件的第一个元素的索引。
let arr = Array.of(1, 2, 1, 3)
// 参数1：回调函数
// 参数2(可选)：指定回调函数中的 this 值
arr.findInde ...`,l:"ECMAScript/es6/数组的扩展.html#findindex-查找索引",a:"findindex-查找索引"},"9.10":{t:"fill()填充",p:`let arr = Array.of(1, 2, 3, 4)
// 参数1：用来填充的值
// 参数2：被填充的起始索引
// 参数3(可选)：被填充的结束索引，默认为数组末尾
console.log ...`,l:"ECMAScript/es6/数组的扩展.html#fill-填充",a:"fill-填充"},"9.11":{t:"copyWithin() 覆盖",p:`
开始覆盖的位置索引
复制起始位置
（可选）复制结束位置，默认为结尾

var arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
arr.copyWithin(2,  ...`,l:"ECMAScript/es6/数组的扩展.html#copywithin-覆盖",a:"copywithin-覆盖"},"9.12":{t:"entries() 遍历",p:`// 遍历键值对。
for (let [key, value] of ['a', 'b'].entries()) {
  console.log(key, value)
}
// 0 &quot;a& ...`,l:"ECMAScript/es6/数组的扩展.html#entries-遍历",a:"entries-遍历"},"9.13":{t:"keys()遍历键名",p:`for (let key of ['a', 'b'].keys()) {
  console.log(key)
}
// 0
// 1

`,l:"ECMAScript/es6/数组的扩展.html#keys-遍历键名",a:"keys-遍历键名"},"9.14":{t:"values()遍历键值",p:`for (let value of ['a', 'b'].values()) {
  console.log(value)
}
// &quot;a&quot;
// &quot;b&quot;

`,l:"ECMAScript/es6/数组的扩展.html#values-遍历键值",a:"values-遍历键值"},"9.15":{t:"includes()查找",p:`数组是否包含指定值
Set 的 has 方法用于查找值，Map 的 has 方法用于查找键名。
// 参数1：包含的指定值
;[1, 2, 3].includes(1) // true
// 参数2： ...`,l:"ECMAScript/es6/数组的扩展.html#includes-查找",a:"includes-查找"},"9.16":{t:"flat()嵌套数组转一维数",p:`console.log([1, [2, 3]].flat()) // [1, 2, 3]

// 指定转换的嵌套层数
console.log([1, [2, [3, [4, 5]]]].flat(2) ...`,l:"ECMAScript/es6/数组的扩展.html#flat-嵌套数组转一维数",a:"flat-嵌套数组转一维数"},"9.17":{t:"flatMap()",p:`先遍历元素，再对数组执行 flat() 方法。
// 参数1：遍历函数，遍历函数可接受3个参数：当前元素、当前元素索引、原数组
// 参数2：指定遍历函数中 this 的指向
console.log( ...`,l:"ECMAScript/es6/数组的扩展.html#flatmap",a:"flatmap"},"10.0":{t:"# 解构赋值",p:`ES6 引入了解构赋值（Destructuring Assignment），是一种从数组或对象中提取值并赋给变量的语法，使得在处理数据时更加方便和简洁。
当使用解构赋值时，我们可以从数组或对象中提取数 ...`,l:"ECMAScript/es6/解构赋值.html",a:"解构赋值"},"10.1":{t:"数组解构赋值",p:`数组解构赋值允许我们根据数组的顺序，将数组的元素提取出来并赋值给变量。
`,l:"ECMAScript/es6/解构赋值.html#数组解构赋值",a:"数组解构赋值"},"10.2":{t:"基本用法",p:`const numbers = [1, 2, 3, 4, 5]

const [a, b, c, d, e] = numbers

console.log(a) // 1
console.log(b) ...`,l:"ECMAScript/es6/解构赋值.html#基本用法",a:"基本用法"},"10.3":{t:"忽略不需要的元素",p:`我们可以使用逗号将不需要的元素跳过。
const numbers = [1, 2, 3, 4, 5]

const [a, , c, , e] = numbers

console.log(a) // ...`,l:"ECMAScript/es6/解构赋值.html#忽略不需要的元素",a:"忽略不需要的元素"},"10.4":{t:"给变量指定默认值",p:`如果数组元素不足以匹配变量的个数，可以为变量指定默认值，避免出现undefined。
const numbers = [1, 2]

const [a, b, c = 3] = numbers

co ...`,l:"ECMAScript/es6/解构赋值.html#给变量指定默认值",a:"给变量指定默认值"},"10.5":{t:"剩余元素",p:`使用...语法可以将剩余的数组元素赋值给一个新数组。
const numbers = [1, 2, 3, 4, 5]

const [a, b, ...rest] = numbers

console ...`,l:"ECMAScript/es6/解构赋值.html#剩余元素",a:"剩余元素"},"10.6":{t:"交换变量的值",p:`使用解构赋值，可以非常简洁地交换两个变量的值，无需使用第三个变量。
let x = 10
let y = 20

;[x, y] = [y, x]  // 前面必须要加分号

console.log( ...`,l:"ECMAScript/es6/解构赋值.html#交换变量的值",a:"交换变量的值"},"10.7":{t:"对象解构赋值",p:`对象解构赋值允许我们根据对象的属性名，将对象的属性值提取出来并赋值给变量。
`,l:"ECMAScript/es6/解构赋值.html#对象解构赋值",a:"对象解构赋值"},"10.8":{t:"基本用法",p:`const person = {
  name: 'John',
  age: 30,
  country: 'USA'
}

const { name, age, country } = perso ...`,l:"ECMAScript/es6/解构赋值.html#基本用法",a:"基本用法"},"10.9":{t:"重命名变量",p:`我们可以通过在解构时为变量指定新的名称，来实现重命名。
const person = {
  fullName: 'John Doe',
  yearsOld: 30
}

const { fullN ...`,l:"ECMAScript/es6/解构赋值.html#重命名变量",a:"重命名变量"},"10.10":{t:"给变量指定默认值",p:`和数组解构一样，可以为对象解构赋值时，为变量指定默认值。
const person = {
  name: 'Alice',
  age: 25
}

const { name, age, count ...`,l:"ECMAScript/es6/解构赋值.html#给变量指定默认值",a:"给变量指定默认值"},"10.11":{t:"嵌套解构",p:`对象解构也支持嵌套解构，从嵌套对象中提取值。
const person = {
  name: 'Bob',
  age: 28,
  address: {
    city: 'New York', ...`,l:"ECMAScript/es6/解构赋值.html#嵌套解构",a:"嵌套解构"},"11.0":{t:"# BOM document 对象",p:`Document 对象代表当前窗口或标签页中加载的文档。它提供了对文档内容进行访问和操作的方法和属性。
`,l:"JavaScript/BOM/document.html",a:"bom-document-对象"},"11.1":{t:"常见操作",p:`
获取元素：可以使用document.getElementById(id)获取具有指定 id 的元素。
修改文档结构：可以使用document.createElement(tagName)创建新元素， ...`,l:"JavaScript/BOM/document.html#常见操作",a:"常见操作"},"11.2":{t:"示例",p:`// 获取具有id为&quot;myElement&quot;的元素
var element = document.getElementById('myElement')

// 创建一个新的段落元素 ...`,l:"JavaScript/BOM/document.html#示例",a:"示例"},"12.0":{t:"# BOM history 对象",p:`History 对象提供了对浏览器历史记录的操作。可以使用它向前或向后导航，加载历史记录中的不同页面。
`,l:"JavaScript/BOM/history.html",a:"bom-history-对象"},"12.1":{t:"常见方法",p:`
history.back()：导航到上一个页面。
history.forward()：导航到下一个页面。
history.go(delta)：导航到相对于当前页面的偏移量为delta的页面。

`,l:"JavaScript/BOM/history.html#常见方法",a:"常见方法"},"12.2":{t:"示例",p:`// 导航到上一个页面
history.back()

// 导航到下一个页面
history.forward()

// 导航到相对于当前页面的偏移量为2的页面
history.go(2)

`,l:"JavaScript/BOM/history.html#示例",a:"示例"},"13.0":{t:"# JavaScript BOM",p:`BOM（Browser Object Model）是 JavaScript 中用于与浏览器交互的一组对象和方法集合。它提供了访问和控制浏览器窗口及其内容的功能。以下是一些常见的 BOM 对象：


w ...`,l:"JavaScript/BOM/index.html",a:"javascript-bom"},"14.0":{t:"# BOM location 对象",p:`Location 对象提供了与当前窗口的 URL 相关的信息和操作。它包含了 URL 的各个部分，如协议、主机名、路径和查询参数等。
`,l:"JavaScript/BOM/location.html",a:"bom-location-对象"},"14.1":{t:"常见属性和方法",p:`
location.href：当前窗口的完整 URL。
location.protocol：URL 的协议部分。
location.hostname：URL 的主机名部分。
location.path ...`,l:"JavaScript/BOM/location.html#常见属性和方法",a:"常见属性和方法"},"14.2":{t:"示例",p:`// 获取当前窗口的URL
console.log(location.href)

// 获取URL的协议
console.log(location.protocol)

// 将页面重定向到新的UR ...`,l:"JavaScript/BOM/location.html#示例",a:"示例"},"15.0":{t:"# BOM navigator 对象",p:`Navigator 对象提供了关于浏览器的信息，如浏览器的名称、版本、用户代理字符串等。它还可以用于检测浏览器的功能和特性。
`,l:"JavaScript/BOM/navigator.html",a:"bom-navigator-对象"},"15.1":{t:"常见属性",p:`
navigator.userAgent：包含用户代理字符串，用于识别浏览器和操作系统。
navigator.appName：浏览器的名称。
navigator.appVersion：浏览器的版本。
 ...`,l:"JavaScript/BOM/navigator.html#常见属性",a:"常见属性"},"15.2":{t:"示例",p:`// 获取用户代理字符串
console.log(navigator.userAgent)

// 获取浏览器的名称
console.log(navigator.appName)

// 获取浏览器的 ...`,l:"JavaScript/BOM/navigator.html#示例",a:"示例"},"16.0":{t:"# BOM screen 对象",p:`Screen 对象提供了关于用户屏幕的信息，如屏幕的尺寸、分辨率等。可以使用它来调整页面在不同屏幕上的显示。
`,l:"JavaScript/BOM/screen.html",a:"bom-screen-对象"},"16.1":{t:"常见属性",p:`
screen.width：屏幕的宽度。
screen.height：屏幕的高度。
screen.availWidth：屏幕的可用宽度，不包括系统任务栏或工具栏。
screen.availHeight ...`,l:"JavaScript/BOM/screen.html#常见属性",a:"常见属性"},"16.2":{t:"示例",p:`// 获取屏幕的宽度
console.log('屏幕宽度：' + screen.width + ' 像素')

// 获取屏幕的高度
console.log('屏幕高度：' + screen.heig ...`,l:"JavaScript/BOM/screen.html#示例",a:"示例"},"17.0":{t:"# BOM window 对象",p:`Window 对象是 BOM 的顶级对象，表示浏览器窗口或标签页。它提供了操作浏览器窗口的方法和属性，以及与窗口内容交互的功能。
`,l:"JavaScript/BOM/window.html",a:"bom-window-对象"},"17.1":{t:"常见属性和方法",p:`
window.open(url, name, specs)：打开一个新的浏览器窗口或标签页。
window.close()：关闭当前窗口。
window.resizeTo(width, height ...`,l:"JavaScript/BOM/window.html#常见属性和方法",a:"常见属性和方法"},"17.2":{t:"示例",p:`// 打开一个新窗口
window.open('https://www.example.com', '_blank')

// 关闭当前窗口
window.close()

// 调整窗口大小
win ...`,l:"JavaScript/BOM/window.html#示例",a:"示例"},"18.0":{t:"# DOM 节点",p:"",l:"JavaScript/DOM/DOM节点.html",a:"dom-节点"},"18.1":{t:"插入节点",p:`在已有的 DOM 节点中插入新的 DOM 节点时，需要关注两个关键因素：首先要得到新的 DOM 节点，其次在哪个位置插入这个节点。


createElement 动态创建任意 DOM 节点


cl ...`,l:"JavaScript/DOM/DOM节点.html#插入节点",a:"插入节点"},"18.2":{t:"删除节点",p:`删除现有的 DOM 节点，也需要关注两个因素：首先由父节点删除子节点，其次是要删除哪个子节点。
removeChild 删除节点时一定是由父子关系。
&lt;body&gt;
  &lt;!-- 点击 ...`,l:"JavaScript/DOM/DOM节点.html#删除节点",a:"删除节点"},"18.3":{t:"查找节点",p:`DOM 树中的任意节点都不是孤立存在的，它们要么是父子关系，要么是兄弟关系，不仅如此，我们可以依据节点之间的关系查找节点。
`,l:"JavaScript/DOM/DOM节点.html#查找节点",a:"查找节点"},"18.4":{t:"父子关系",p:`
childNodes 获取全部的子节点，回车换行会被认为是空白文本节点
children 只获取元素类型节点

&lt;body&gt;
  &lt;button class=&quot;btn1& ...`,l:"JavaScript/DOM/DOM节点.html#父子关系",a:"父子关系"},"18.5":{t:"兄弟关系",p:`
previousSibling 获取前一个节点，以相对位置查找节点，实际应用中非常灵活。
nextSibling 获取后一个节点，以相对位置查找节点，实际应用中非常灵活。

&lt;body&gt; ...`,l:"JavaScript/DOM/DOM节点.html#兄弟关系",a:"兄弟关系"},"19.0":{t:"# JavaScript DOM",p:"",l:"JavaScript/DOM/index.html",a:"javascript-dom"},"19.1":{t:"概念",p:"DOM（Document Object Model）是一种用于表示和操作 HTML、XML 等文档结构的编程接口。它将文档表示为一个树状结构，每个节点都是文档中的一个元素、属性、文本或其他类型的内容。 ...",l:"JavaScript/DOM/index.html#概念",a:"概念"},"19.2":{t:"DOM 树",p:`&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF ...`,l:"JavaScript/DOM/index.html#dom-树",a:"dom-树"},"19.3":{t:"DOM 节点",p:`节点是文档树的组成部分，每一个节点都是一个 DOM 对象，主要分为元素节点、属性节点、文本节点等。

【元素节点】其实就是 HTML 标签，如上图中 head、div、body 等都属于元素节点。
【 ...`,l:"JavaScript/DOM/index.html#dom-节点",a:"dom-节点"},"19.4":{t:"document",p:`document 是 JavaScript 内置的专门用于 DOM 的对象，该对象包含了若干的属性和方法，document 是学习 DOM 的核心。


::: tip
DOM 提供了丰富的功能和方法 ...`,l:"JavaScript/DOM/index.html#document",a:"document"},"20.0":{t:"# DOM 事件处理",p:`DOM 事件处理是 JavaScript 中常用的一项功能，它允许你监听和响应用户与网页元素之间的交互。下面是一些常见的方法和技巧来处理 DOM 事件：
`,l:"JavaScript/DOM/事件处理.html",a:"dom-事件处理"},"20.1":{t:"事件",p:`事件是编程语言中的术语，它是用来描述程序的行为或状态的，一旦行为或状态发生改变，便立即调用一个函数。
例如：用户使用【鼠标点击】网页中的一个按钮、用户使用【鼠标拖拽】网页中的一张图片
`,l:"JavaScript/DOM/事件处理.html#事件",a:"事件"},"20.2":{t:"事件监听",p:`::: tip
结合 DOM 使用事件时，需要为 DOM 对象添加事件监听，等待事件发生（触发）时，便立即调用一个函数。
addEventListener 是 DOM 对象专门用来添加事件监听的方法， ...`,l:"JavaScript/DOM/事件处理.html#事件监听",a:"事件监听"},"20.3":{t:"事件移除",p:`当我们不再需要一个事件监听器时，应该将其从元素上移除，以避免不必要的事件处理。可以使用以下方法来移除事件监听器：
element.removeEventListener('eventName', ev ...`,l:"JavaScript/DOM/事件处理.html#事件移除",a:"事件移除"},"20.4":{t:"事件类型",p:"",l:"JavaScript/DOM/事件处理.html#事件类型",a:"事件类型"},"20.5":{t:"鼠标事件",p:`鼠标事件是指跟鼠标操作相关的事件，如单击、双击、移动等。



事件名
作用




click
当用户点击鼠标左键时触发。


dblclick
当用户双击鼠标左键时触发。


mousedown
 ...`,l:"JavaScript/DOM/事件处理.html#鼠标事件",a:"鼠标事件"},"20.6":{t:"键盘事件",p:`const input = document.querySelector('input')
// 1. 键盘事件
// input.addEventListener('keydown', functi ...`,l:"JavaScript/DOM/事件处理.html#键盘事件",a:"键盘事件"},"20.7":{t:"焦点事件",p:`const input = document.querySelector('input')
input.addEventListener('focus', function () {
  consol ...`,l:"JavaScript/DOM/事件处理.html#焦点事件",a:"焦点事件"},"20.8":{t:"文本框输入事件",p:`
input 事件：当用户在文本框中输入、删除或修改文本时触发。无论是键盘输入、粘贴、剪切还是使用其他输入方法，只要文本框内容发生变化，就会触发 input 事件。
change 事件：当文本框内容发 ...`,l:"JavaScript/DOM/事件处理.html#文本框输入事件",a:"文本框输入事件"},"20.9":{t:"事件对象",p:`
事件处理程序的第一个参数是事件对象 event，它包含有关事件的信息，例如事件类型、目标元素等。你可以在事件处理程序中使用这些信息来执行逻辑操作。

const btn = document.que ...`,l:"JavaScript/DOM/事件处理.html#事件对象",a:"事件对象"},"20.10":{t:"事件冒泡和事件捕获",p:`
事件冒泡：默认情况下，事件会从触发它的元素向上冒泡到祖先元素。你可以使用 event.stopPropagation() 方法来停止事件冒泡。

&lt;body&gt;
  &lt;h3&gt;事 ...`,l:"JavaScript/DOM/事件处理.html#事件冒泡和事件捕获",a:"事件冒泡和事件捕获"},"20.11":{t:"常见事件类型",p:`以下是一些常见的 DOM 事件类型：


鼠标事件：click、mouseover、mouseout、mousemove 等。


键盘事件：keyup、keydown、keypress 等。


表 ...`,l:"JavaScript/DOM/事件处理.html#常见事件类型",a:"常见事件类型"},"20.12":{t:"事件委托",p:"JavaScript 事件委托是一种利用事件冒泡原理来简化事件处理的技术。通过将事件监听器绑定到一个父元素上，然后利用事件冒泡机制，从父元素中捕获和处理子元素触发的事件。这样可以减少事件处理程序的数量 ...",l:"JavaScript/DOM/事件处理.html#事件委托",a:"事件委托"},"21.0":{t:"# DOM 创建和操作元素",p:`
createElement(): 创建新的元素节点。
appendChild(): 将一个节点添加为另一个节点的子节点。
removeChild(): 删除指定的子节点。
setAttribute( ...`,l:"JavaScript/DOM/创建和操作元素.html",a:"dom-创建和操作元素"},"21.1":{t:"创建元素",p:`使用 createElement 方法创建新元素：
const newElement = document.createElement('tagName')

其中 tagName 是你想要创建的元素 ...`,l:"JavaScript/DOM/创建和操作元素.html#创建元素",a:"创建元素"},"21.2":{t:"设置元素属性和内容",p:`设置元素的属性：使用 setAttribute 方法：
element.setAttribute('attributeName', 'attributeValue')

设置元素的文本内容：使用 te ...`,l:"JavaScript/DOM/创建和操作元素.html#设置元素属性和内容",a:"设置元素属性和内容"},"21.3":{t:"操作元素的父子关系",p:`将新元素添加到父元素中：使用 appendChild 方法：
parentElement.appendChild(newElement)

这将把 newElement 添加为 parentEleme ...`,l:"JavaScript/DOM/创建和操作元素.html#操作元素的父子关系",a:"操作元素的父子关系"},"22.0":{t:"# DOM 样式和类操作",p:`在 JavaScript 中，可以使用 DOM（文档对象模型）来操作元素的样式和类。以下是一些常用的方法和技巧：
`,l:"JavaScript/DOM/样式和类操作.html",a:"dom-样式和类操作"},"22.1":{t:"样式操作",p:`

修改元素的内联样式：使用 style 对象来访问和修改元素的样式属性。
element.style.backgroundColor = 'red'

这里的 backgroundColor 是你要 ...`,l:"JavaScript/DOM/样式和类操作.html#样式操作",a:"样式操作"},"22.2":{t:"类操作",p:`

添加类名：使用 classList 属性的 add 方法。
element.classList.add('className')



移除类名：使用 classList 属性的 remove 方 ...`,l:"JavaScript/DOM/样式和类操作.html#类操作",a:"类操作"},"23.0":{t:"# DOM 获取和修改元素",p:`
getElementById(): 根据元素的 ID 获取元素节点。
getElementsByClassName(): 根据类名获取元素节点集合。
getElementsByTagName():  ...`,l:"JavaScript/DOM/获取和修改元素.html",a:"dom-获取和修改元素"},"23.1":{t:"获取元素",p:`通过 ID 获取元素：使用 getElementById 方法，传入元素的 ID。
const element = document.getElementById('elementId')

通过类名 ...`,l:"JavaScript/DOM/获取和修改元素.html#获取元素",a:"获取元素"},"23.2":{t:"修改元素",p:`修改元素的文本内容：使用 textContent 属性或 innerText 属性。
element.textContent = 'New content'

// 或者
element.innerT ...`,l:"JavaScript/DOM/获取和修改元素.html#修改元素",a:"修改元素"},"24.0":{t:"# JavaScript 数组",p:`数组：(Array)是一种可以按顺序保存数据的数据类型
使用场景：如果有多个数据可以用数组保存起来，然后放到一个变量中，管理非常方便

数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。

`,l:"JavaScript/base/array.html",a:"javascript-数组"},"24.1":{t:"创建",p:`创建数组有两种方式

利用 new 创建数组
利用数组字面量创建数组

数组的字面量是方括号 [ ]
声明数组并赋值称为数组的初始化
这种字面量方式也是最多的使用方式



// 利用new 创建数组 ...`,l:"JavaScript/base/array.html#创建",a:"创建"},"24.2":{t:"获取数组元素",p:`数组的长度
使用数组名.length可以访问数组元素的数量（数组长度）
数组的索引
索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。

数组可以通过索引来访问、设置、修改对应的数组元 ...`,l:"JavaScript/base/array.html#获取数组元素",a:"获取数组元素"},"24.3":{t:" ",p:"",l:"JavaScript/base/array.html#",a:""},"24.4":{t:"数组方法 -->",p:"",l:"JavaScript/base/array.html#数组方法",a:"数组方法"},"24.5":{t:"一、操作方法",p:`数组基本操作可以归纳为 增、删、改、查，需要留意的是哪些方法会对原数组产生影响，哪些方法不会
下面对数组常用的操作方法做一个归纳
`,l:"JavaScript/base/array.html#一、操作方法",a:"一、操作方法"},"24.6":{t:"增",p:`下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响

push()
unshift()
splice()
concat()

`,l:"JavaScript/base/array.html#增",a:"增"},"24.7":{t:"push()",p:`push()方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度
let colors = [] // 创建一个数组
let count = colors.push('red', 'bl ...`,l:"JavaScript/base/array.html#push",a:"push"},"24.8":{t:"unshift()",p:`unshift()在数组开头添加任意多个值，然后返回新的数组长度
let colors = new Array() // 创建一个数组
let count = colors.unshift('red' ...`,l:"JavaScript/base/array.html#unshift",a:"unshift"},"24.9":{t:"splice()",p:`传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组
let colors = ['red', 'green', 'blue']
let removed = colors.sp ...`,l:"JavaScript/base/array.html#splice",a:"splice"},"24.10":{t:"concat()",p:`首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组
let colors = ['red', 'green', 'blue']
let color ...`,l:"JavaScript/base/array.html#concat",a:"concat"},"24.11":{t:"删",p:`下面三种都会影响原数组，最后一项不影响原数组：

pop()
shift()
splice()
slice()

`,l:"JavaScript/base/array.html#删",a:"删"},"24.12":{t:"pop()",p:`pop() 方法用于删除数组的最后一项，同时减少数组的 length 值，返回被删除的项
let colors = ['red', 'green']
let item = colors.pop() / ...`,l:"JavaScript/base/array.html#pop",a:"pop"},"24.13":{t:"shift()",p:`shift()方法用于删除数组的第一项，同时减少数组的 length 值，返回被删除的项
let colors = ['red', 'green']
let item = colors.shift() ...`,l:"JavaScript/base/array.html#shift",a:"shift"},"24.14":{t:"splice()",p:`传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组
let colors = ['red', 'green', 'blue']
let removed = colors.splice ...`,l:"JavaScript/base/array.html#splice",a:"splice"},"24.15":{t:"slice()",p:`slice() 用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组
let colors = ['red', 'green', 'blue', 'yellow', 'purple']
 ...`,l:"JavaScript/base/array.html#slice",a:"slice"},"24.16":{t:"改",p:`即修改原来数组的内容，常用splice
`,l:"JavaScript/base/array.html#改",a:"改"},"24.17":{t:"splice()",p:`传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响
let colors = ['red', 'green', 'blue']
let remo ...`,l:"JavaScript/base/array.html#splice",a:"splice"},"24.18":{t:"查",p:`即查找元素，返回元素坐标或者元素值

indexOf()
includes()
find()

`,l:"JavaScript/base/array.html#查",a:"查"},"24.19":{t:"indexOf()",p:`返回要查找的元素在数组中的位置，如果没找到则返回 -1
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
numbers.indexOf(4) // 3

`,l:"JavaScript/base/array.html#indexof",a:"indexof"},"24.20":{t:"includes()",p:`返回要查找的元素在数组中的位置，找到返回true，否则false
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
numbers.includes(4) // tr ...`,l:"JavaScript/base/array.html#includes",a:"includes"},"24.21":{t:"find()",p:`返回第一个匹配的元素
const people = [
  {
    name: 'Matt',
    age: 27
  },
  {
    name: 'Nicholas',
    age ...`,l:"JavaScript/base/array.html#find",a:"find"},"24.22":{t:"二、排序方法",p:`数组有两个方法可以用来对元素重新排序：

reverse()
sort()

`,l:"JavaScript/base/array.html#二、排序方法",a:"二、排序方法"},"24.23":{t:"reverse()",p:`顾名思义，将数组元素方向反转
let values = [1, 2, 3, 4, 5]
values.reverse()
console.log(values) // 5,4,3,2,1

`,l:"JavaScript/base/array.html#reverse",a:"reverse"},"24.24":{t:"sort()",p:`sort()方法接受一个比较函数，用于判断哪个值应该排在前面
function compare(value1, value2) {
  if (value1 &lt; value2) {
    re ...`,l:"JavaScript/base/array.html#sort",a:"sort"},"24.25":{t:"三、转换方法",p:`常见的转换方法有：
`,l:"JavaScript/base/array.html#三、转换方法",a:"三、转换方法"},"24.26":{t:"join()",p:`join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串
let colors = ['red', 'green', 'blue']
console.log(colors.join(', ...`,l:"JavaScript/base/array.html#join",a:"join"},"24.27":{t:"四、迭代方法",p:`常用来迭代数组的方法（都不改变原数组）有如下：

some()
every()
forEach()
filter()
map()

`,l:"JavaScript/base/array.html#四、迭代方法",a:"四、迭代方法"},"24.28":{t:"some()",p:`对数组每一项都运行传入的测试函数，如果至少有 1 个元素返回 true ，则这个方法返回 true
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
let some ...`,l:"JavaScript/base/array.html#some",a:"some"},"24.29":{t:"every()",p:`对数组每一项都运行传入的测试函数，如果所有元素都返回 true ，则这个方法返回 true
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
let everyRes ...`,l:"JavaScript/base/array.html#every",a:"every"},"24.30":{t:"forEach()",p:`对数组每一项都运行传入的函数，没有返回值
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
numbers.forEach((item, index, array)  ...`,l:"JavaScript/base/array.html#foreach",a:"foreach"},"24.31":{t:"filter()",p:`对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
let filterResult = nu ...`,l:"JavaScript/base/array.html#filter",a:"filter"},"24.32":{t:"map()",p:`对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
let mapResult = numbers.m ...`,l:"JavaScript/base/array.html#map",a:"map"},"25.0":{t:"# JavaScript 流程控制",p:"",l:"JavaScript/base/flow.html",a:"javascript-流程控制"},"25.1":{t:"if 语句",p:`流程控制语句可以用来改变程序执行的顺序

条件判断语句
条件分支语句
循环语句

if (i &gt; 1) {
  alert('yes')
} else {
  alert('no')
}

// ...`,l:"JavaScript/base/flow.html#if-语句",a:"if-语句"},"25.2":{t:"if-else",p:`if-else 语句：

语法：

if(条件表达式){
  语句...
}else if(条件表达式1){
  语句...
}else if(条件表达式2){
  语句...
}else{
  语句 ...`,l:"JavaScript/base/flow.html#if-else",a:"if-else"},"25.3":{t:"switch 语句",p:`switch 语句 - 语法：

switch(表达式){
    case 表达式1:
        代码...
        break
    case 表达式2:
        代码.. ...`,l:"JavaScript/base/flow.html#switch-语句",a:"switch-语句"},"25.4":{t:"循环语句",p:`

通过循环语句可以使指定的代码反复执行


JS 中一共有三种循环语句

while 语句
do-while 语句
for 语句 - while 语句 - 语法：



`,l:"JavaScript/base/flow.html#循环语句",a:"循环语句"},"25.5":{t:"while",p:`// while(条件表达式){
//     语句...
// }
var i = 0
while (i &lt; 10) {
  i += 2
}

::: tip while 执行流程：
whi ...`,l:"JavaScript/base/flow.html#while",a:"while"},"25.6":{t:"do-while",p:`let i = 10
do {
  console.log(i)
  i++
} while (i &lt; 5)

::: tip do-while 执行顺序
do-while 语句在执行时，会先执 ...`,l:"JavaScript/base/flow.html#do-while",a:"do-while"},"25.7":{t:"for",p:"",l:"JavaScript/base/flow.html#for",a:"for"},"25.8":{t:"`for` 循环",p:`for (let i = 0; i &lt; 5; i++) {
  console.log(i)
}

`,l:"JavaScript/base/flow.html#for-循环",a:"for-循环"},"25.9":{t:"`for in` 循环",p:`
用于迭代对象的属性，通常是迭代对象的键（属性名）。
适用于对象（包括数组和其他可枚举属性的对象），不适用于迭代数组元素的值。
迭代的顺序不一定是按照属性在对象中的顺序，可能会有不可预测的结果。
通常 ...`,l:"JavaScript/base/flow.html#for-in-循环",a:"for-in-循环"},"25.10":{t:"` for of` 循环",p:`
用于迭代可迭代对象的值，例如数组、字符串、Map、Set 等。
迭代的顺序是按照对象的迭代协议定义的顺序，通常是按照对象中元素的顺序。
不会迭代对象的属性，只迭代值。

语法：
for (变量 of ...`,l:"JavaScript/base/flow.html#for-of-循环",a:"for-of-循环"},"25.11":{t:"for-in 和 for-of 的区别",p:`for-in 循环和 for-of 循环虽然都是用于迭代对象的方法，但它们有一些不同之处。

迭代对象的内容不同

for-in 循环迭代对象的是键名，而 for-of 循环迭代对象的是值。因此，fo ...`,l:"JavaScript/base/flow.html#for-in-和-for-of-的区别",a:"for-in-和-for-of-的区别"},"25.12":{t:"break 和 continue",p:`

break

break 用来终止 switch 和循环语句
break 执行后，当前的 switch 或循环会立刻停止
break 会终止离他最近的循环



for (let i = 0; i ...`,l:"JavaScript/base/flow.html#break-和-continue",a:"break-和-continue"},"26.0":{t:"# JavaScript 函数",p:`
在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。
虽然 for 循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数 ...`,l:"JavaScript/base/function.html",a:"javascript-函数"},"26.1":{t:"函数的使用",p:"",l:"JavaScript/base/function.html#函数的使用",a:"函数的使用"},"26.2":{t:"声明函数",p:`function是声明函数的关键字，必须小写
// 声明定义方式
function 函数名() {
    // 函数体代码
}

// 这是函数表达式写法，匿名函数后面跟分号结束
var 变量名 = ...`,l:"JavaScript/base/function.html#声明函数",a:"声明函数"},"26.3":{t:"调用函数",p:`函数名();
// 函数使用分为两步： 声明函数 和 调用函数
// 1. 声明函数
// function 函数名() {
//     // 函数体
// }
function sayHi() { ...`,l:"JavaScript/base/function.html#调用函数",a:"调用函数"},"26.4":{t:"函数的封装",p:`函数的封装：是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口。
`,l:"JavaScript/base/function.html#函数的封装",a:"函数的封装"},"26.5":{t:"函数的参数",p:"",l:"JavaScript/base/function.html#函数的参数",a:"函数的参数"},"26.6":{t:"形参和实参",p:`
在声明函数时，可以在函数名称后面的小括号中添加一些参数，这些参数被称为形参
在调用该函数时，同样也需要传递相应的参数，这些参数被称为实参

参数的作用: 在函数内部某些值不能固定，我们可以通过参数在 ...`,l:"JavaScript/base/function.html#形参和实参",a:"形参和实参"},"26.7":{t:"函数形参和实参个数不匹配问题",p:`


参数个数
说明




实参个数等于形参个数
输出正确结果


实参个数多于形参个数
只取到形参的个数


实参个数少于形参个数
多的参数定义为 undefined



// 函数形参实参个数 ...`,l:"JavaScript/base/function.html#函数形参和实参个数不匹配问题",a:"函数形参和实参个数不匹配问题"},"26.8":{t:"函数的返回值",p:`有的时候，我们会希望函数将值返回给调用者，此时通过使用 return 语句就可以实现。
语法格式
// 声明函数
function 函数名（）{
    ...
    return  需要返回的值； ...`,l:"JavaScript/base/function.html#函数的返回值",a:"函数的返回值"},"26.9":{t:"break、continue、return 的区别",p:`
break：结束当前的循环体（如 for、while）
continue：跳出本次循环，继续执行下次循环（如 for、while）
return：不仅可以退出循环，还能够返回 return 语句中的 ...`,l:"JavaScript/base/function.html#break、continue、return-的区别",a:"break、continue、return-的区别"},"26.10":{t:"匿名函数",p:`函数可以分为具名函数和匿名函数
匿名函数：没有名字的函数,无法直接使用。
`,l:"JavaScript/base/function.html#匿名函数",a:"匿名函数"},"26.11":{t:"函数表达式",p:`// 声明
let fn = function () {
  console.log('函数表达式')
}
// 调用
fn()

`,l:"JavaScript/base/function.html#函数表达式",a:"函数表达式"},"26.12":{t:"立即执行函数",p:`(function(){ xxx  })();
(function(){ xxxx }());

::: tip
无需调用，立即执行，其实本质已经调用了
多个立即执行函数之间用分号隔开
:::
`,l:"JavaScript/base/function.html#立即执行函数",a:"立即执行函数"},"27.0":{t:"# JavaScript 基本语法",p:`JavaScript 是一种脚本语言，通常用于在 Web 浏览器中编写交互式前端代码。它也可以在服务器端运行，用于编写后端代码。
JavaScript 的语法类似于 C 语言，但它是一种解释性语言，不 ...`,l:"JavaScript/base/index.html",a:"javascript-基本语法"},"27.1":{t:"输出语句",p:`以下是一个简单的 JavaScript 示例：
// 输出Hello, World!
console.log('Hello, World!')

document.write('Hello World ...`,l:"JavaScript/base/index.html#输出语句",a:"输出语句"},"27.2":{t:"引入方式",p:`
JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 script 标签将 JavaScript 代码引入到 HTML 中，有两种 ...`,l:"JavaScript/base/index.html#引入方式",a:"引入方式"},"27.3":{t:"内部方式",p:`通过 script 标签包裹 JavaScript 代码
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
  ...`,l:"JavaScript/base/index.html#内部方式",a:"内部方式"},"27.4":{t:"外部方式",p:`
一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 script 标签的 src 属性引入
script标签如果带src属性，那么内部的 js 代码没有作用



`,l:"JavaScript/base/index.html#外部方式",a:"外部方式"},"27.5":{t:"注释",p:"",l:"JavaScript/base/index.html#注释",a:"注释"},"27.6":{t:"单行注释",p:`使用 //  注释单行代码， 快捷键 Ctrl + /


`,l:"JavaScript/base/index.html#单行注释",a:"单行注释"},"27.7":{t:"多行注释",p:`使用/* */注释多行代码，快捷键 Shift+Alt+A


`,l:"JavaScript/base/index.html#多行注释",a:"多行注释"},"28.0":{t:"# JavaScript 对象",p:"",l:"JavaScript/base/object.html",a:"javascript-对象"},"28.1":{t:"概述",p:"",l:"JavaScript/base/object.html#概述",a:"概述"},"28.2":{t:"生成方法",p:`对象（object）是 JavaScript 语言的核心概念，也是最重要的数据类型。
什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。
var obj ...`,l:"JavaScript/base/object.html#生成方法",a:"生成方法"},"28.3":{t:"键名",p:`对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。上面的代码也可以写成下面这样。
var obj = {
  foo: 'Hello',
  bar: ...`,l:"JavaScript/base/object.html#键名",a:"键名"},"28.4":{t:"对象的引用",p:`如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。
var o1 = {}
var o2 = o1

o1.a = 1
o ...`,l:"JavaScript/base/object.html#对象的引用",a:"对象的引用"},"28.5":{t:"表达式还是语句？",p:`对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？
{
  foo: 123
}

JavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这 ...`,l:"JavaScript/base/object.html#表达式还是语句",a:"表达式还是语句"},"28.6":{t:"属性的操作",p:"",l:"JavaScript/base/object.html#属性的操作",a:"属性的操作"},"28.7":{t:"属性的读取",p:`读取对象的属性，有两种方法，一种是使用点运算符，还有一种是使用方括号运算符。
var obj = {
  p: 'Hello World'
}

obj.p // &quot;Hello World& ...`,l:"JavaScript/base/object.html#属性的读取",a:"属性的读取"},"28.8":{t:"属性的赋值",p:`点运算符和方括号运算符，不仅可以用来读取值，还可以用来赋值。
var obj = {}

obj.foo = 'Hello'
obj['bar'] = 'World'

上面代码中，分别使用点运算符和 ...`,l:"JavaScript/base/object.html#属性的赋值",a:"属性的赋值"},"28.9":{t:"属性的查看",p:`查看一个对象本身的所有属性，可以使用Object.keys方法。
var obj = {
  key1: 1,
  key2: 2
}

Object.keys(obj)
// ['key1', 'k ...`,l:"JavaScript/base/object.html#属性的查看",a:"属性的查看"},"28.10":{t:"属性的删除：delete 命令",p:`delete命令用于删除对象的属性，删除成功后返回true。
var obj = { p: 1 }
Object.keys(obj) // [&quot;p&quot;]

delete obj.p  ...`,l:"JavaScript/base/object.html#属性的删除-delete-命令",a:"属性的删除-delete-命令"},"28.11":{t:"属性是否存在：in 运算符",p:`in运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回true，否则返回false。它的左边是一个字符串，表示属性名，右边是一个对象。
var obj = { p: 1 ...`,l:"JavaScript/base/object.html#属性是否存在-in-运算符",a:"属性是否存在-in-运算符"},"28.12":{t:"属性的遍历：for...in 循环",p:`for...in循环用来遍历一个对象的全部属性。
var obj = { a: 1, b: 2, c: 3 }

for (var i in obj) {
  console.log('键名：', i ...`,l:"JavaScript/base/object.html#属性的遍历-for-in-循环",a:"属性的遍历-for-in-循环"},"28.13":{t:"with 语句",p:`with语句的格式如下：
with (对象) {
  语句
}

它的作用是操作同一个对象的多个属性时，提供一些书写的方便。
// 例一
var obj = {
  p1: 1,
  p2: 2
}
 ...`,l:"JavaScript/base/object.html#with-语句",a:"with-语句"},"29.0":{t:"# JavaScript 运算符",p:"",l:"JavaScript/base/operator.html",a:"javascript-运算符"},"29.1":{t:"运算符",p:`运算符也被称为操作符，是用于实现赋值、比较和执行算数运算等动能的符号。
JavaScript 中常用的运算符有：

算数运算符
递增和递减运算符
比较运算符
逻辑运算符
赋值运算符

`,l:"JavaScript/base/operator.html#运算符",a:"运算符"},"29.2":{t:"算数运算符",p:`


运算符
描述
实例




+
加
1 + 2 = 3


-
减
3 - 2 = 1


*
乘
2 * 4 = 8


/
除
10 / 2 = 5


**
幂运算
2 ** 4 = 16 ...`,l:"JavaScript/base/operator.html#算数运算符",a:"算数运算符"},"29.3":{t:"赋值运算符",p:`


运算符名称
描述
实例




=
赋值
let a = 10


??=
空赋值&lt;br /&gt;只有当变量的值为 null 或 undefined 时才会对变量进行赋值
3 - 2 = ...`,l:"JavaScript/base/operator.html#赋值运算符",a:"赋值运算符"},"29.4":{t:"自增和自减",p:"",l:"JavaScript/base/operator.html#自增和自减",a:"自增和自减"},"29.5":{t:"++ 自增运算符",p:`
++ 使用后会使得原来的变量立刻增加 1
自增分为前自增(++a)和后自增(a++)
无论是++a 还是 a++都会使原变量立刻增加 1
不同的是++a 和 a++所返回的值不同
a++ 是自增前的 ...`,l:"JavaScript/base/operator.html#自增运算符",a:"自增运算符"},"29.6":{t:"-- 自减运算符",p:`
使用后会使得原来的变量立刻减小 1
自减分为前自减(--a)和后自减(a--)
无论是--a 还是 a--都会使原变量立刻减少 1
不同的是--a 和 a--的值不同
--a 是新值
a-- 是旧值 ...`,l:"JavaScript/base/operator.html#自减运算符",a:"自减运算符"},"29.7":{t:"比较运行符",p:`


运算符名称
描述
案列
结果




&lt;
小于号
1 &lt; 2
true


&gt;
大于号
1 &gt; 2
false


&lt;=
小于等于号
2 &lt;= 2
true
 ...`,l:"JavaScript/base/operator.html#比较运行符",a:"比较运行符"},"29.8":{t:"逻辑运算符",p:"",l:"JavaScript/base/operator.html#逻辑运算符",a:"逻辑运算符"},"29.9":{t:"逻辑与 `&&`",p:`一假即假


可以对两个值进行与运算


当&amp;&amp;左右都为 true 时，则返回 true，否则返回 false


与运算是短路的与，如果第一个值为 false，则不看第二个值


与 ...`,l:"JavaScript/base/operator.html#逻辑与",a:"逻辑与"},"29.10":{t:"逻辑或 `||`",p:`一真即真


可以对两个值进行或运算


当||左右有 true 时，则返回 true，否则返回 false


或运算也是短路的或，如果第一个值为 true，则不看第二个值


或运算是找 true ...`,l:"JavaScript/base/operator.html#逻辑或",a:"逻辑或"},"29.11":{t:"逻辑非 `!`",p:`console.log(!false) // true

`,l:"JavaScript/base/operator.html#逻辑非",a:"逻辑非"},"29.12":{t:"条件运算符",p:`
条件表达式 ? 表达式 1 : 表达式 2

::: tip 执行顺序：
条件运算符在执行时，会先对条件表达式进行求值判断

如果结果为 true，则执行表达式 1
如果结果为 false，则执行表 ...`,l:"JavaScript/base/operator.html#条件运算符",a:"条件运算符"},"29.13":{t:" 运算符的优先级",p:`JavaScript 各种运算符的优先级别（Operator Precedence）是不一样的。优先级高的运算符先执行，优先级低的运算符后执行。
4 + 5 * 6 // 34

圆括号（()）可以用 ...`,l:"JavaScript/base/operator.html#运算符的优先级",a:"运算符的优先级"},"30.0":{t:"# JavaScript 数据类型",p:"",l:"JavaScript/base/types.html",a:"javascript-数据类型"},"30.1":{t:"一、基本类型",p:`基本类型主要为以下 6 种：

Number
String
Boolean
Undefined
null
symbol

`,l:"JavaScript/base/types.html#一、基本类型",a:"一、基本类型"},"30.2":{t:"Number",p:`数值最常见的整数类型格式则为十进制，还可以设置八进制（零开头）、十六进制（0x 开头）
let intNum = 55 // 10进制的55
let num1 = 070 // 8进制的56
let  ...`,l:"JavaScript/base/types.html#number",a:"number"},"30.3":{t:"Undefined",p:`Undefined 类型只有一个值，就是特殊值 undefined。当使用 var 或 let 声明了变量但没有初始化时，就相当于给变量赋予了 undefined 值
let message
cons ...`,l:"JavaScript/base/types.html#undefined",a:"undefined"},"30.4":{t:"String",p:`字符串可以使用双引号（&quot;）、单引号（'）或反引号（\`）标示
let firstName = 'John'
let lastName = 'Jacob'
let lastName = \`Jin ...`,l:"JavaScript/base/types.html#string",a:"string"},"30.5":{t:"Null",p:`Null 类型同样只有一个值，即特殊值 null
逻辑上讲， null 值表示一个空对象指针，这也是给typeof 传一个 null 会返回 &quot;object&quot; 的原因
let ca ...`,l:"JavaScript/base/types.html#null",a:"null"},"30.6":{t:"Boolean",p:`Boolean （布尔值）类型有两个字面值： true 和 false
通过Boolean可以将其他类型的数据转化成布尔值
规则如下：
数据类型      				转换为 true 的值      	 ...`,l:"JavaScript/base/types.html#boolean",a:"boolean"},"30.7":{t:"Symbol",p:`Symbol （符号）是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险
let genericSymbol = Symbol()
let other ...`,l:"JavaScript/base/types.html#symbol",a:"symbol"},"30.8":{t:"二、引用类型",p:`复杂类型统称为Object，我们这里主要讲述下面三种：

Object
Array
Function

`,l:"JavaScript/base/types.html#二、引用类型",a:"二、引用类型"},"30.9":{t:"Object",p:`创建object常用方式为对象字面量表示法，属性名可以是字符串或数值
let person = {
  name: 'Nicholas',
  age: 29,
  5: true
}

`,l:"JavaScript/base/types.html#object",a:"object"},"30.10":{t:"Array",p:`JavaScript数组是一组有序的数据，但跟其他语言不同的是，数组中每个槽位可以存储任意类型的数据。并且，数组也是动态大小的，会随着数据添加而自动增长
let colors = ['red', 2, ...`,l:"JavaScript/base/types.html#array",a:"array"},"30.11":{t:"Function",p:`函数实际上是对象，每个函数都是 Function类型的实例，而 Function 也有属性和方法，跟其他引用类型一样
函数存在三种常见的表达方式：

函数声明

// 函数声明
function su ...`,l:"JavaScript/base/types.html#function",a:"function"},"30.12":{t:"其他引用类型",p:`除了上述说的三种之外，还包括Date、RegExp、Map、Set等......
`,l:"JavaScript/base/types.html#其他引用类型",a:"其他引用类型"},"30.13":{t:"三、类型转换",p:`类型转换指将一种数据类型转换为其他类型
`,l:"JavaScript/base/types.html#三、类型转换",a:"三、类型转换"},"30.14":{t:"转换为字符串",p:`// 1. 把数字转换为字符串型 变量.toString()
var num = 10
var str = num.toString()
console.log(typeof str, str) // ...`,l:"JavaScript/base/types.html#转换为字符串",a:"转换为字符串"},"30.15":{t:"转换为数字型",p:`
将其他的数据类型转换为数值

使用 Number()函数来将其他类型转换为数值
转换的情况：

字符串：

如果字符串是一个合法的数字，则会自动转换为对应的数字
如果字符串不是合法数字，则转换为 N ...`,l:"JavaScript/base/types.html#转换为数字型",a:"转换为数字型"},"30.16":{t:"转换为布尔型",p:`使用 Boolean()函数来将其他类型转换为布尔值


转换的情况：
数字：

0 和 NaN 转换为 false
其余是 true

字符串：

空串 转换为 false
其余是 true

nu ...`,l:"JavaScript/base/types.html#转换为布尔型",a:"转换为布尔型"},"30.17":{t:"四、存储区别",p:`基本数据类型和引用数据类型存储在内存中的位置不同：


基本数据类型存储在栈中


引用类型的对象存储于堆中


当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值
 ...`,l:"JavaScript/base/types.html#四、存储区别",a:"四、存储区别"},"30.18":{t:"基本类型",p:`let a = 10
let b = a // 赋值操作
b = 20
console.log(a) // 10值

a的值为一个基本类型，是存储在栈中，将a的值赋给b，虽然两个变量的值相等，但是两个 ...`,l:"JavaScript/base/types.html#基本类型",a:"基本类型"},"30.19":{t:"引用类型",p:`var obj1 = {}
var obj2 = obj1
obj2.name = 'zs'
console.log(obj1.name) // zs

引用类型数据存放在堆中，每个堆内存对象都有对应 ...`,l:"JavaScript/base/types.html#引用类型",a:"引用类型"},"30.20":{t:"小结",p:`
声明变量时不同的内存地址分配：

简单类型的值存放在栈中，在栈中存放的是对应的值
引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址


不同的类型数据导致赋值变量时的不同：

简单类型赋值 ...`,l:"JavaScript/base/types.html#小结",a:"小结"},"31.0":{t:"# JavaScript 变量",p:"",l:"JavaScript/base/variable.html",a:"javascript-变量"},"31.1":{t:"var 关键字",p:`var msg // 默认 undefined

声明后可以改变类型，但不推荐
var msg = 'hi'
msg = 100 // 合法，但不推荐

var 声明作用域，一个函数内部定义一个变量， ...`,l:"JavaScript/base/variable.html#var-关键字",a:"var-关键字"},"31.2":{t:"let 声明",p:`let 声明的范围是块作用域：
if (true) {
  var name = 'zhangsan'
  console.log(name) // zhangsan
}
console.log(na ...`,l:"JavaScript/base/variable.html#let-声明",a:"let-声明"},"31.3":{t:"暂时性死区",p:`// name 会被提升
console.log(name) // undefined
var name = 'zhangsan'
// age 不会被提升
console.log(age) // R ...`,l:"JavaScript/base/variable.html#暂时性死区",a:"暂时性死区"},"31.4":{t:"全局声明",p:`let 在全局作用域中声明的变量不会成为 window 对象的属性（var 声明的变量则会）
var name = 'zhangsan'
console.log(window.name) // 'zh ...`,l:"JavaScript/base/variable.html#全局声明",a:"全局声明"},"31.5":{t:"条件声明",p:`


JavaScript 引擎会自动将多余的声明在作用域顶部合并为一个声明。但是 let 是块级作用域，所以检查不到之前是否声明过。



try/catch 语句或 typeof 操作符也不能解决 ...`,l:"JavaScript/base/variable.html#条件声明",a:"条件声明"},"31.6":{t:"for 循环中的 let 声明",p:`使用 var 时变量会渗透到外面
for (var i = 0; i &lt; 5; ++i) {
  // 循环逻辑
}
console.log(i) // 5

let 之后则不会，因为遇到 {} ...`,l:"JavaScript/base/variable.html#for-循环中的-let-声明",a:"for-循环中的-let-声明"},"31.7":{t:"const 声明",p:`const 的行为与 let 基本相同，但是他是常量，声明之后不能修改，尝试修改 const 声明的变量会导致运行时错误。
const age = 18
age = 30 // TypeError:  ...`,l:"JavaScript/base/variable.html#const-声明",a:"const-声明"},"31.8":{t:"函数声明提升与 var 声明提升",p:`var a = 'Tom'
function a() {}

console.log(a) // 'Tom'

function与var都存在变量提升，但function比var优先级高。上面的代码就 ...`,l:"JavaScript/base/variable.html#函数声明提升与-var-声明提升",a:"函数声明提升与-var-声明提升"},"32.0":{t:"# JavaScript Ajax",p:"",l:"JavaScript/core/ajax.html",a:"javascript-ajax"},"32.1":{t:"Ajax简介",p:`AJAX 全称(Async Javascript and XML)
即异步的 JavaScript 和 XML，是一种创建交互式网页应用的网页开发技术，可以在不重新加载整个网页的情况下，与服务器交换数 ...`,l:"JavaScript/core/ajax.html#ajax简介",a:"ajax简介"},"32.2":{t:"二、实现过程",p:`实现 Ajax 异步交互需要服务器逻辑进行配合，需要完成以下步骤：


创建 Ajax 的核心对象 XMLHttpRequest 对象


通过 XMLHttpRequest 对象的 open() 方 ...`,l:"JavaScript/core/ajax.html#二、实现过程",a:"二、实现过程"},"32.3":{t:"1. 创建 XMLHttpRequest 对象",p:`通过XMLHttpRequest() 构造函数用于初始化一个 XMLHttpRequest 实例对象
const xhr = new XMLHttpRequest()

`,l:"JavaScript/core/ajax.html#_1-创建-xmlhttprequest-对象",a:"_1-创建-xmlhttprequest-对象"},"32.4":{t:"2. 与服务器建立连接",p:`通过 XMLHttpRequest 对象的 open() 方法与服务器建立连接
xhr.open(method, url, [async][, user][, password])

参数说明：


 ...`,l:"JavaScript/core/ajax.html#_2-与服务器建立连接",a:"_2-与服务器建立连接"},"32.5":{t:"3. 给服务端发送数据",p:`通过 XMLHttpRequest 对象的 send() 方法，将客户端页面的数据发送给服务端
xhr.send([body])

body: 在 XHR 请求中要发送的数据体，如果不传递数据则为 n ...`,l:"JavaScript/core/ajax.html#_3-给服务端发送数据",a:"_3-给服务端发送数据"},"32.6":{t:"4. 绑定 onreadystatechange 事件",p:`onreadystatechange 事件用于监听服务器端的通信状态，主要监听的属性为XMLHttpRequest.readyState ,
关于XMLHttpRequest.readyState属性 ...`,l:"JavaScript/core/ajax.html#_4-绑定-onreadystatechange-事件",a:"_4-绑定-onreadystatechange-事件"},"32.7":{t:"三、封装与使用",p:"",l:"JavaScript/core/ajax.html#三、封装与使用",a:"三、封装与使用"},"32.8":{t:"封装",p:`通过上面对XMLHttpRequest 对象的了解，下面来封装一个简单的ajax请求
//封装一个ajax请求
function ajax(options) {
    //创建XMLHttpRequ ...`,l:"JavaScript/core/ajax.html#封装",a:"封装"},"32.9":{t:"使用",p:`使用方式如下
ajax({
  type: 'post',
  dataType: 'json',
  data: {},
  url: 'https://xxxx',
  success: func ...`,l:"JavaScript/core/ajax.html#使用",a:"使用"},"33.0":{t:"# 轮播图",p:"",l:"JavaScript/core/carousel.html",a:"轮播图"},"33.1":{t:"代码实现",p:`:::code-group
&lt;&lt;&lt; @/JavaScript/core/components/carousel.html[示例]
:::
`,l:"JavaScript/core/carousel.html#代码实现",a:"代码实现"},"34.0":{t:"# JavaScript 闭包",p:`
闭包（Closure）是 JavaScript 中一种强大且常用的特性。它允许内部函数访问其外部函数的作用域，即使外部函数已经执行完毕，也可以继续访问。闭包可以捕获外部函数的变量和参数，并将其保存在 ...`,l:"JavaScript/core/closure.html",a:"javascript-闭包"},"34.1":{t:"创建闭包",p:`要创建一个闭包，通常需要在一个函数内部定义另一个函数，并将其返回。返回的函数就是闭包，它可以访问其外部函数中的变量和参数。
function outerFunction() {
  var outer ...`,l:"JavaScript/core/closure.html#创建闭包",a:"创建闭包"},"34.2":{t:"捕获外部变量",p:`闭包可以捕获并访问其外部函数的变量，即使外部函数已经执行完毕。这使得闭包可以在不同的上下文中使用和保留外部变量的状态。
function counter() {
  var count = 0

   ...`,l:"JavaScript/core/closure.html#捕获外部变量",a:"捕获外部变量"},"34.3":{t:"保护数据",p:`通过使用闭包，可以创建私有变量，这些变量无法从外部访问，只能通过内部函数提供的公共接口访问和修改。
function createPerson(name) {
  var age = 0

  fun ...`,l:"JavaScript/core/closure.html#保护数据",a:"保护数据"},"34.4":{t:"实际用途",p:`

封装私有变量和方法：通过使用闭包，可以创建私有变量和方法，将其封装在函数内部，只暴露公共接口给外部。这种方式可以避免全局命名冲突，并提供了一种模块化的封装方式。


创建工厂函数：通过使用闭包，可 ...`,l:"JavaScript/core/closure.html#实际用途",a:"实际用途"},"34.5":{t:"注意事项",p:`

闭包会导致内存占用增加，因为外部函数的变量和作用域在闭包中被保留，即使外部函数执行完毕也不会被释放。因此，在使用闭包时要注意内存管理，避免过度使用闭包导致内存泄漏。


闭包中的变量是引用传递的， ...`,l:"JavaScript/core/closure.html#注意事项",a:"注意事项"},"35.0":{t:"# JavaScript 深浅拷贝",p:"",l:"JavaScript/core/copy.html",a:"javascript-深浅拷贝"},"35.1":{t:"浅拷贝",p:`浅拷贝是创建一个新对象，新对象的属性值是原始对象属性值的引用。也就是说，新对象和原始对象共享相同的引用类型属性，对其中一个对象的修改会影响到另一个对象。
在 JavaScript 中，可以使用一些简单 ...`,l:"JavaScript/core/copy.html#浅拷贝",a:"浅拷贝"},"35.2":{t:"深拷贝",p:`深拷贝是创建一个新对象，新对象的属性值与原始对象的属性值完全独立，二者互不影响。
在 JavaScript 中，由于对象的属性可能是引用类型，所以需要递归复制对象的所有属性，包括嵌套的对象和数组。以下 ...`,l:"JavaScript/core/copy.html#深拷贝",a:"深拷贝"},"36.0":{t:"# JavaScript 函数柯里化",p:"",l:"JavaScript/core/currying.html",a:"javascript-函数柯里化"},"36.1":{t:"什么是函数柯里化",p:"JavaScript 函数柯里化是一种将多个参数的函数转化为一系列接受单个参数的函数的过程。通过函数柯里化，可以将原始函数分解为多个嵌套的函数，每个函数都接收一个参数，并返回一个新函数等待接收下一个参 ...",l:"JavaScript/core/currying.html#什么是函数柯里化",a:"什么是函数柯里化"},"36.2":{t:"函数柯里化的优点和应用场景",p:`

参数复用和定制：通过柯里化，可以将函数的一部分参数预先设置，然后在后续调用时只传递剩余的参数。这使得函数的复用和定制变得更加灵活和方便。


延迟执行：通过柯里化，可以将函数的执行延迟到后续的调用 ...`,l:"JavaScript/core/currying.html#函数柯里化的优点和应用场景",a:"函数柯里化的优点和应用场景"},"36.3":{t:"实现函数柯里化的方法",p:`在 JavaScript 中实现柯里化函数的方法有多种。下面是几种常见的实现方式：
`,l:"JavaScript/core/currying.html#实现函数柯里化的方法",a:"实现函数柯里化的方法"},"36.4":{t:"1. 使用闭包递归",p:`function curry(func) {
  return function curried(...args) {
    if (args.length &gt;= func.length) { ...`,l:"JavaScript/core/currying.html#_1-使用闭包递归",a:"_1-使用闭包递归"},"36.5":{t:"2. 使用递归和占位符",p:`function curry(func) {
  return function curried(...args) {
    if (args.includes(curry.placeholder) ...`,l:"JavaScript/core/currying.html#_2-使用递归和占位符",a:"_2-使用递归和占位符"},"36.6":{t:"3. 使用箭头函数和递归",p:`const curry = (func) =&gt; {
  const curried = (...args) =&gt;
    args.length &gt;= func.length ? f ...`,l:"JavaScript/core/currying.html#_3-使用箭头函数和递归",a:"_3-使用箭头函数和递归"},"37.0":{t:"# JavaScript 节流和防抖",p:`
在 JavaScript 中，节流（Throttling）和防抖（Debouncing）是两种常见的性能优化技术，用于限制函数的执行频率。它们可以帮助控制事件处理函数的触发次数，以减少资源消耗和提升 ...`,l:"JavaScript/core/debounce.html",a:"javascript-节流和防抖"},"37.1":{t:"节流",p:`节流函数适用事件：

window 的 resize、scroll
mousedown、mousemove
keyup、keydown ...

`,l:"JavaScript/core/debounce.html#节流",a:"节流"},"37.2":{t:"定义",p:`节流是一种控制函数执行频率的技术。当一个函数被频繁调用时，节流可以限制函数在一定时间间隔内只执行一次。
节流的实现思路是设置一个定时器，在函数被调用时先检查定时器是否存在。如果定时器不存在，则立即执行 ...`,l:"JavaScript/core/debounce.html#定义",a:"定义"},"37.3":{t:"其他写法",p:`
使用时间戳写法，事件会立即执行，停止触发后没有办法再次执行

function throttled1(fn, delay = 500) {
  let oldtime = Date.now()
   ...`,l:"JavaScript/core/debounce.html#其他写法",a:"其他写法"},"37.4":{t:"防抖",p:`防抖函数适用事件：

window 的 resize、scroll
mousedown、mousemove、keyup、keydown
表单事件 ...

`,l:"JavaScript/core/debounce.html#防抖",a:"防抖"},"37.5":{t:"定义",p:`防抖是一种控制函数执行频率的技术。当一个函数被频繁调用时，防抖可以延迟函数的执行，直到某个连续的时间段内没有新的函数调用发生。
防抖的实现思路是设置一个定时器，在函数被调用时先清除之前的定时器，并设置 ...`,l:"JavaScript/core/debounce.html#定义",a:"定义"},"37.6":{t:"立即执行",p:`防抖如果需要立即执行，可加入第三个参数用于判断，实现如下：
function debounce(func, wait, immediate) {
  let timeout

  return fun ...`,l:"JavaScript/core/debounce.html#立即执行",a:"立即执行"},"37.7":{t:"用法",p:`
导入或定义防抖|节流函数

function debounce(func, delay) {
  let timerId
  return function (...args) {
    clea ...`,l:"JavaScript/core/debounce.html#用法",a:"用法"},"38.0":{t:"# 数组去重",p:`const arr = [1, 1, '1', 17, true, true, false, false, 'true', 'a', {}, {}]
// =&gt; [1, '1', 17, tru ...`,l:"JavaScript/core/duplicate.html",a:"数组去重"},"38.1":{t:"1. 使用 set",p:`const array = [1, 2, 2, 3, 3, 4, 5, 5]

const uniqueArray = [...new Set(array)]

console.log(uniqueA ...`,l:"JavaScript/core/duplicate.html#_1-使用-set",a:"_1-使用-set"},"38.2":{t:"2. for 循环",p:`const unique = (arr) =&gt; {
  let len = arr.length
  for (let i = 0; i &lt; len; i++) {
    for (le ...`,l:"JavaScript/core/duplicate.html#_2-for-循环",a:"_2-for-循环"},"38.3":{t:"3. 使用 indexOf",p:`const unique = (arr) =&gt; {
  const res = []
  for (let i = 0; i &lt; arr.length; i++) {
    if (re ...`,l:"JavaScript/core/duplicate.html#_3-使用-indexof",a:"_3-使用-indexof"},"38.4":{t:"4. 使用 include",p:`const unique = (arr) =&gt; {
  const res = []
  for (let i = 0; i &lt; arr.length; i++) {
    if (!r ...`,l:"JavaScript/core/duplicate.html#_4-使用-include",a:"_4-使用-include"},"38.5":{t:"5. 使用 filter",p:`const unique = (arr) =&gt; {
  return arr.filter((item, index) =&gt; {
    return arr.indexOf(item)  ...`,l:"JavaScript/core/duplicate.html#_5-使用-filter",a:"_5-使用-filter"},"38.6":{t:"6. 使用 Map",p:`const unique = (arr) =&gt; {
  const map = new Map()
  const res = []
  for (let i = 0; i &lt; arr.l ...`,l:"JavaScript/core/duplicate.html#_6-使用-map",a:"_6-使用-map"},"39.0":{t:"# Event Loop 事件循环机制",p:"",l:"JavaScript/core/eventLoop.html",a:"event-loop-事件循环机制"},"39.1":{t:"js 事件执行机制的过程",p:`javaScript 是一门单线程语言，js 在执行代码时会按照代码语句的顺序执行形成一个执行栈，默认会从上到下依次执行，执行过程中会将任务分成两类。

同步任务：需要执行的任务在主线程上排队，一次执 ...`,l:"JavaScript/core/eventLoop.html#js-事件执行机制的过程",a:"js-事件执行机制的过程"},"39.2":{t:"异步任务分为：宏任务和微任务",p:`同步和异步分别进入到不同的执行场所，同步进入到主线程，异步的进入到任务队列（event table） 并注册函数，异步任务又可以分为宏任务和微任务。

微任务： process.nextTick（no ...`,l:"JavaScript/core/eventLoop.html#异步任务分为-宏任务和微任务",a:"异步任务分为-宏任务和微任务"},"39.3":{t:"事件循环顺序",p:`

js 在执行上下文栈的同步任务执行完后


首先会去执行微任务队列，按照队列先进先出的原则，一次执行完所有 Microtask 微任务队列任务


当前微任务执行完后，判断是否有 UI 渲染如果有 ...`,l:"JavaScript/core/eventLoop.html#事件循环顺序",a:"事件循环顺序"},"39.4":{t:" ",p:"",l:"JavaScript/core/eventLoop.html#",a:""},"39.5":{t:"例子 -->",p:"",l:"JavaScript/core/eventLoop.html#例子",a:"例子"},"40.0":{t:"# 数组扁平化",p:`
数组扁平化是指将一个多维数组变为一个一维数组

const arr = [1, [2, [3, [4, 5]]], 6]
// =&gt; [1, 2, 3, 4, 5, 6]

`,l:"JavaScript/core/flattening.html",a:"数组扁平化"},"40.1":{t:"1. 使用 flat()",p:`const res1 = arr.flat()
// 使用Infinity，无论多少层都将扁平化为一维数组。
const res1 = arr.flat(Infinity)

`,l:"JavaScript/core/flattening.html#_1-使用-flat",a:"_1-使用-flat"},"40.2":{t:"2. 利用正则",p:`const res2 = JSON.stringify(arr).replace(/\\[|\\]/g, '').split(',')

// 优化
const res3 = JSON.parse('[' ...`,l:"JavaScript/core/flattening.html#_2-利用正则",a:"_2-利用正则"},"40.3":{t:"3. 使用 reduce",p:`const flatten = (arr) =&gt; {
  return arr.reduce((pre, cur) =&gt; {
    return pre.concat(Array.isA ...`,l:"JavaScript/core/flattening.html#_3-使用-reduce",a:"_3-使用-reduce"},"40.4":{t:"4. 函数递归",p:`const res5 = []
const fn = (arr) =&gt; {
  for (let i = 0; i &lt; arr.length; i++) {
    if (Array.i ...`,l:"JavaScript/core/flattening.html#_4-函数递归",a:"_4-函数递归"},"41.0":{t:"# JavaScript Promise",p:`Promise是一种异步编程的解决方案，它可以避免回调地狱，使代码更加简洁易读。Promise对象代表一个异步操作的最终完成或失败，并返回一个值。
在 JavaScript 中，Promise有三种状 ...`,l:"JavaScript/core/promise.html",a:"javascript-promise"},"41.1":{t:"创建 Promise",p:`Promise 可以通过 new Promise() 构造函数来创建。它接收一个带有两个参数的回调函数，回调函数包含两个参数：resolve 和 reject。
const promise = new ...`,l:"JavaScript/core/promise.html#创建-promise",a:"创建-promise"},"41.2":{t:"处理 Promise 结果",p:`通过调用 Promise 实例的 .then() 方法可以处理异步操作成功的结果，通过调用 .catch() 方法可以处理异步操作失败的结果。
promise
  .then((value) =&gt ...`,l:"JavaScript/core/promise.html#处理-promise-结果",a:"处理-promise-结果"},"41.3":{t:"Promise 链式调用",p:`Promise 的一个重要特性是可以通过链式调用来串联多个异步操作。通过在 .then() 方法中返回新的 Promise 实例，可以将多个异步操作连接起来。
promise
  .then((val ...`,l:"JavaScript/core/promise.html#promise-链式调用",a:"promise-链式调用"},"41.4":{t:"Promise.all()",p:"Promise.all() 方法接收一个 Promise 实例数组，返回一个新的 Promise 实例。该新实例在数组中的所有 Promise 实例都成功完成时才会成功，并将所有 Promise 实例 ...",l:"JavaScript/core/promise.html#promise-all",a:"promise-all"},"41.5":{t:"使用 `Promise` 封装一个 Ajax",p:`下面是一个使用 Promise 封装的基本 Ajax 请求的示例：
function ajax(url, method, data) {
  return new Promise((resolve,  ...`,l:"JavaScript/core/promise.html#使用-promise-封装一个-ajax",a:"使用-promise-封装一个-ajax"},"42.0":{t:"# JavaScript 原型",p:"",l:"JavaScript/core/prototype.html",a:"javascript-原型"},"42.1":{t:"原型",p:`原型是 JavaScript 中每个对象的基础。每个 JavaScript 对象都有一个原型对象，它是一个包含属性和方法的对象。这个原型对象可以被其他对象继承，从而实现属性和方法的共享。
在 Java ...`,l:"JavaScript/core/prototype.html#原型",a:"原型"},"42.2":{t:"原型链",p:`原型链是一个对象和它的原型对象之间的连接。当你访问一个对象的属性或方法时，JavaScript 会首先查找该对象本身是否有这个属性或方法，如果没有，它会沿着原型链向上查找，直到找到为止。
functi ...`,l:"JavaScript/core/prototype.html#原型链",a:"原型链"},"42.3":{t:"原型对象",p:`每个 JavaScript 对象都有一个关联的原型对象。你可以通过 __proto__ 属性来访问对象的原型对象。例如：
const person = { name: 'John' }
console ...`,l:"JavaScript/core/prototype.html#原型对象",a:"原型对象"},"42.4":{t:"原型继承",p:`原型继承是 JavaScript 中对象之间共享属性和方法的一种方式。当一个对象继承了另一个对象的原型时，它可以访问该原型对象上的属性和方法。
让我们再次看一个例子：
function Animal( ...`,l:"JavaScript/core/prototype.html#原型继承",a:"原型继承"},"42.5":{t:"JavaScript 中的原型继承方式",p:`JavaScript 中有多种方式来实现原型继承，让我们一一了解这些方式。
`,l:"JavaScript/core/prototype.html#javascript-中的原型继承方式",a:"javascript-中的原型继承方式"},"42.6":{t:"1. 构造函数和原型链",p:`这是最常见的原型继承方式。它使用构造函数来创建对象属性，同时使用原型链来共享方法。在前面的例子中，我们已经看到了这种方式的示例。
function Animal(name) {
  this.name ...`,l:"JavaScript/core/prototype.html#_1-构造函数和原型链",a:"_1-构造函数和原型链"},"42.7":{t:"2. Object.create()",p:`Object.create() 方法是一种更简单的方式来创建一个对象并指定其原型。它接受一个原型对象作为参数，然后返回一个新对象，该对象的原型就是传入的原型对象。
const animal = {
  ...`,l:"JavaScript/core/prototype.html#_2-object-create",a:"_2-object-create"},"42.8":{t:"3. 类继承",p:`ES6 引入了类（class）的概念，它提供了一种更简单的方式来实现原型继承。类可以使用 extends 关键字继承另一个类的属性和方法。
class Animal {
  constructor(n ...`,l:"JavaScript/core/prototype.html#_3-类继承",a:"_3-类继承"},"42.9":{t:"4. Object.setPrototypeOf()",p:`Object.setPrototypeOf() 方法允许你在运行时更改对象的原型。这个方法接受两个参数：要更改原型的对象和新的原型对象。
const animal = {
  eat: functio ...`,l:"JavaScript/core/prototype.html#_4-object-setprototypeof",a:"_4-object-setprototypeof"},"42.10":{t:"原型继承与传统继承的区别",p:`JavaScript 中的原型继承与传统面向对象编程语言中的继承有一些重要区别。以下是一些主要区别：
`,l:"JavaScript/core/prototype.html#原型继承与传统继承的区别",a:"原型继承与传统继承的区别"},"42.11":{t:"1. 动态性",p:`JavaScript 的原型继承是动态的，这意味着你可以在运行时更改对象的原型。这种灵活性可以带来很多优势，但也需要小心使用，以避免不必要的复杂性。
`,l:"JavaScript/core/prototype.html#_1-动态性",a:"_1-动态性"},"42.12":{t:"2. 原型链",p:`JavaScript 中的继承是通过原型链来实现的，这意味着一个对象可以继承多个原型对象的属性和方法。这种多重继承的能力是传统继承中不常见的。
`,l:"JavaScript/core/prototype.html#_2-原型链",a:"_2-原型链"},"42.13":{t:"3. 对象与类",p:`传统面向对象编程语言通常使用类来定义对象的结构和行为，而 JavaScript 使用构造函数和原型对象。这种不同的方式可以导致不同的编程风格和理念。
`,l:"JavaScript/core/prototype.html#_3-对象与类",a:"_3-对象与类"},"42.14":{t:"使用原型的最佳实践",p:`在使用原型时，有一些最佳实践可以帮助你编写更清晰、更可维护的代码：
`,l:"JavaScript/core/prototype.html#使用原型的最佳实践",a:"使用原型的最佳实践"},"42.15":{t:"1. 避免直接修改内建对象的原型",p:`虽然你可以修改内建对象的原型，但最好不要这样做，因为它可能会导致意外的行为和不稳定性。如果需要扩展内建对象的功能，可以创建一个自定义的工具函数或对象，而不是修改原型。
`,l:"JavaScript/core/prototype.html#_1-避免直接修改内建对象的原型",a:"_1-避免直接修改内建对象的原型"},"42.16":{t:"2. 将方法添加到原型上",p:`将方法添加到原型上而不是在构造函数内部定义方法，可以节省内存，因为所有对象实例共享同一个方法。这样可以降低内存使用，特别是当有大量对象实例时。
`,l:"JavaScript/core/prototype.html#_2-将方法添加到原型上",a:"_2-将方法添加到原型上"},"42.17":{t:"3. 注意原型链中的属性和方法覆盖",p:`当在子对象上定义与父对象相同名称的属性或方法时，它会覆盖父对象上的属性或方法。因此，在命名属性和方法时要小心，以避免不必要的覆盖。
`,l:"JavaScript/core/prototype.html#_3-注意原型链中的属性和方法覆盖",a:"_3-注意原型链中的属性和方法覆盖"},"42.18":{t:"4. 使用 Object.create()来创建对象",p:`Object.create() 方法提供了一种更灵活的方式来创建对象，并指定其原型。它可以帮助你更清晰地定义对象之间的继承关系。
`,l:"JavaScript/core/prototype.html#_4-使用-object-create-来创建对象",a:"_4-使用-object-create-来创建对象"},"43.0":{t:"# 详解数组中的 reduce 方法",p:`reduce()是 JavaScript 数组的一个高阶函数，它用于对数组中的元素进行累积操作，将数组缩减为单个值。
通过reduce()方法，我们可以对数组中的每个元素进行自定义的累积运算，最终得到 ...`,l:"JavaScript/core/reduce.html",a:"详解数组中的-reduce-方法"},"43.1":{t:"语法如下",p:`array.reduce(callbackfn, initialValue)


callbackfn 是回调函数，它接受四个参数：前一个值（prev）、当前值（currentValue）、当前索引（ ...`,l:"JavaScript/core/reduce.html#语法如下",a:"语法如下"},"43.2":{t:"示例",p:"",l:"JavaScript/core/reduce.html#示例",a:"示例"},"43.3":{t:"（1）计算数组累积结果",p:`
演示如何使用reduce()方法来计算数组中所有元素的和：

const numbers = [1, 2, 3, 4]

const sum = numbers.reduce((prev, cur) ...`,l:"JavaScript/core/reduce.html#_1-计算数组累积结果",a:"_1-计算数组累积结果"},"43.4":{t:"（2）计算数组中每个元素出现的次数",p:`var arr = ['one', 'two', 'two', 'three', 'two', 'six', 'four', 'five', 'four', 'six']

var newArr =  ...`,l:"JavaScript/core/reduce.html#_2-计算数组中每个元素出现的次数",a:"_2-计算数组中每个元素出现的次数"},"43.5":{t:"（3）数组去重",p:`let arr = [1, 2, 3, 4, 4, 1]
let newArr = arr.reduce((pre, cur) =&gt; {
  if (!pre.includes(cur)) {
 ...`,l:"JavaScript/core/reduce.html#_3-数组去重",a:"_3-数组去重"},"43.6":{t:"（4）数组扁平化 二维转一维",p:`let arr = [
  [0, 1],
  [2, 3],
  [4, 5]
]
let newArr = arr.reduce((pre, cur) =&gt; {
  return pre.c ...`,l:"JavaScript/core/reduce.html#_4-数组扁平化-二维转一维",a:"_4-数组扁平化-二维转一维"},"43.7":{t:"（5）数组扁平化 多维转一维",p:`let arr = [
  [0, 1],
  [2, 3],
  [4, [5, 6, 7]]
]
const newArr = function (arr) {
  return arr.redu ...`,l:"JavaScript/core/reduce.html#_5-数组扁平化-多维转一维",a:"_5-数组扁平化-多维转一维"},"43.8":{t:"（6）对象属性求和",p:`var result = [
  {
    subject: 'math',
    score: 10
  },
  {
    subject: 'chinese',
    score: 20 ...`,l:"JavaScript/core/reduce.html#_6-对象属性求和",a:"_6-对象属性求和"},"43.9":{t:"注意事项",p:`::: tip 注意


reduce()方法适用于对数组的每个元素执行同一个累积操作，并将结果返回为单个值的情况。


在使用reduce()方法时，建议始终提供initialValue来明确指定累 ...`,l:"JavaScript/core/reduce.html#注意事项",a:"注意事项"},"44.0":{t:"# JavaScript 作用域",p:`作用域是指变量和函数在代码中可访问的范围。JavaScript 中有两种主要的作用域类型：全局作用域和局部作用域。
`,l:"JavaScript/core/scope.html",a:"javascript-作用域"},"44.1":{t:"全局作用域",p:`全局作用域是指在代码的任何地方都可访问的变量和函数。在全局作用域中声明的变量和函数可以被代码中的任何地方访问。
var globalVariable = 'Global'

function glob ...`,l:"JavaScript/core/scope.html#全局作用域",a:"全局作用域"},"44.2":{t:"局部作用域",p:`局部作用域是指在特定代码块（如函数、循环或条件语句）内部声明的变量和函数。这些变量和函数只能在其声明的代码块内部访问。
function outerFunction() {
  var outerVa ...`,l:"JavaScript/core/scope.html#局部作用域",a:"局部作用域"},"44.3":{t:"作用域链",p:"作用域链是指 JavaScript 引擎在查找变量时的嵌套作用域链条。当访问一个变量时，JavaScript 引擎首先在当前作用域的变量对象中查找，如果找不到，就会向上一级作用域继续查找，直到找到该变 ...",l:"JavaScript/core/scope.html#作用域链",a:"作用域链"},"44.4":{t:"词法作用域",p:`JavaScript 中的作用域是通过代码的结构和位置来确定的，而不是通过运行时的状态。这被称为词法作用域。函数在定义时就确定了自己的作用域，而不是在调用时。
var variable = 'Glob ...`,l:"JavaScript/core/scope.html#词法作用域",a:"词法作用域"},"45.0":{t:"# JavaScript Cookie",p:"Cookie 是一种在客户端浏览器上存储数据的机制，允许开发者在用户计算机中存储和检索有关网站的信息。Cookie 是由服务器发送到浏览器的小型文本文件，然后浏览器会将 Cookie 存储在用户的计算 ...",l:"JavaScript/storage/cookie.html",a:"javascript-cookie"},"45.1":{t:"设置 Cookie",p:`可以使用 document.cookie 属性来设置 Cookie。document.cookie 属性是一个字符串，包含一个或多个以分号分隔的键值对。
document.cookie = 'user ...`,l:"JavaScript/storage/cookie.html#设置-cookie",a:"设置-cookie"},"45.2":{t:"获取 Cookie",p:`可以使用 document.cookie 属性来获取存储在浏览器中的所有 Cookie。
var cookies = document.cookie
console.log(cookies)

doc ...`,l:"JavaScript/storage/cookie.html#获取-cookie",a:"获取-cookie"},"45.3":{t:"删除 Cookie",p:`可以通过将 Cookie 的过期时间设置为过去的时间来删除 Cookie。
document.cookie = 'username=; expires=Thu, 01 Jan 1970 00:00:0 ...`,l:"JavaScript/storage/cookie.html#删除-cookie",a:"删除-cookie"},"45.4":{t:"注意事项",p:`

每个域名下的 Cookie 是相互独立的，不同域名之间的 Cookie 是隔离的。


document.cookie 返回的是一个字符串，包含当前域名下的所有 Cookie。需要自行解析和处理字 ...`,l:"JavaScript/storage/cookie.html#注意事项",a:"注意事项"},"46.0":{t:"# JavaScript localStorage",p:"localStorage 是 Web Storage API 提供的一种本地存储机制，允许开发者在浏览器中存储和检索持久化的键值对数据。与 sessionStorage 不同，localStorage ...",l:"JavaScript/storage/localStorage.html",a:"javascript-localstorage"},"46.1":{t:"存储数据",p:"可以使用 localStorage.setItem(key, value) 方法将数据存储到 localStorage 中。其中，key 是要存储的数据的键，value 是对应的值。存储的值必须是字符 ...",l:"JavaScript/storage/localStorage.html#存储数据",a:"存储数据"},"46.2":{t:"获取数据",p:`可以使用 localStorage.getItem(key) 方法根据键从 localStorage 中检索数据。如果键不存在，返回 null。
var username = localStorage ...`,l:"JavaScript/storage/localStorage.html#获取数据",a:"获取数据"},"46.3":{t:"更新数据",p:`可以通过重新设置相同的键来更新 localStorage 中的数据。
localStorage.setItem('age', '26')

`,l:"JavaScript/storage/localStorage.html#更新数据",a:"更新数据"},"46.4":{t:"删除数据",p:`可以使用 localStorage.removeItem(key) 方法来删除指定键的数据。
localStorage.removeItem('age')

`,l:"JavaScript/storage/localStorage.html#删除数据",a:"删除数据"},"46.5":{t:"清除所有数据",p:`可以使用 localStorage.clear() 方法来删除 localStorage 中的所有数据。
localStorage.clear()

`,l:"JavaScript/storage/localStorage.html#清除所有数据",a:"清除所有数据"},"46.6":{t:"注意事项",p:`
localStorage 存储的值必须是字符串类型。如果需要存储其他数据类型（如对象或数组），可以使用 JSON.stringify() 方法将其转换为字符串存储，然后在需要时使用 JSON.par ...`,l:"JavaScript/storage/localStorage.html#注意事项",a:"注意事项"},"47.0":{t:"# JavaScript sessionStorage",p:"sessionStorage 是 Web Storage API 提供的一种本地存储机制，允许开发者在浏览器中存储和检索会话级别的键值对数据。与 localStorage 不同，sessionStor ...",l:"JavaScript/storage/sessionStorage.html",a:"javascript-sessionstorage"},"47.1":{t:"存储数据",p:"可以使用 sessionStorage.setItem(key, value) 方法将数据存储到 sessionStorage 中。其中，key 是要存储的数据的键，value 是对应的值。存储的值必 ...",l:"JavaScript/storage/sessionStorage.html#存储数据",a:"存储数据"},"47.2":{t:"获取数据",p:`可以使用 sessionStorage.getItem(key) 方法根据键从 sessionStorage 中检索数据。如果键不存在，返回 null。
var username = sessionS ...`,l:"JavaScript/storage/sessionStorage.html#获取数据",a:"获取数据"},"47.3":{t:"更新数据",p:`可以通过重新设置相同的键来更新 sessionStorage 中的数据。
sessionStorage.setItem('age', '26')

`,l:"JavaScript/storage/sessionStorage.html#更新数据",a:"更新数据"},"47.4":{t:"删除数据",p:`可以使用 sessionStorage.removeItem(key) 方法来删除指定键的数据。
sessionStorage.removeItem('age')

`,l:"JavaScript/storage/sessionStorage.html#删除数据",a:"删除数据"},"47.5":{t:"清除所有数据",p:`可以使用 sessionStorage.clear() 方法来删除 sessionStorage 中的所有数据。
sessionStorage.clear()

`,l:"JavaScript/storage/sessionStorage.html#清除所有数据",a:"清除所有数据"},"47.6":{t:"注意事项",p:`
sessionStorage 存储的值必须是字符串类型。如果需要存储其他数据类型（如对象或数组），可以使用 JSON.stringify() 方法将其转换为字符串存储，然后在需要时使用 JSON.p ...`,l:"JavaScript/storage/sessionStorage.html#注意事项",a:"注意事项"},"48.0":{t:"# 内置对象 Date",p:"",l:"JavaScript/内置对象/Date.html",a:"内置对象-date"},"48.1":{t:"Date 方法",p:`


方法
描述




getDate()
获取日期（月份中的日期），返回值为 1 到 31 之间的整数。


getDay()
获取星期几，返回值为 0（表示星期日）到 6（表示星期六）之间的整数 ...`,l:"JavaScript/内置对象/Date.html#date-方法",a:"date-方法"},"48.2":{t:"创建日期",p:`Date 对象用于处理日期和时间。
可以通过 new 关键词来定义 Date 对象。以下代码定义了名为 myDate 的 Date 对象：
有四种方式初始化日期:
new Date();
new Da ...`,l:"JavaScript/内置对象/Date.html#创建日期",a:"创建日期"},"48.3":{t:"设置日期",p:`通过使用针对日期对象的方法，我们可以很容易地对日期进行操作。
在下面的例子中，我们为日期对象设置了一个特定的日期 (2050 年 1 月 10 日)：
var myDate = new Date()
 ...`,l:"JavaScript/内置对象/Date.html#设置日期",a:"设置日期"},"48.4":{t:"时间戳",p:`时间戳是指 1970 年 01 月 01 日 00 时 00 分 00 秒起至现在的总秒数或毫秒数，它是一种特殊的计量时间的方式。

注：ECMAScript 中时间戳是以毫秒计的。

获取时间戳的方 ...`,l:"JavaScript/内置对象/Date.html#时间戳",a:"时间戳"},"48.5":{t:"两个日期比较",p:`var x = new Date()
x.setFullYear(2100, 0, 14)
var today = new Date()

if (x &gt; today) {
  alert('今 ...`,l:"JavaScript/内置对象/Date.html#两个日期比较",a:"两个日期比较"},"49.0":{t:"# 内置对象 Math",p:"Math是JavaScript的一个内置对象，它提供了一些数学属性和方法，可以对数字进行计算（用于 Number 类型）。 Math和其他全局对象不同，它不是一个构造器，Math的所有方法和属性都是静 ...",l:"JavaScript/内置对象/Math.html",a:"内置对象-math"},"49.1":{t:"属性",p:`
Math.PI，获取圆周率

// 圆周率
console.log(Math.PI)

`,l:"JavaScript/内置对象/Math.html#属性",a:"属性"},"49.2":{t:"方法",p:"",l:"JavaScript/内置对象/Math.html#方法",a:"方法"},"49.3":{t:"Math.abs()",p:`Math.abs()函数，返回一个数的绝对值
Math.abs(-10)
// 10

`,l:"JavaScript/内置对象/Math.html#math-abs",a:"math-abs"},"49.4":{t:"Math.random()",p:`Math.random()函数，返回一个浮点，伪随机数范围从 0 到小于 1，从 0 往上不包括 1。
// 0 ~ 1 之间的随机数, 包含 0 不包含 1
Math.random()

`,l:"JavaScript/内置对象/Math.html#math-random",a:"math-random"},"49.5":{t:"Math.ceil()",p:`Math.ceil()函数，返回大于或等于一个给定数的最小整数。
// 舍弃小数部分，整数部分加1
Math.ceil(3.4)

`,l:"JavaScript/内置对象/Math.html#math-ceil",a:"math-ceil"},"49.6":{t:"Math.floor()",p:`Math.floor()方法，返回小于或等于一个给定数字的最大整数
// 舍弃小数部分，整数部分不变
Math.floor(4.68)

`,l:"JavaScript/内置对象/Math.html#math-floor",a:"math-floor"},"49.7":{t:"Math.round()",p:`Math.round()，返回的是一个数字四舍五入的整数。
// 取整，四舍五入原则
Math.round(5.46539)
Math.round(4.849)

`,l:"JavaScript/内置对象/Math.html#math-round",a:"math-round"},"49.8":{t:"Math.min()",p:`Math.min()方法，是可以返回指定一组数据中最小值。
// 找出最小值
Math.min(24, 18, 6, 19, 21)

`,l:"JavaScript/内置对象/Math.html#math-min",a:"math-min"},"49.9":{t:"Math.max()",p:`Math.max()方法，是可以返回指定一组数据中最大值。
// 找出最大值
Math.max(10, 21, 7, 24, 13)

`,l:"JavaScript/内置对象/Math.html#math-max",a:"math-max"},"49.10":{t:"Math.pow()",p:`Math.pow()方法，返回基数(base)的指数(exponent)次幂。
// 求某个数的多少次方
Math.pow(4, 2) // 求 4 的 2 次方
Math.pow(2, 3) //  ...`,l:"JavaScript/内置对象/Math.html#math-pow",a:"math-pow"},"49.11":{t:"Math.sqrt()",p:`Math.sqrt()方法，返回的是一个数的平方根。
// 求某数的平方根
Math.sqrt(16) // 4

`,l:"JavaScript/内置对象/Math.html#math-sqrt",a:"math-sqrt"},"49.12":{t:"Math.sin()",p:`Math.sin()函数，返回一个值的正弦值。
Math.sin((90 Math.PI) / 180)
// 1

`,l:"JavaScript/内置对象/Math.html#math-sin",a:"math-sin"},"49.13":{t:"Math.cos()",p:`Math.cos()函数，返回一个值的余弦值。
Math.cos((360 Math.PI) / 180) // 1

Math.cos(0) // 1

`,l:"JavaScript/内置对象/Math.html#math-cos",a:"math-cos"},"49.14":{t:"Math.trunc()",p:`Math.trunc()函数，返回的是一个数的整数部分，不管正数还是负数，直接去掉小数点及之后的部分。
Math.trunc(13.37)
// 13
Math.trunc(42.84)
// 42
 ...`,l:"JavaScript/内置对象/Math.html#math-trunc",a:"math-trunc"},"50.0":{t:"# 内置对象 Number",p:"",l:"JavaScript/内置对象/Number.html",a:"内置对象-number"},"50.1":{t:"属性",p:`
Number.MAX_VALUE：表示 JavaScript 中能表示的最大数值，约为 1.79 × 10^308。
Number.MIN_VALUE：表示 JavaScript 中能表示的最小正数 ...`,l:"JavaScript/内置对象/Number.html#属性",a:"属性"},"50.2":{t:"方法",p:`

Number.isNaN(num)：判断给定的值是否为NaN（非数值）。如果是NaN，则返回true，否则返回false。


Number.isFinite(num)：判断给定的值是否为有限数值 ...`,l:"JavaScript/内置对象/Number.html#方法",a:"方法"},"51.0":{t:"# 内置对象 RegExp",p:"",l:"JavaScript/内置对象/RegExp.html",a:"内置对象-regexp"},"51.1":{t:"什么是 RegExp？",p:"RegExp（正则表达式）是一种用于匹配和操作字符串模式的强大工具。它是一种模式匹配的语法，可以用来搜索、替换和提取字符串中的特定部分。在 JavaScript 中，RegExp 是一个内置的对象类型 ...",l:"JavaScript/内置对象/RegExp.html#什么是-regexp",a:"什么是-regexp"},"51.2":{t:"正则表达式基础语法",p:`在 JavaScript 中，正则表达式可以使用字面量形式或构造函数形式来创建。
`,l:"JavaScript/内置对象/RegExp.html#正则表达式基础语法",a:"正则表达式基础语法"},"51.3":{t:"字面量形式",p:`使用斜杠（/）将正则表达式模式包围起来，后面可以跟上一些修饰符（如 g、i、m）。
const pattern = /abc/

`,l:"JavaScript/内置对象/RegExp.html#字面量形式",a:"字面量形式"},"51.4":{t:"构造函数形式",p:`使用 RegExp 构造函数创建正则表达式，它接收两个参数：模式字符串和可选的修饰符字符串。
const pattern = new RegExp('abc')

`,l:"JavaScript/内置对象/RegExp.html#构造函数形式",a:"构造函数形式"},"51.5":{t:"元字符",p:`
.：匹配除换行符之外的任何单个字符。
^：匹配字符串的开头。
$：匹配字符串的结尾。
\\*：匹配前面的元素零次或多次。
+：匹配前面的元素一次或多次。
?：匹配前面的元素零次或一次。
[]：定义字符 ...`,l:"JavaScript/内置对象/RegExp.html#元字符",a:"元字符"},"51.6":{t:"正则表达式修饰符",p:`修饰符用于在正则表达式中添加额外的规则，影响匹配的行为。以下是常用的修饰符：

g：全局匹配，找到所有匹配项而不仅仅是第一个。
i：不区分大小写匹配。
m：多行匹配，允许 ^ 和 $ 来匹配字符串的开 ...`,l:"JavaScript/内置对象/RegExp.html#正则表达式修饰符",a:"正则表达式修饰符"},"51.7":{t:"常用的正则表达式模式",p:`以下是一些常用的正则表达式模式示例：

匹配字母或数字字符：/[a-zA-Z0-9]/
匹配多个字母或数字字符：/[a-zA-Z0-9]+/
匹配数字：/\\d/
匹配非数字：/\\D/
匹配空格字符：/ ...`,l:"JavaScript/内置对象/RegExp.html#常用的正则表达式模式",a:"常用的正则表达式模式"},"51.8":{t:"正则表达式方法",p:`JavaScript 的字符串对象提供了一些与正则表达式相关的方法来执行匹配、搜索和替换操作。
以下是一些常用的方法：

match()：在字符串中搜索匹配正则表达式的结果，并返回一个数组或 null ...`,l:"JavaScript/内置对象/RegExp.html#正则表达式方法",a:"正则表达式方法"},"51.9":{t:"正则表达式的分组和捕获",p:`正则表达式还支持使用圆括号进行分组和捕获。通过使用圆括号将模式的一部分括起来，可以创建子模式，并将匹配到的子串捕获到一个分组中。
以下是一些常用的分组和捕获的示例：

使用括号进行分组：(abc)+  ...`,l:"JavaScript/内置对象/RegExp.html#正则表达式的分组和捕获",a:"正则表达式的分组和捕获"},"51.10":{t:"正则表达式标志",p:`除了修饰符外，JavaScript 正则表达式还支持标志（Flags），用于提供更多的匹配选项。
以下是常用的正则表达式标志：

g：全局匹配，找到所有匹配项而不仅仅是第一个。
i：不区分大小写匹配。 ...`,l:"JavaScript/内置对象/RegExp.html#正则表达式标志",a:"正则表达式标志"},"51.11":{t:"应用场景",p:`正则表达式在 JavaScript 中具有广泛的应用场景，例如：

表单验证：使用正则表达式验证用户输入的表单数据，如邮箱、电话号码、密码等。
字符串替换：使用正则表达式进行文本替换、格式化或删除特定 ...`,l:"JavaScript/内置对象/RegExp.html#应用场景",a:"应用场景"},"52.0":{t:"# JavaScript 内置对象",p:`内置对象：就是指这个语言自带的一些对象，供开发者使用，这些对象提供了一些常用或者基本而必要的功能（属性和方法），用于处理各种不同类型的数据和操作。
::: tip 简介
JavaScript 的内置对 ...`,l:"JavaScript/内置对象/index.html",a:"javascript-内置对象"},"52.1":{t:"JavaScript 的内置对象：",p:`


内置对象
对象说明




Object
基础对象


Array
数组


String
字符串对象


Number
数值对象


Boolean
布尔对象


Date
日期时间


Ma ...`,l:"JavaScript/内置对象/index.html#javascript-的内置对象",a:"javascript-的内置对象"},"52.2":{t:"Object",p:`Object 是 JavaScript 的基础对象，其他对象都继承自它。Object 提供了一系列通用的方法，如对象的创建、属性的设置和获取等。它是构建其他对象的基石。
`,l:"JavaScript/内置对象/index.html#object",a:"object"},"52.3":{t:"Array",p:`Array 是用于表示和操作数组的对象。它提供了一系列的方法来操作和处理数据集合，如添加、删除、查询、排序等。Array 的灵活性使得它在处理列表和集合数据时非常便利。
`,l:"JavaScript/内置对象/index.html#array",a:"array"},"52.4":{t:"String",p:`String 是用于表示和操作字符串的对象。它提供了许多字符串相关的方法，如拼接、查找、替换等。这些方法可以帮助我们处理文本数据，进行字符串操作和处理。
`,l:"JavaScript/内置对象/index.html#string",a:"string"},"52.5":{t:"Number",p:`Number 是用于表示和操作数字的对象。它提供了一系列数字相关的方法，如四舍五入、转换为字符串、计算等。Number 可以进行基本的数学计算，还可以用于日期和时间处理。
`,l:"JavaScript/内置对象/index.html#number",a:"number"},"52.6":{t:"Boolean",p:`Boolean 是表示和操作布尔值的对象，包括 true 和 false 两个值。它提供了逻辑运算和条件判断的功能，用于控制流程和决策。
`,l:"JavaScript/内置对象/index.html#boolean",a:"boolean"},"52.7":{t:"Date",p:`Date 是用于表示日期和时间的对象。它提供了一系列的方法来操作日期和时间，如获取当前时间、设置时间、格式化等。Date 可以用于处理时间相关的任务，如计算时间差、添加或减去日期等。
`,l:"JavaScript/内置对象/index.html#date",a:"date"},"52.8":{t:"Math",p:`Math 是用于进行数学计算的对象。它提供了一系列数学运算方法，如求绝对值、计算平方根、生成随机数等。Math 可以用于复杂的数值计算和处理。
`,l:"JavaScript/内置对象/index.html#math",a:"math"},"52.9":{t:"RegExp",p:`RegExp 是用于进行正则表达式匹配的对象。它提供了一系列与正则表达式相关的方法，如匹配、替换等。RegExp 可以用于文本匹配、分割、替换等复杂的文本处理任务。
除了上述常用的内置对象外，还有一些 ...`,l:"JavaScript/内置对象/index.html#regexp",a:"regexp"},"53.0":{t:"# 继承、封装和多态",p:"",l:"JavaScript/面向对象/char.html",a:"继承、封装和多态"},"53.1":{t:"继承（Inheritance）：",p:`继承是一种对象间的关系，它允许一个对象（称为子类或派生类）继承另一个对象（称为父类或基类）的属性和方法。子类继承了父类的特性，可以通过继承来复用代码，减少重复编写。
在 JavaScript 中，可以 ...`,l:"JavaScript/面向对象/char.html#继承-inheritance",a:"继承-inheritance"},"53.2":{t:"封装（Encapsulation）：",p:`封装是一种将数据和方法包裹在一个单一实体中的概念，使得外部无法直接访问对象的内部实现细节。这样的设计有助于隐藏对象的复杂性，只暴露必要的接口，提高代码的可维护性和安全性。
在 JavaScript 中 ...`,l:"JavaScript/面向对象/char.html#封装-encapsulation",a:"封装-encapsulation"},"53.3":{t:"多态（Polymorphism）：",p:`多态是一种允许不同对象对同一方法做出不同响应的特性。这意味着可以使用相同的方法名，但针对不同对象实现不同的行为。多态有助于实现代码的灵活性和可扩展性。
在 JavaScript 中，由于其动态类型特性 ...`,l:"JavaScript/面向对象/char.html#多态-polymorphism",a:"多态-polymorphism"},"54.0":{t:"# 类和构造函数",p:"在 JavaScript 中，类是一种用于创建对象的模板或蓝图，而构造函数是用于创建类的实例的特殊函数。它们是面向对象编程的两种不同方式，但在 ES6（ECMAScript 6）之后，JavaScri ...",l:"JavaScript/面向对象/class.html",a:"类和构造函数"},"54.1":{t:"构造函数",p:"在 ES5 及其之前的版本中，JavaScript 使用构造函数来创建对象。构造函数本质上是一个普通的函数，但通常使用new关键字来实例化对象。构造函数内部使用this关键字来引用新创建的对象，并定义 ...",l:"JavaScript/面向对象/class.html#构造函数",a:"构造函数"},"54.2":{t:"类",p:`在 ES6 及以上的版本中，JavaScript 引入了class关键字，使得类的定义更加简洁明了。类定义了对象的结构和行为，而对象则是类的实例。类的方法在原型上定义，因此实例共享相同的方法。
示例： ...`,l:"JavaScript/面向对象/class.html#类",a:"类"},"55.0":{t:"# JavaScript 面向对象",p:"",l:"JavaScript/面向对象/index.html",a:"javascript-面向对象"},"55.1":{t:"是什么？",p:`JavaScript 面向对象是一种编程范式，其中程序被组织为一组对象，每个对象都有自己的状态和行为。在面向对象编程中，对象是数据和操作数据的方法的封装单元，它们通过相互之间的交互来完成特定的任务。
`,l:"JavaScript/面向对象/index.html#是什么",a:"是什么"},"55.2":{t:"特点：",p:`

对象： 对象是面向对象编程的核心概念。对象是一个复合的数据类型，它可以包含属性（也称为数据成员）和方法（也称为函数成员）。


类： 类是对象的模板或蓝图，它定义了对象将具有的属性和方法。类是一种 ...`,l:"JavaScript/面向对象/index.html#特点",a:"特点"},"56.0":{t:"# 实例对象与方法",p:"",l:"JavaScript/面向对象/new.html",a:"实例对象与方法"},"56.1":{t:"创建对象",p:"",l:"JavaScript/面向对象/new.html#创建对象",a:"创建对象"},"56.2":{t:"利用 `new Object` 创建对象",p:`var person = new Person()
person.name = '张三'
person.age = 18
person.sex = '男'
person.sayHi = functio ...`,l:"JavaScript/面向对象/new.html#利用-new-object-创建对象",a:"利用-new-object-创建对象"},"56.3":{t:"利用字面量创建对象",p:`var person = {
  name: '张三',
  age: 18,
  sex: '男',
  sayHi: function () {
    alert('大家好啊~')
  }
}
 ...`,l:"JavaScript/面向对象/new.html#利用字面量创建对象",a:"利用字面量创建对象"},"56.4":{t:"利用构造函数创建对象",p:`构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。
::: tip 注意
 ...`,l:"JavaScript/面向对象/new.html#利用构造函数创建对象",a:"利用构造函数创建对象"},"56.5":{t:"常用方法",p:`
Object.assign(target, …sources)：复制一个或多个对象的属性到目标对象。
Object.create(proto, [propertiesObject])：创建一个新对象 ...`,l:"JavaScript/面向对象/new.html#常用方法",a:"常用方法"},"56.6":{t:"Object.assign(target, …sources)",p:`const obj1 = { a: 1 }
const obj2 = { b: 2 }
const obj3 = { c: 3 }
const mergedObj = Object.assign(ob ...`,l:"JavaScript/面向对象/new.html#object-assign-target-sources",a:"object-assign-target-sources"},"56.7":{t:"Object.create(proto, [propertiesObject])",p:`const myProto = { greeting: 'Hello' }
const newObj = Object.create(myProto)
console.log(newObj.greet ...`,l:"JavaScript/面向对象/new.html#object-create-proto-propertiesobject",a:"object-create-proto-propertiesobject"},"56.8":{t:"Object.entries(obj)",p:`const obj = { a: 1, b: 2, c: 3 }
const entries = Object.entries(obj)
console.log(entries) // [[&quot ...`,l:"JavaScript/面向对象/new.html#object-entries-obj",a:"object-entries-obj"},"56.9":{t:"Object.freeze(obj)",p:`const obj = { name: 'John' }

`,l:"JavaScript/面向对象/new.html#object-freeze-obj",a:"object-freeze-obj"},"56.10":{t:"Object.freeze(obj)",p:`obj.name = 'Jane' // 修改无效，不会影响原对象
console.log(obj.name) // John

`,l:"JavaScript/面向对象/new.html#object-freeze-obj",a:"object-freeze-obj"},"56.11":{t:"Object.getOwnPropertyDescriptor(obj, prop)",p:`const obj = { name: 'John' }
const descriptor = Object.getOwnPropertyDescriptor(obj, 'name')
console ...`,l:"JavaScript/面向对象/new.html#object-getownpropertydescriptor-obj-prop",a:"object-getownpropertydescriptor-obj-prop"},"56.12":{t:"Object.getOwnPropertyNames(obj)",p:`const obj = { name: 'John', age: 30 }
const propNames = Object.getOwnPropertyNames(obj)
console.log( ...`,l:"JavaScript/面向对象/new.html#object-getownpropertynames-obj",a:"object-getownpropertynames-obj"},"56.13":{t:"Object.getOwnPropertySymbols(obj)",p:`const sym = Symbol('mySymbol')
const obj = { [sym]: 'value' }
const symbols = Object.getOwnPropertyS ...`,l:"JavaScript/面向对象/new.html#object-getownpropertysymbols-obj",a:"object-getownpropertysymbols-obj"},"56.14":{t:"Object.getPrototypeOf(obj)",p:`const myProto = { greeting: 'Hello' }
const newObj = Object.create(myProto)
console.log(Object.getPr ...`,l:"JavaScript/面向对象/new.html#object-getprototypeof-obj",a:"object-getprototypeof-obj"},"56.15":{t:"Object.is(value1, value2)",p:`console.log(Object.is(5, 5)) // true
console.log(Object.is(0, -0)) // false
console.log(Object.is(Na ...`,l:"JavaScript/面向对象/new.html#object-is-value1-value2",a:"object-is-value1-value2"},"56.16":{t:"Object.keys(obj)",p:`const obj = { name: 'John', age: 30 }
const keys = Object.keys(obj)
console.log(keys) // [&quot;name ...`,l:"JavaScript/面向对象/new.html#object-keys-obj",a:"object-keys-obj"},"56.17":{t:"Object.seal(obj)",p:`const obj = { name: 'John' }

`,l:"JavaScript/面向对象/new.html#object-seal-obj",a:"object-seal-obj"},"56.18":{t:"Object.seal(obj)",p:`obj.age = 30 // 添加属性无效，不会影响原对象
delete obj.name // 删除属性无效，不会影响原对象
console.log(obj.name) // John
conso ...`,l:"JavaScript/面向对象/new.html#object-seal-obj",a:"object-seal-obj"},"56.19":{t:"Object.values(obj)",p:`const obj = { name: 'John', age: 30 }
const values = Object.values(obj)
console.log(values) // [&quo ...`,l:"JavaScript/面向对象/new.html#object-values-obj",a:"object-values-obj"},"56.20":{t:"Object.hasOwnProperty(prop)",p:`const obj = { name: 'John' }
console.log(obj.hasOwnProperty('name')) // true
console.log(obj.hasOwnP ...`,l:"JavaScript/面向对象/new.html#object-hasownproperty-prop",a:"object-hasownproperty-prop"},"57.0":{t:"# JavaScript 原型和原型链",p:`
JavaScript 原型和原型链是面向对象编程中的重要概念，用于实现继承和共享属性和方法。

`,l:"JavaScript/面向对象/prototype.html",a:"javascript-原型和原型链"},"57.1":{t:"原型（Prototype）",p:"在 JavaScript 中，每个对象都有一个特殊的属性__proto__（在 ES6 及以上版本中，可以使用Object.getPrototypeOf()来访问原型），它指向该对象的原型对象。原型对 ...",l:"JavaScript/面向对象/prototype.html#原型-prototype",a:"原型-prototype"},"57.2":{t:"原型链（Prototype Chain）",p:"原型链是由对象的原型对象构成的链式结构。当我们访问对象的属性或方法时，如果对象本身没有找到，则会继续在原型链上查找，直到找到为止。原型链的最终节点是Object.prototype，它是所有对象的根原 ...",l:"JavaScript/面向对象/prototype.html#原型链-prototype-chain",a:"原型链-prototype-chain"},"57.3":{t:"使用原型的好处",p:`

共享属性和方法： 原型允许多个对象共享相同的属性和方法，这样可以节省内存空间。


继承： 通过原型链，我们可以实现继承，子对象可以继承父对象的属性和方法。


动态更新： 原型上的属性和方法是动 ...`,l:"JavaScript/面向对象/prototype.html#使用原型的好处",a:"使用原型的好处"},"57.4":{t:"注意事项",p:`
尽量避免直接修改原型对象，以免对其他对象产生意外的影响。
使用Object.create()和Object.setPrototypeOf()等方法来设置对象的原型，而不是直接修改__proto__属 ...`,l:"JavaScript/面向对象/prototype.html#注意事项",a:"注意事项"},"58.0":{t:"# JavaScript 严格模式",p:"JavaScript 严格模式（Strict Mode）是一种在 JavaScript 中启用更严格解析和错误处理的模式。它旨在帮助开发者编写更安全、规范、优化和可靠的代码，并避免一些常见的错误。严格 ...",l:"JavaScript/面向对象/strict.html",a:"javascript-严格模式"},"59.0":{t:"# this 关键字",p:"",l:"JavaScript/面向对象/this.html",a:"this-关键字"},"59.1":{t:"执行期上下文",p:`当函数执行时（准确来说，是在函数发生预编译的前一刻），会创建一个执行期上下文的内部对象。一个执行期上下文定义了一个函数执行时的环境。
每调用一次函数，就会创建一个新的上下文对象，他们之间是相互独立且独 ...`,l:"JavaScript/面向对象/this.html#执行期上下文",a:"执行期上下文"},"59.2":{t:"this 指向",p:`解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是 this，this 指向的是一个对象，这个对象我们称为函数执行的 上下文对象。
`,l:"JavaScript/面向对象/this.html#this-指向",a:"this-指向"},"59.3":{t:"ES5 函数内 this 的指向【非常重要】",p:`在 ES5 语法中，根据函数的调用方式的不同，this 会指向不同的对象：

1、以函数的形式（包括普通函数、定时器函数、立即执行函数）调用时，this 的指向永远都是 window。比如fun(); ...`,l:"JavaScript/面向对象/this.html#es5-函数内-this-的指向【非常重要】",a:"es5-函数内-this-的指向【非常重要】"},"59.4":{t:"ES6 箭头函数中 this 的指向",p:`ES6 中的箭头函数并不使用上面的准则，而是会继承外层函数调用的 this 绑定（无论 this 绑定到什么）。
var obj = {
  foo: function () {
    var ar ...`,l:"JavaScript/面向对象/this.html#es6-箭头函数中-this-的指向",a:"es6-箭头函数中-this-的指向"},"59.5":{t:"改变函数内部的 this 指向",p:`JS 专门为我们提供了一些方法来改变函数内部的 this 指向。常见的方法有 call()、apply()、bind() 方法。
`,l:"JavaScript/面向对象/this.html#改变函数内部的-this-指向",a:"改变函数内部的-this-指向"},"59.6":{t:"call()",p:"",l:"JavaScript/面向对象/this.html#call",a:"call"},"59.7":{t:"call() 方法的作用",p:`call() 方法的作用：可以调用一个函数，与此同时，它还可以改变这个函数内部的 this 指向。
call() 方法的另一个应用：可以实现继承。之所以能实现继承，其实是利用了上面的作用。
语法：
f ...`,l:"JavaScript/面向对象/this.html#call-方法的作用",a:"call-方法的作用"},"59.8":{t:"call() 方法举例",p:`举例 1、通过 call() 调用函数：
const obj1 = {
  nickName: 'zhangsan',
  age: 28
}
function fn1() {
  console.l ...`,l:"JavaScript/面向对象/this.html#call-方法举例",a:"call-方法举例"},"59.9":{t:"apply() 方法",p:"",l:"JavaScript/面向对象/this.html#apply-方法",a:"apply-方法"},"59.10":{t:"apply() 方法的作用",p:`apply() 方法的作用：可以调用一个函数，与此同时，它还可以改变这个函数内部的 this 指向。这一点，和 call()类似。
apply() 方法的应用： 由于 apply()需要传递数组，所以 ...`,l:"JavaScript/面向对象/this.html#apply-方法的作用",a:"apply-方法的作用"},"59.11":{t:"apply() 方法举例",p:`举例、通过 apply() 改变 this 指向：
var obj1 = {
  nickName: 'zhangsan',
  age: 28
}

function fn1(a) {
  cons ...`,l:"JavaScript/面向对象/this.html#apply-方法举例",a:"apply-方法举例"},"59.12":{t:"apply() 方法的巧妙应用：求数组的最大值",p:`我们知道，如果想要求数组中元素的最大值，数组本身是没有自带方法的。那怎么办呢？
虽然数组里没有获取最大值的方法，但是数值里有 Math.max(数字1，数字2，数字3) 方法，可以获取多个数值中的最大 ...`,l:"JavaScript/面向对象/this.html#apply-方法的巧妙应用-求数组的最大值",a:"apply-方法的巧妙应用-求数组的最大值"},"59.13":{t:"bind() 方法",p:"",l:"JavaScript/面向对象/this.html#bind-方法",a:"bind-方法"},"59.14":{t:"bind() 方法的作用",p:`bind() 方法不会调用函数，但是可以改变函数内部的 this 指向。
把 call()、apply()、bind()这三个方法做一下对比，你会发现：实际开发中， bind() 方法使用得最为频繁。 ...`,l:"JavaScript/面向对象/this.html#bind-方法的作用",a:"bind-方法的作用"},"60.0":{t:"# 关于作者",p:`qq:2357490894
微信: !img
`,l:"about/index.html",a:"关于作者"},"61.0":{t:"# 算法",p:"",l:"algorithms/demo1.html",a:"算法"},"61.1":{t:"123",p:"",l:"algorithms/demo1.html#_123",a:"_123"},"62.0":{t:"# demo2",p:"",l:"algorithms/demo2.html",a:"demo2"},"63.0":{t:"# demo3",p:"",l:"algorithms/demo3.html",a:"demo3"},"64.0":{t:"# 该内容正在努力建设中 ......",p:"",l:"algorithms/index.html",a:"该内容正在努力建设中"},"65.0":{t:"# CSS 选择器",p:"",l:"frontEnd/css3/base/css选择器.html",a:"css-选择器"},"65.1":{t:"通配符选择器",p:`
选择页面所有元素
用于清除内外边距

* {
  padding: 0;
  margin: 0;
}

`,l:"frontEnd/css3/base/css选择器.html#通配符选择器",a:"通配符选择器"},"65.2":{t:"元素选择器",p:`
通过标签名选择元素
优点：可快速为同类型标签统一设置样式
缺点：不能涉及差异化样式，只能选择全部标签

h1 {
  color: #ccc;
}

`,l:"frontEnd/css3/base/css选择器.html#元素选择器",a:"元素选择器"},"65.3":{t:"类选择器",p:`
通过类名选择元素

.container {
  color: pink;
}

`,l:"frontEnd/css3/base/css选择器.html#类选择器",a:"类选择器"},"65.4":{t:"id 选择器",p:`
通过元素 id 属性选择元素

#md {
  font-weight: 600;
}

`,l:"frontEnd/css3/base/css选择器.html#id-选择器",a:"id-选择器"},"65.5":{t:"交集选择器",p:`&lt;p class=&quot;good&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;good beaauty&quot;&gt;&lt;/p&gt;

/* 语法 ...`,l:"frontEnd/css3/base/css选择器.html#交集选择器",a:"交集选择器"},"65.6":{t:"并集选择器",p:`
作用：选中多个选择器对应的元素，又称：分组选择器
语法：选择器1, 选择器2, 选择器3,... 选择器 n {}

h1,
h2,
h3 {
  text-align: center;
}

`,l:"frontEnd/css3/base/css选择器.html#并集选择器",a:"并集选择器"},"65.7":{t:"后代选择器",p:`
在所有后代节点中选

ul li {
  color: blue;
}

`,l:"frontEnd/css3/base/css选择器.html#后代选择器",a:"后代选择器"},"65.8":{t:"子选择器",p:`
只在亲儿子中选

div &gt; a {
  color: green;
}

`,l:"frontEnd/css3/base/css选择器.html#子选择器",a:"子选择器"},"65.9":{t:"兄弟选择器",p:`
选择所有指定元素的相邻后一个兄弟节点

&lt;h1&gt;h1-2&lt;/h1&gt;
&lt;p&gt;p0 被选中&lt;/p&gt;
&lt;div class=&quot;contain ...`,l:"frontEnd/css3/base/css选择器.html#兄弟选择器",a:"兄弟选择器"},"65.10":{t:"伪类选择器",p:`
根据元素状态或所处 DOM 结构选择元素

`,l:"frontEnd/css3/base/css选择器.html#伪类选择器",a:"伪类选择器"},"65.11":{t:"动态伪类选择器",p:`按这个顺序声明
a:link 链接一开始的样式
a:visited 链接访问后的样式
a:hover 光标经过链接的样式
a:active 链接被按下时的样式

:focus 用于选择获取焦点的表单元 ...`,l:"frontEnd/css3/base/css选择器.html#动态伪类选择器",a:"动态伪类选择器"},"65.12":{t:"结构伪类选择器(C3)",p:`


选择符
含义




E:first-child
第一个子元素 E


E:last-child
最后一个子元素 E


E:nth-child(n)
第 n 个子元素 E


E:first- ...`,l:"frontEnd/css3/base/css选择器.html#结构伪类选择器-c3",a:"结构伪类选择器-c3"},"65.13":{t:"属性选择器(C3)",p:`


选择符
含义




E[att]
选择具有 att 属性的 E 元素


E[att=&quot;val&quot;]
选择具有 att 属性且属性值等于 val 的 E 元素


E[att ...`,l:"frontEnd/css3/base/css选择器.html#属性选择器-c3",a:"属性选择器-c3"},"65.14":{t:"伪元素选择器(C3)",p:`
伪元素选择器利用 CSS 创建新标签元素，而不需要 HTML 标签，从而简化 HTML 结构
before 和 after 创建了一个行内元素，在 DOM 树中无法找到，故为伪元素
必须有 cont ...`,l:"frontEnd/css3/base/css选择器.html#伪元素选择器-c3",a:"伪元素选择器-c3"},"65.15":{t:"相关链接",p:`一篇搞清伪类和伪元素
`,l:"frontEnd/css3/base/css选择器.html#相关链接",a:"相关链接"},"66.0":{t:"# Flex 布局 - 灵活的网页布局解决方案",p:"Flex 布局（也称为弹性盒子布局）是一种用于创建灵活、自适应的网页布局的 CSS 工具。它通过在父元素上设置display: flex，将子元素定义为弹性项目，使它们能够在主轴和交叉轴上灵活布局。F ...",l:"frontEnd/css3/base/flex.html",a:"flex-布局-灵活的网页布局解决方案"},"66.1":{t:"如何启用 Flex 布局？",p:`要启用 Flex 布局，只需在要成为 Flex 容器的父元素上设置display: flex即可：
.container {
  display: flex;
}

一旦容器成为 Flex 容器，其中 ...`,l:"frontEnd/css3/base/flex.html#如何启用-flex-布局",a:"如何启用-flex-布局"},"66.2":{t:"主轴和交叉轴",p:`Flex 布局具有一个主轴和一个交叉轴。默认情况下，主轴是水平方向，交叉轴是垂直方向。可以使用flex-direction属性更改主轴方向。
flex-direction 决定 Flex 项目的排列方 ...`,l:"frontEnd/css3/base/flex.html#主轴和交叉轴",a:"主轴和交叉轴"},"66.3":{t:"主轴对齐与交叉轴对齐",p:`可以使用justify-content属性控制主轴上的对齐方式，align-items属性控制交叉轴上的对齐方式。
justify-content 定义 Flex 项目在主轴上的对齐方式：

flex ...`,l:"frontEnd/css3/base/flex.html#主轴对齐与交叉轴对齐",a:"主轴对齐与交叉轴对齐"},"66.4":{t:"换行与排列",p:`默认情况下，Flex 项目会在一行中排列，如果项目超出了容器的宽度，它们会缩小以适应。可以使用flex-wrap属性来控制项目是否换行。
flex-wrap 指定 Flex 项目是否换行。

nowr ...`,l:"frontEnd/css3/base/flex.html#换行与排列",a:"换行与排列"},"66.5":{t:"flex-flow",p:`是flex-direction和flex-wrap的缩写。
.container {
  display: flex;
  flex-flow: row wrap; /* 水平排列，允许换行 */
} ...`,l:"frontEnd/css3/base/flex.html#flex-flow",a:"flex-flow"},"66.6":{t:"弹性增长与缩小",p:`
使用flex-grow属性可以控制项目在剩余空间中的放大比例
使用flex-shrink属性可以控制项目在空间不足时的缩小比例。

.item {
  flex-grow: 1; /* 弹性增长因子 ...`,l:"frontEnd/css3/base/flex.html#弹性增长与缩小",a:"弹性增长与缩小"},"66.7":{t:"弹性基准值",p:`flex-basis属性定义了项目的基准尺寸，如果没有设置宽度或高度，则会参考该值进行布局：
.item {
  flex-basis: 200px; /* 项目的基准宽度为200像素 */
}

`,l:"frontEnd/css3/base/flex.html#弹性基准值",a:"弹性基准值"},"66.8":{t:"嵌套 Flex 容器",p:`在 Flex 项目内部可以再创建一个新的 Flex 容器，嵌套的 Flex 容器有自己的主轴和交叉轴：
.container {
  display: flex;
  .inner-container ...`,l:"frontEnd/css3/base/flex.html#嵌套-flex-容器",a:"嵌套-flex-容器"},"66.9":{t:"多行对齐",p:`在多行 Flex 容器中，可以使用align-content属性控制交叉轴上多行的对齐方式。
align-content定义多行 Flex 项目在交叉轴上的对齐方式：

flex-start：多行项目 ...`,l:"frontEnd/css3/base/flex.html#多行对齐",a:"多行对齐"},"66.10":{t:"实现常见布局需求",p:`Flex 布局非常适合实现常见的网页布局需求，例如：


居中对齐：通过justify-content和align-items属性实现水平和垂直居中对齐。


两端对齐：使用justify-conte ...`,l:"frontEnd/css3/base/flex.html#实现常见布局需求",a:"实现常见布局需求"},"67.0":{t:"# Grid 布局：现代网页布局的终极解决方案",p:"",l:"frontEnd/css3/base/grid.html",a:"grid-布局-现代网页布局的终极解决方案"},"67.1":{t:"1. 理解 Grid 布局",p:"Grid 布局是一种二维布局模型，可以将网页划分为网格，其中包含了行（rows）和列（columns）。通过将网格容器（Grid Container）分割为网格单元格（Grid Cells），开发者可 ...",l:"frontEnd/css3/base/grid.html#_1-理解-grid-布局",a:"_1-理解-grid-布局"},"67.2":{t:"1.1 网格容器与网格项",p:`要使用 Grid 布局，首先需要将一个 HTML 元素定义为网格容器。我们可以通过设置 display: grid; 来实现：
.grid-container {
  display: grid;
} ...`,l:"frontEnd/css3/base/grid.html#_1-1-网格容器与网格项",a:"_1-1-网格容器与网格项"},"67.3":{t:"1.2 行与列",p:"Grid 布局的核心是行和列，通过定义网格的行和列，我们可以创造出复杂的网页布局。在网格容器中，通过 grid-template-columns 和 grid-template-rows 属性来定义列 ...",l:"frontEnd/css3/base/grid.html#_1-2-行与列",a:"_1-2-行与列"},"67.4":{t:"1.3 网格线与网格跨度",p:`在 Grid 布局中，网格线（Grid Lines）是定义网格单元格边界的线条。水平的网格线定义了行，而垂直的网格线定义了列。我们可以通过指定网格线的名称或索引来定位网格项。
网格跨度（Grid Sp ...`,l:"frontEnd/css3/base/grid.html#_1-3-网格线与网格跨度",a:"_1-3-网格线与网格跨度"},"67.5":{t:"2. Grid 布局的属性详解",p:`Grid 布局提供了一系列强大的属性，用于更精确地控制网页布局。以下是一些常用的 Grid 属性：
`,l:"frontEnd/css3/base/grid.html#_2-grid-布局的属性详解",a:"_2-grid-布局的属性详解"},"67.6":{t:"2.1 `grid-template-columns` 和 `grid-template-rows`",p:"grid-template-columns 和 grid-template-rows 用于定义网格的列和行的大小和结构。可以指定固定大小（如像素、百分比等），也可以使用 fr 单位表示可用空间的比例分 ...",l:"frontEnd/css3/base/grid.html#_2-1-grid-template-columns-和-grid-template-rows",a:"_2-1-grid-template-columns-和-grid-template-rows"},"67.7":{t:"2.2 `grid-template-areas`",p:`grid-template-areas 允许通过指定网格区域的名称来创建更具语义的布局。通过在网格容器中使用网格区域名称，而不是使用行和列属性，可以更清晰地定义布局结构。
.grid-containe ...`,l:"frontEnd/css3/base/grid.html#_2-2-grid-template-areas",a:"_2-2-grid-template-areas"},"67.8":{t:"2.3 `grid-template`",p:"grid-template 是 grid-template-columns、grid-template-rows 和 grid-template-areas 的缩写属性。可以通过一个属性同时定义列、行 ...",l:"frontEnd/css3/base/grid.html#_2-3-grid-template",a:"_2-3-grid-template"},"67.9":{t:"2.4 `grid-gap`",p:`grid-gap 定义网格项之间的间隔（行和列之间的间距）。可以使用两个值表示行和列的间隔。
.grid-container {
  display: grid;
  grid-gap: 10px 2 ...`,l:"frontEnd/css3/base/grid.html#_2-4-grid-gap",a:"_2-4-grid-gap"},"67.10":{t:"2.5 `grid-column-gap` 和 `grid-row-gap`",p:`grid-column-gap 和 grid-row-gap 分别定义网格列和行之间的间隔。与 grid-gap 类似，但允许分别指定列和行的间隔。
.grid-container {
  displ ...`,l:"frontEnd/css3/base/grid.html#_2-5-grid-column-gap-和-grid-row-gap",a:"_2-5-grid-column-gap-和-grid-row-gap"},"67.11":{t:"2.6 `grid-auto-columns` 和 `grid-auto-rows`",p:`grid-auto-columns 和 grid-auto-rows 定义了当网格容器中的网格项目无法放入先前定义的网格轨道时，自动创建的额外列和行的大小。可以指定固定大小或使用 fr 单位。
.gr ...`,l:"frontEnd/css3/base/grid.html#_2-6-grid-auto-columns-和-grid-auto-rows",a:"_2-6-grid-auto-columns-和-grid-auto-rows"},"67.12":{t:"2.7 `grid-auto-flow`",p:`grid-auto-flow 定义了当网格项目无法放入先前定义的网格轨道时，如何自动创建额外的网格项目。默认值是 row，表示按照行进行放置，也可以设置为 column。
.grid-containe ...`,l:"frontEnd/css3/base/grid.html#_2-7-grid-auto-flow",a:"_2-7-grid-auto-flow"},"67.13":{t:"2.8 `justify-items` 和 `align-items`",p:`justify-items 和 align-items 用于在网格项目中定义对齐方式。justify-items 控制项目在列轴上的对齐方式，align-items 控制项目在行轴上的对齐方式。
.g ...`,l:"frontEnd/css3/base/grid.html#_2-8-justify-items-和-align-items",a:"_2-8-justify-items-和-align-items"},"67.14":{t:"2.9 `justify-content` 和 `align-content`",p:"justify-content 和 align-content 用于定义网格项目在网格容器内部的对齐方式。justify-content 控制网格项目在列轴上的对齐方式，align-content 控 ...",l:"frontEnd/css3/base/grid.html#_2-9-justify-content-和-align-content",a:"_2-9-justify-content-和-align-content"},"67.15":{t:"2.10 `justify-self` 和 `align-self`",p:"justify-self 和 align-self 用于定义单个网格项目自身在网格单元格中的对齐方式。justify-self 控制项目在列轴上的对齐方式，align-self 控制项目在行轴上的对齐 ...",l:"frontEnd/css3/base/grid.html#_2-10-justify-self-和-align-self",a:"_2-10-justify-self-和-align-self"},"67.16":{t:"2.11 `grid-column` 和 `grid-row`",p:`grid-column 和 grid-row 用于将网格项目放置在指定的列和行位置。可以使用数字、span 关键字、网格线名称或 auto 值来指定位置。
.grid-item {
  grid-co ...`,l:"frontEnd/css3/base/grid.html#_2-11-grid-column-和-grid-row",a:"_2-11-grid-column-和-grid-row"},"67.17":{t:"3. 创建网格布局",p:`使用 Grid 布局，我们可以创建灵活且复杂的网页布局。了解如何创建网格布局对于掌握 Grid 布局至关重要。
`,l:"frontEnd/css3/base/grid.html#_3-创建网格布局",a:"_3-创建网格布局"},"67.18":{t:"3.1 网格轨道的大小和增长",p:`网格轨道（Grid Track）是相邻网格线之间的空间，包括行轨道和列轨道。我们可以通过设置网格轨道的大小和增长方式来控制网格布局。
.grid-container {
  display: grid ...`,l:"frontEnd/css3/base/grid.html#_3-1-网格轨道的大小和增长",a:"_3-1-网格轨道的大小和增长"},"67.19":{t:"3.2 网格模板的定义",p:`通过使用网格模板（Grid Template），我们可以更加直观地定义网格布局，使得布局结构更加清晰。
.grid-container {
  display: grid;
  grid-templa ...`,l:"frontEnd/css3/base/grid.html#_3-2-网格模板的定义",a:"_3-2-网格模板的定义"},"67.20":{t:"3.3 响应式设计与媒体查询",p:`Grid 布局与响应式设计完美结合，通过使用媒体查询（Media Queries），我们可以在不同的屏幕尺寸和设备上应用不同的网格布局。
.grid-container {
  display: gr ...`,l:"frontEnd/css3/base/grid.html#_3-3-响应式设计与媒体查询",a:"_3-3-响应式设计与媒体查询"},"67.21":{t:"4. Grid 布局的实际应用",p:`Grid 布局在实际应用中非常强大，可以用于创建各种复杂的网页布局。
`,l:"frontEnd/css3/base/grid.html#_4-grid-布局的实际应用",a:"_4-grid-布局的实际应用"},"67.22":{t:"4.1 简单网页布局",p:`Grid 布局可以用于创建简单的网页布局，如标题、导航栏和内容区域。
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head ...`,l:"frontEnd/css3/base/grid.html#_4-1-简单网页布局",a:"_4-1-简单网页布局"},"67.23":{t:"4.2 复杂网页布局",p:`Grid 布局可以应用于创建复杂的网页布局，如新闻网站的首页布局。
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head& ...`,l:"frontEnd/css3/base/grid.html#_4-2-复杂网页布局",a:"_4-2-复杂网页布局"},"67.24":{t:"4.3 布局的嵌套与组合",p:`Grid 布局可以嵌套使用，从而创建更加复杂和多样化的布局。
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt; ...`,l:"frontEnd/css3/base/grid.html#_4-3-布局的嵌套与组合",a:"_4-3-布局的嵌套与组合"},"67.25":{t:"4.4 网格的动态调整",p:`Grid 布局的一个重要特点是网格项目的动态调整。网格项可以根据内容的大小自动调整，也可以通过调整网格容器的大小来实现动态布局。
&lt;!DOCTYPE html&gt;
&lt;html lang ...`,l:"frontEnd/css3/base/grid.html#_4-4-网格的动态调整",a:"_4-4-网格的动态调整"},"67.26":{t:"5. Grid 布局与 Flexbox 的比较",p:`Grid 布局和 Flexbox 布局是 CSS 中两种常用的布局模型。它们分别适用于不同的布局需求，并可以结合使用以实现复杂的布局。
`,l:"frontEnd/css3/base/grid.html#_5-grid-布局与-flexbox-的比较",a:"_5-grid-布局与-flexbox-的比较"},"67.27":{t:"5.1 适用场景",p:`
Grid 布局：适用于创建二维布局，即同时控制行和列的布局。Grid 布局适用于复杂的网页布局，如主页布局、产品展示页面等。
Flexbox 布局：适用于单一方向的布局，即只控制主轴或交叉轴的布局。 ...`,l:"frontEnd/css3/base/grid.html#_5-1-适用场景",a:"_5-1-适用场景"},"67.28":{t:"5.2 布局的差异与共同点",p:`

Grid 布局：可以实现更复杂的布局结构，支持二维布局，可以精确控制网格项的位置和跨度，支持网格区域的命名，更具语义性。


Flexbox 布局：适用于一维布局，支持在主轴上对齐网格项，支持网格 ...`,l:"frontEnd/css3/base/grid.html#_5-2-布局的差异与共同点",a:"_5-2-布局的差异与共同点"},"67.29":{t:"6. 常见问题与最佳实践",p:`在使用 Grid 布局时，我们可能会遇到一些常见问题，以下是一些最佳实践和优化建议：
`,l:"frontEnd/css3/base/grid.html#_6-常见问题与最佳实践",a:"_6-常见问题与最佳实践"},"67.30":{t:"6.1 网格项目的排序与定位",p:`在 Grid 布局中，网格项的顺序并不一定与它们在 HTML 中的顺序一致。可以使用 order 属性来改变网格项的顺序。
.grid-item:nth-child(3) {
  order: 1;  ...`,l:"frontEnd/css3/base/grid.html#_6-1-网格项目的排序与定位",a:"_6-1-网格项目的排序与定位"},"67.31":{t:"6.2 跨浏览器兼容性",p:`虽然 Grid 布局在现代浏览器中得到了很好的支持，但在旧版本的浏览器中可能存在兼容性问题。为了确保网页在不同浏览器中正常显示，可以使用 CSS 前缀或回退方案。
`,l:"frontEnd/css3/base/grid.html#_6-2-跨浏览器兼容性",a:"_6-2-跨浏览器兼容性"},"67.32":{t:"6.3 性能考虑",p:"尽管 Grid 布局强大，但在某些情况下可能会对性能产生一定影响。当网页中包含大量网格项和复杂的布局时，可能会导致渲染性能下降。在使用 Grid 布局时，建议合理控制网格项的数量和布局复杂度，以优化网 ...",l:"frontEnd/css3/base/grid.html#_6-3-性能考虑",a:"_6-3-性能考虑"},"67.33":{t:"6.4 最佳实践与优化建议",p:`
使用网格模板（grid-template）和网格区域（grid-template-areas）来定义布局，以提高代码的可读性和维护性。
嵌套使用 Grid 布局，实现更复杂的布局需求。
结合 Fle ...`,l:"frontEnd/css3/base/grid.html#_6-4-最佳实践与优化建议",a:"_6-4-最佳实践与优化建议"},"68.0":{t:"# 选择器优先级",p:`一般情况下，选择器的优先级为

!important 行内 &gt; ID 选择器 &gt; 类选择器 &gt; 元素选择器 &gt; 通配选择器
相同级别的选择器，显示最后面的样式。

`,l:"frontEnd/css3/base/选择器优先级.html",a:"选择器优先级"},"68.1":{t:"CSS 权重",p:`::: tip 详细描述

计算方式：每个选择器，都可以算出一组权重，格式为（a,b,c)


格式: (a, b, c)

a: ID 选择器的个数
b: 类、伪类、属性 选择器的个数
c: 元素、 ...`,l:"frontEnd/css3/base/选择器优先级.html#css-权重",a:"css-权重"},"69.0":{t:"# CSS 水平垂直居中",p:"",l:"frontEnd/css3/tricks/center.html",a:"css-水平垂直居中"},"69.1":{t:"行内元素",p:`
使用 line-height

&lt;div class=&quot;container&quot;&gt;
  &lt;span&gt;123&lt;/span&gt;
&lt;/div&gt; ...`,l:"frontEnd/css3/tricks/center.html#行内元素",a:"行内元素"},"69.2":{t:"块级元素",p:`&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;
&lt;/div&gt; ...`,l:"frontEnd/css3/tricks/center.html#块级元素",a:"块级元素"},"69.3":{t:"使用 margin",p:`
父元素使用 display: flex

.container {
  display: flex;
  height: 100vh;
}

.box {
  width: 400px;
  hei ...`,l:"frontEnd/css3/tricks/center.html#使用-margin",a:"使用-margin"},"69.4":{t:"使用定位",p:"",l:"frontEnd/css3/tricks/center.html#使用定位",a:"使用定位"},"69.5":{t:"定宽高",p:`.box {
  width: 400px;
  height: 200px;
  background: skyblue;

  position: absolute;
  left: 50%;
  ...`,l:"frontEnd/css3/tricks/center.html#定宽高",a:"定宽高"},"69.6":{t:"不定宽高",p:`
使用 transform

.box {
  width: 400px;
  height: 200px;
  background: skyblue;

  position: absolute; ...`,l:"frontEnd/css3/tricks/center.html#不定宽高",a:"不定宽高"},"69.7":{t:"使用 Flex 布局",p:`.container {
  display: flex;
  justify-content: center; /* 水平居中 */
  align-items: center; /* 垂直居中 * ...`,l:"frontEnd/css3/tricks/center.html#使用-flex-布局",a:"使用-flex-布局"},"69.8":{t:"使用 Grid 布局",p:`.container {
  display: grid;
  place-content: center;
}

`,l:"frontEnd/css3/tricks/center.html#使用-grid-布局",a:"使用-grid-布局"},"70.0":{t:"# CSS 文本溢出隐藏",p:`&lt;div class=&quot;content&quot;&gt;12333333333333333333333333&lt;/div&gt;

.content {
  width: 100 ...`,l:"frontEnd/css3/tricks/ellipsis.html",a:"css-文本溢出隐藏"},"70.1":{t:"单行溢出隐藏",p:`.content {
  width: 100px; /* 1.设置元素的宽度 */
  border: 1px solid #000;
  white-space: nowrap; /* 2.不换行 ...`,l:"frontEnd/css3/tricks/ellipsis.html#单行溢出隐藏",a:"单行溢出隐藏"},"70.2":{t:"多行溢出隐藏-webkit-内核",p:`&lt;div class=&quot;text&quot;&gt;
  这里是多行文本内容，这里是多行文本内容，这里是多行文本内容，这里是多行文本内容，这里是多行文本内容，这里是多行文本内容，这里是 ...`,l:"frontEnd/css3/tricks/ellipsis.html#多行溢出隐藏-webkit-内核",a:"多行溢出隐藏-webkit-内核"},"70.3":{t:"多行溢出隐藏 兼容较好",p:`.text {
  /* 1.限定宽度 */
  width: 400px;
  border: solid;
  margin: auto;
  /* 2.限定高度以及行高，并且行高与高度要成比例  ...`,l:"frontEnd/css3/tricks/ellipsis.html#多行溢出隐藏-兼容较好",a:"多行溢出隐藏-兼容较好"},"71.0":{t:"# 滚动条样式",p:`/* 滚动条 */
::-webkit-scrollbar {
  /* 纵向 */
  width: 8px;
  /* 横向 */
  height: 8px;
  background-colo ...`,l:"frontEnd/css3/tricks/scrollbar.html",a:"滚动条样式"},"72.0":{t:"# CSS 绘制三角形",p:"",l:"frontEnd/css3/tricks/triangle.html",a:"css-绘制三角形"},"72.1":{t:"方法 1：使用边框",p:`/* 朝上的三角形 */
.arrow-up {
  width: 0;
  height: 0;
  border-left: 5px solid transparent;
  border-rig ...`,l:"frontEnd/css3/tricks/triangle.html#方法-1-使用边框",a:"方法-1-使用边框"},"72.2":{t:"方法 2：使用 clip-path 属性",p:`.content {
  width: 175px;
  height: 175px;
  margin: auto;
  object-fit: cover;
  background-image: ...`,l:"frontEnd/css3/tricks/triangle.html#方法-2-使用-clip-path-属性",a:"方法-2-使用-clip-path-属性"},"73.0":{t:"# html5 音视频标签",p:`音视频标签中的资源除了可以用 src 属性来指定外，还可以用 source 标签，而且可以指定多个，可以用来解决某些兼容问题。
\`\`\`html

&lt;h2&gt;音频示例&lt;/h2&gt;
& ...`,l:"frontEnd/html5/base/audio_video.html",a:"html5-音视频标签"},"73.1":{t:"音视频频格式的 MIME 类型",p:"",l:"frontEnd/html5/base/audio_video.html#音视频频格式的-mime-类型",a:"音视频频格式的-mime-类型"},"73.2":{t:"音频格式",p:`


Format
MIME-type




MP3
audio/mpeg


Ogg
audio/ogg


Wav
audio/wav



`,l:"frontEnd/html5/base/audio_video.html#音频格式",a:"音频格式"},"73.3":{t:"视频格式",p:`


格式
MIME-type




MP4
video/mp4


WebM
video/webm


Ogg
video/ogg



`,l:"frontEnd/html5/base/audio_video.html#视频格式",a:"视频格式"},"73.4":{t:"音视频标签描述",p:"",l:"frontEnd/html5/base/audio_video.html#音视频标签描述",a:"音视频标签描述"},"73.5":{t:"HTML5 Audio 标签",p:`


标签
描述




&lt;audio&gt;
定义了声音内容


&lt;source&gt;
规定了多媒体资源, 可以是多个，在 &lt;video&gt; 与 &lt;audio&gt;标 ...`,l:"frontEnd/html5/base/audio_video.html#html5-audio-标签",a:"html5-audio-标签"},"73.6":{t:"HTML5 Video 标签",p:`| 标签 | 描述 |
|&lt;video&gt; |定义一个视频|
|&lt;source&gt;| 定义多种媒体资源,比如 &lt;video&gt; 和&lt;audio&gt;|
|&lt; ...`,l:"frontEnd/html5/base/audio_video.html#html5-video-标签",a:"html5-video-标签"},"73.7":{t:"`<video>`标签的属性",p:`


属性
描述




src
要播放的视频的 URL


width/height
视频显示区域的宽高


controls
用户控制界面


poster
视频封面


autoplay
自动播 ...`,l:"frontEnd/html5/base/audio_video.html#video-标签的属性",a:"video-标签的属性"},"73.8":{t:"音视频对象的方法",p:`


方法名
作用




play()
播放


psuse()
暂停


load()
重新加载



`,l:"frontEnd/html5/base/audio_video.html#音视频对象的方法",a:"音视频对象的方法"},"73.9":{t:"代码实例",p:"",l:"frontEnd/html5/base/audio_video.html#代码实例",a:"代码实例"},"73.10":{t:"audio 音频",p:`&lt;audio controls&gt;
  &lt;source src=&quot;https://www.runoob.com/try/demo_source/horse.ogg&quot; ...`,l:"frontEnd/html5/base/audio_video.html#audio-音频",a:"audio-音频"},"73.11":{t:"video 视频",p:`&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;button onclick=&quot;playPause()&quot;&gt;播放/暂 ...`,l:"frontEnd/html5/base/audio_video.html#video-视频",a:"video-视频"},"74.0":{t:"# HTML - 超文本标记语言",p:`HTML（HyperText Markup Language）是一种用于创建网页和网页应用程序的标记语言。它通过使用一系列标签和属性来描述网页的结构和内容，使得网页可以在浏览器中正确显示和呈现。
`,l:"frontEnd/html5/base/index.html",a:"html-超文本标记语言"},"74.1":{t:"HTML 的基本结构",p:`HTML 文档由一系列嵌套的 HTML 标签组成。一个基本的 HTML 文档通常包含以下结构：
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
   ...`,l:"frontEnd/html5/base/index.html#html-的基本结构",a:"html-的基本结构"},"74.2":{t:"HTML 标签和元素",p:"HTML 标签用于定义网页的结构和内容，它们由尖括号包围。标签通常成对出现，包含开始标签和结束标签，例如&lt;tagname&gt;内容&lt;/tagname&gt;。有些标签是空标签，没有结束标 ...",l:"frontEnd/html5/base/index.html#html-标签和元素",a:"html-标签和元素"},"74.3":{t:"HTML5 的新特性",p:"HTML5 引入了许多新特性，如语义化标签（&lt;header&gt;、&lt;footer&gt;、&lt;nav&gt;、&lt;article&gt;等）、多媒体支持（&lt;video&gt ...",l:"frontEnd/html5/base/index.html#html5-的新特性",a:"html5-的新特性"},"74.4":{t:"实践和进阶",p:`学习 HTML 最重要的是通过实践来加深理解。创建简单的网页、布局、添加样式和图像，然后逐渐增加复杂性，学习如何使用 CSS 和 JavaScript 与 HTML 结合，从而实现更丰富的用户体验。
 ...`,l:"frontEnd/html5/base/index.html#实践和进阶",a:"实践和进阶"},"74.5":{t:"Github Alert Style 测试",p:`
[!TIP] xxx
提示


[!NOTE] Nota bene
The custom title will replace the regular title.


[!TIP] xxx
Jus ...`,l:"frontEnd/html5/base/index.html#github-alert-style-测试",a:"github-alert-style-测试"},"74.6":{t:"折叠的写法",p:`::: details Notice 带折叠的示例

Rollup and esbuild do not support using enforce to control the order of p ...`,l:"frontEnd/html5/base/index.html#折叠的写法",a:"折叠的写法"},"75.0":{t:"# 常用标签及用法",p:`当描述 HTML 标签时，代码块会被渲染成 HTML 标记，为了避免这种情况，我将在每个代码示例中添加特殊字符，以确保它们不会被渲染。请在复制代码时将特殊字符删除。
`,l:"frontEnd/html5/base/label.html",a:"常用标签及用法"},"75.1":{t:"标题标签 `<h1>` 到 `<h6>`",p:`&lt;h1&gt;这是h1级别的标题&lt;/h1&gt;
&lt;h2&gt;这是h2级别的标题&lt;/h2&gt;
&lt;h3&gt;这是h3级别的标题&lt;/h3&gt;
&lt;h4& ...`,l:"frontEnd/html5/base/label.html#标题标签-h1-到-h6",a:"标题标签-h1-到-h6"},"75.2":{t:"段落标签 `<p>`",p:`&lt;p&gt;这是一个段落文本。&lt;/p&gt;

`,l:"frontEnd/html5/base/label.html#段落标签-p",a:"段落标签-p"},"75.3":{t:"超链接标签 `<a>`",p:`&lt;a href=&quot;https://www.example.com&quot;&gt;点击这里跳转到示例网站&lt;/a&gt;

`,l:"frontEnd/html5/base/label.html#超链接标签-a",a:"超链接标签-a"},"75.4":{t:"图像标签 `<img>`",p:`&lt;img src=&quot;example.jpg&quot; alt=&quot;示例图片&quot; /&gt;

`,l:"frontEnd/html5/base/label.html#图像标签-img",a:"图像标签-img"},"75.5":{t:"无序列表和列表项标签 `<ul>` 和 `<li>`",p:`&lt;ul&gt;
  &lt;li&gt;列表项1&lt;/li&gt;
  &lt;li&gt;列表项2&lt;/li&gt;
  &lt;li&gt;列表项3&lt;/li&gt;
&lt;/ ...`,l:"frontEnd/html5/base/label.html#无序列表和列表项标签-ul-和-li",a:"无序列表和列表项标签-ul-和-li"},"75.6":{t:"有序列表和列表项标签 `<ol>` 和 `<li>`",p:`&lt;ol&gt;
  &lt;li&gt;列表项1&lt;/li&gt;
  &lt;li&gt;列表项2&lt;/li&gt;
  &lt;li&gt;列表项3&lt;/li&gt;
&lt;/ ...`,l:"frontEnd/html5/base/label.html#有序列表和列表项标签-ol-和-li",a:"有序列表和列表项标签-ol-和-li"},"75.7":{t:"容器标签 `<div>`",p:`&lt;div&gt;
  这是一个div容器。
  &lt;p&gt;包含一段文本。&lt;/p&gt;
&lt;/div&gt;

`,l:"frontEnd/html5/base/label.html#容器标签-div",a:"容器标签-div"},"75.8":{t:"内联容器标签 `<span>`",p:`这是一个
&lt;span style=&quot;color: blue;&quot;&gt;内联容器&lt;/span&gt;
标签。

`,l:"frontEnd/html5/base/label.html#内联容器标签-span",a:"内联容器标签-span"},"75.9":{t:"表格标签 `<table>`、`<tr>`、`<th>` 和 `<td>`",p:`&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;表头1&lt;/th&gt;
    &lt;th&gt;表头2&lt;/th&gt;
  &lt;/tr&gt;
  ...`,l:"frontEnd/html5/base/label.html#表格标签-table-、-tr-、-th-和-td",a:"表格标签-table-、-tr-、-th-和-td"},"75.10":{t:"换行标签 `<br>`",p:`这是一行文本。
&lt;br /&gt;
这是另一行文本。

`,l:"frontEnd/html5/base/label.html#换行标签-br",a:"换行标签-br"},"75.11":{t:"输入标签 `<input>`",p:`&lt;input type=&quot;text&quot; placeholder=&quot;输入文本&quot; /&gt;
&lt;input type=&quot;checkbox&quo ...`,l:"frontEnd/html5/base/label.html#输入标签-input",a:"输入标签-input"},"75.12":{t:"按钮标签 `<button>`",p:`&lt;button&gt;点击我&lt;/button&gt;

`,l:"frontEnd/html5/base/label.html#按钮标签-button",a:"按钮标签-button"},"75.13":{t:"表单标签 `<form>`",p:`&lt;form action=&quot;/submit&quot; method=&quot;post&quot;&gt;
  &lt;label for=&quot;username&quot; ...`,l:"frontEnd/html5/base/label.html#表单标签-form",a:"表单标签-form"},"75.14":{t:"标题、脚注和导航标签 `<header>`、`<footer>` 和 `<nav>`",p:`&lt;header&gt;
  &lt;h1&gt;网站标题&lt;/h1&gt;
  &lt;nav&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=& ...`,l:"frontEnd/html5/base/label.html#标题、脚注和导航标签-header-、-footer-和-nav",a:"标题、脚注和导航标签-header-、-footer-和-nav"},"75.15":{t:"多媒体标签 `<video>` 和 `<audio>`",p:`&lt;video src=&quot;example.mp4&quot; controls&gt;您的浏览器不支持视频播放。&lt;/video&gt;

&lt;audio src=&quot;e ...`,l:"frontEnd/html5/base/label.html#多媒体标签-video-和-audio",a:"多媒体标签-video-和-audio"},"76.0":{t:"# HTML 标签",p:`HTML 标签用于定义网页的结构和内容，它们由尖括号包围。HTML 标签可以分为两类：块级标签和内联标签。
`,l:"frontEnd/html5/base/tag.html",a:"html-标签"},"76.1":{t:"块级标签（Block-level Elements）",p:`块级标签通常用于创建页面的大型结构和组织，它们会单独占据一行，并且在前后都会产生换行。常见的块级标签包括：

&lt;div&gt;：最通用的容器标签，用于将一组元素包裹在一起，方便样式和布局控制。
 ...`,l:"frontEnd/html5/base/tag.html#块级标签-block-level-elements",a:"块级标签-block-level-elements"},"76.2":{t:"内联标签（Inline Elements）",p:`内联标签用于包裹文本的一部分，它们不会独占一行，而是按照文本的自然流动排列。常见的内联标签包括：

&lt;a&gt;：锚链接标签，用于创建超链接到其他网页或文档。
&lt;span&gt;：内联容器 ...`,l:"frontEnd/html5/base/tag.html#内联标签-inline-elements",a:"内联标签-inline-elements"},"76.3":{t:"嵌套标签",p:`HTML 标签可以嵌套在其他标签中，形成树状的结构。例如，可以将一段文本包裹在&lt;p&gt;标签中，然后在&lt;div&gt;标签中包裹这个&lt;p&gt;标签，从而形成嵌套的关系。
&lt; ...`,l:"frontEnd/html5/base/tag.html#嵌套标签",a:"嵌套标签"},"76.4":{t:"属性",p:`HTML 标签可以包含属性，属性用于为标签提供额外的信息或设置。属性以键值对的形式出现，放在标签的开始标签中。例如，&lt;a&gt;标签用href属性来指定链接地址：
&lt;a href=&quo ...`,l:"frontEnd/html5/base/tag.html#属性",a:"属性"},"76.5":{t:"自定义标签",p:`HTML5 允许开发者创建自定义的标签，这些标签可能在 HTML 规范中没有定义，但可以在特定的应用中使用。自定义标签应以data-为前缀，避免与未来 HTML 版本中的新标签冲突。
例如：
&lt; ...`,l:"frontEnd/html5/base/tag.html#自定义标签",a:"自定义标签"},"77.0":{t:"# input",p:"",l:"frontEnd/html5/problem/input.html",a:"input"},"77.1":{t:'input type="password" 浏览器自动填充账号和密码',p:"&lt;a-input type=&quot;password&quot; placeholder=&quot;请输入登录密码&quot; v-model=&quot;model.password&q ...",l:"frontEnd/html5/problem/input.html#input-type-password-浏览器自动填充账号和密码",a:"input-type-password-浏览器自动填充账号和密码"},"78.0":{t:"# React JSX 语法 - 构建动态 UI 的魔法",p:"",l:"frontEnd/react/JSX.html",a:"react-jsx-语法-构建动态-ui-的魔法"},"78.1":{t:"简介",p:"JSX（JavaScript XML）是 React 的一种特殊语法扩展，它允许我们在 JavaScript 代码中编写类似于 HTML 的标记，从而使得构建动态 UI 变得更加直观和简洁。JSX 在 ...",l:"frontEnd/react/JSX.html#简介",a:"简介"},"78.2":{t:"JSX 原理",p:"JSX 并不是直接由浏览器理解的语法，而是通过 Babel 等工具进行转换后，再变成普通的 JavaScript 代码。这个转换过程将 JSX 转换为React.createElement()函数的调 ...",l:"frontEnd/react/JSX.html#jsx-原理",a:"jsx-原理"},"78.3":{t:"基本语法规则",p:"",l:"frontEnd/react/JSX.html#基本语法规则",a:"基本语法规则"},"78.4":{t:"1. 标签",p:`在 JSX 中，我们可以像写 HTML 标签一样写 React 组件的标签。标签可以是 HTML 标签，也可以是自定义的 React 组件。
const element = &lt;div&gt;JS ...`,l:"frontEnd/react/JSX.html#_1-标签",a:"_1-标签"},"78.5":{t:"2. 属性",p:`在 JSX 中，可以通过属性来传递数据给组件。属性的写法与 HTML 标签类似，使用key=value的形式。
const element = &lt;input type=&quot;text&qu ...`,l:"frontEnd/react/JSX.html#_2-属性",a:"_2-属性"},"78.6":{t:"3. 嵌套",p:`JSX 支持标签的嵌套，可以将多个标签组合在一起形成复杂的 UI 结构。
const element = (
  &lt;div&gt;
    &lt;h1&gt;JSX Syntax&lt;/h1 ...`,l:"frontEnd/react/JSX.html#_3-嵌套",a:"_3-嵌套"},"78.7":{t:"4. 表达式",p:`在 JSX 中，可以在大括号内使用 JavaScript 表达式。这样可以在 UI 中插入动态的内容。
const name = 'John'
const element = &lt;p&gt;Hel ...`,l:"frontEnd/react/JSX.html#_4-表达式",a:"_4-表达式"},"78.8":{t:"5. 注释",p:`JSX 支持在大括号内使用 JavaScript 注释。
const element = (
  &lt;div&gt;
    {/This is a comment/}
    &lt;h1&gt ...`,l:"frontEnd/react/JSX.html#_5-注释",a:"_5-注释"},"78.9":{t:"JSX 中的组件化开发",p:"JSX 在 React 中的最大价值在于支持组件化开发。通过组件化开发，我们可以将 UI 拆分成独立的、可复用的组件，从而使得代码结构更加清晰和易于维护。组件是 React 中最基本的概念之一，也是构 ...",l:"frontEnd/react/JSX.html#jsx-中的组件化开发",a:"jsx-中的组件化开发"},"78.10":{t:"函数组件",p:`函数组件是一种简单的声明式组件，它是一个纯函数，接受一个 props 对象作为参数，并返回一个描述 UI 的 React 元素。
function Welcome(props) {
  return  ...`,l:"frontEnd/react/JSX.html#函数组件",a:"函数组件"},"78.11":{t:"类组件",p:`类组件是一种功能更强大的组件，它是一个 ES6 类，继承自React.Component，并且具有状态和生命周期方法。
class Welcome extends React.Component {
 ...`,l:"frontEnd/react/JSX.html#类组件",a:"类组件"},"78.12":{t:"组件的使用",p:`使用组件时，我们可以像使用 HTML 标签一样使用组件的标签。将属性传递给组件，可以在组件中获取这些属性并进行相应的渲染。
const element = &lt;Welcome name=&quot ...`,l:"frontEnd/react/JSX.html#组件的使用",a:"组件的使用"},"78.13":{t:"JSX 中的条件渲染",p:`JSX 支持条件渲染，即根据条件来决定是否渲染组件或显示不同的内容。可以使用 JavaScript 的条件语句（如 if 和三元表达式）来控制组件的渲染逻辑。
`,l:"frontEnd/react/JSX.html#jsx-中的条件渲染",a:"jsx-中的条件渲染"},"78.14":{t:"使用 if 语句",p:`function Greeting(props) {
  if (props.isLoggedIn) {
    return &lt;h1&gt;Welcome back!&lt;/h1&gt;
  ...`,l:"frontEnd/react/JSX.html#使用-if-语句",a:"使用-if-语句"},"78.15":{t:"使用三元表达式",p:`function Greeting(props) {
  return props.isLoggedIn ? &lt;h1&gt;Welcome back!&lt;/h1&gt; : &lt;h1&g ...`,l:"frontEnd/react/JSX.html#使用三元表达式",a:"使用三元表达式"},"78.16":{t:"JSX 中的列表渲染",p:`在 React 中，我们经常需要渲染数据列表，比如商品列表、评论列表等。JSX 提供了方便的方式来实现列表渲染。
`,l:"frontEnd/react/JSX.html#jsx-中的列表渲染",a:"jsx-中的列表渲染"},"78.17":{t:"使用 map 方法",p:`function ProductList(props) {
  const products = props.products
  return (
    &lt;ul&gt;
      {pro ...`,l:"frontEnd/react/JSX.html#使用-map-方法",a:"使用-map-方法"},"78.18":{t:"JSX 中的表单处理",p:`处理用户输入的表单数据是 Web 应用程序中的常见任务。在 React 中，我们可以通过对表单元素的事件监听和状态更新，来收集用户的输入并实时更新组件的状态。
class FormExample ex ...`,l:"frontEnd/react/JSX.html#jsx-中的表单处理",a:"jsx-中的表单处理"},"78.19":{t:"JSX 中的状态提升",p:`状态提升是一种在 React 中共享状态的技术，允许将共享的状态提升到共同的父组件，实现组件之间的数据共享。
function TemperatureConverter() {
  const [ce ...`,l:"frontEnd/react/JSX.html#jsx-中的状态提升",a:"jsx-中的状态提升"},"78.20":{t:"JSX 中的高阶组件（HOC）",p:`高阶组件（HOC）是一种在 React 中实现组件的复用逻辑的技术。HOC 是一个函数，接受一个组件作为参数，并返回一个新的组件。
function withLogger(WrappedCompone ...`,l:"frontEnd/react/JSX.html#jsx-中的高阶组件-hoc",a:"jsx-中的高阶组件-hoc"},"78.21":{t:"JSX 中的上下文（Context）",p:`React 的上下文允许在组件树中共享数据，而不必通过 props 一层层传递。上下文提供了一种便捷的方式来在组件之间共享数据，尤其对于跨多层级的组件共享数据非常有用。
const ThemeCont ...`,l:"frontEnd/react/JSX.html#jsx-中的上下文-context",a:"jsx-中的上下文-context"},"78.22":{t:"JSX 中的 Hooks",p:`Hooks 是 React 16.8 引入的新特性，用于在函数组件中添加状态、副作用和其他 React 特性。通过 Hooks，我们可以在函数组件中使用类组件的功能，如状态管理、生命周期方法等。
fu ...`,l:"frontEnd/react/JSX.html#jsx-中的-hooks",a:"jsx-中的-hooks"},"79.0":{t:"# React - 用于构建现代 Web 应用程序的 JavaScript 库",p:`
官方网址

`,l:"frontEnd/react/index.html",a:"react-用于构建现代-web-应用程序的-javascript-库"},"79.1":{t:"简介",p:"React 是由 Facebook 开源的 JavaScript 库，用于构建用户界面。它专注于构建高性能、可维护且可复用的 UI 组件，使开发者能够轻松构建交互性的用户界面。React 是单向数据流 ...",l:"frontEnd/react/index.html#简介",a:"简介"},"79.2":{t:"React 的特点",p:"",l:"frontEnd/react/index.html#react-的特点",a:"react-的特点"},"79.3":{t:"1. 组件化开发",p:"React 引入了组件化开发的概念，将复杂的用户界面划分为独立的组件，每个组件具有自己的状态和行为。这种组件化的开发模式使得代码更易于维护、复用和测试。开发者可以将大型应用程序拆分为小的、独立的组件， ...",l:"frontEnd/react/index.html#_1-组件化开发",a:"_1-组件化开发"},"79.4":{t:"2. 虚拟 DOM",p:"React 采用了虚拟 DOM 技术，它在内存中维护了一个虚拟的 DOM 树，用于表示真实 DOM 的结构。当组件的状态发生变化时，React 会通过比较新旧虚拟 DOM 树的差异，找出需要更新的部分 ...",l:"frontEnd/react/index.html#_2-虚拟-dom",a:"_2-虚拟-dom"},"79.5":{t:"3. 单向数据流",p:"React 采用了单向数据流的数据管理模式，即数据只能从父组件流向子组件，子组件无法直接修改父组件的数据。这种单向数据流的模式使得数据流动更加可控，减少了数据的混乱和不一致，从而提高了应用程序的可维护 ...",l:"frontEnd/react/index.html#_3-单向数据流",a:"_3-单向数据流"},"79.6":{t:"4. 生态系统丰富",p:"React 拥有一个庞大的生态系统，有众多优秀的第三方库和工具，可以帮助开发者更高效地构建 Web 应用程序。比如 React Router 用于实现前端路由，Redux 用于管理应用程序的状态，Ax ...",l:"frontEnd/react/index.html#_4-生态系统丰富",a:"_4-生态系统丰富"},"79.7":{t:"核心概念",p:`在学习 React 时，我们需要掌握以下几个核心概念：
`,l:"frontEnd/react/index.html#核心概念",a:"核心概念"},"79.8":{t:"1. 组件（Components）",p:"组件是 React 中最重要的概念之一，它是构建用户界面的基本单元。每个组件封装了特定的功能和状态，可以在其他组件中重复使用。组件可以是函数组件或类组件，函数组件是一种简单的声明式组件，类组件具有更多 ...",l:"frontEnd/react/index.html#_1-组件-components",a:"_1-组件-components"},"79.9":{t:"2. JSX（JavaScript XML）",p:"JSX 是一种类似 HTML 的语法扩展，允许在 JavaScript 代码中编写类似 HTML 的标记。通过 JSX，我们可以以一种更直观的方式描述组件的结构和样式，使得代码更易读和理解。在 Rea ...",l:"frontEnd/react/index.html#_2-jsx-javascript-xml",a:"_2-jsx-javascript-xml"},"79.10":{t:"3. Props（属性）",p:"Props 是 React 中用于组件之间通信的机制。通过 props，父组件可以向子组件传递数据或方法。这种单向数据流的机制使得 React 组件更加可预测和易于维护。在子组件中，我们可以通过 pr ...",l:"frontEnd/react/index.html#_3-props-属性",a:"_3-props-属性"},"79.11":{t:"4. State（状态）",p:"State 是 React 组件内部管理的可变数据。当组件的状态发生变化时，React 会自动重新渲染组件以反映最新的状态。状态是类组件中的一个特殊对象，可以通过 this.state 来访问和更新。 ...",l:"frontEnd/react/index.html#_4-state-状态",a:"_4-state-状态"},"79.12":{t:"5. 生命周期",p:"React 组件具有不同的生命周期阶段，包括组件的挂载、更新和卸载阶段。在这些生命周期方法中，我们可以执行特定的操作，如初始化组件、发送网络请求、清理资源等。生命周期方法允许我们在组件不同阶段执行相应 ...",l:"frontEnd/react/index.html#_5-生命周期",a:"_5-生命周期"},"79.13":{t:"6. 事件处理",p:"React 允许处理用户的交互事件，如点击、输入等，并对其进行响应。通过事件处理函数，我们可以执行特定的操作，如更新组件的状态、发送网络请求、处理用户输入等。在 React 中，事件处理和原生 DOM ...",l:"frontEnd/react/index.html#_6-事件处理",a:"_6-事件处理"},"79.14":{t:"7. 条件渲染",p:`条件渲染是根据条件来决定是否渲染组件或显示不同的内容。通过条件语句（如 if 和三元表达式）来控制组件的渲染逻辑。条件渲染使得我们可以根据不同的情况展示不同的 UI，实现动态和灵活的界面展示。
`,l:"frontEnd/react/index.html#_7-条件渲染",a:"_7-条件渲染"},"79.15":{t:"8. 列表渲染",p:"在 React 中，我们可以使用 map 方法遍历数组，并将数组的每个元素渲染成相应的组件。列表渲染允许动态地渲染多个相同类型的组件，实现列表展示的功能。通过列表渲染，我们可以轻松地展示数据列表，如商 ...",l:"frontEnd/react/index.html#_8-列表渲染",a:"_8-列表渲染"},"79.16":{t:"9. 表单处理",p:"处理用户输入的表单数据是常见的任务。在 React 中，我们可以通过对表单元素的事件监听和状态更新，来收集用户的输入并实时更新组件的状态。React 提供了一些方便的组件来处理表单数据，如 input ...",l:"frontEnd/react/index.html#_9-表单处理",a:"_9-表单处理"},"79.17":{t:"10. 状态提升",p:`状态提升是一种在 React 中共享状态的技术，允许将共享的状态提升到共同的父组件，实现组件之间的数据共享。通过状态提升，我们可以在多个组件之间共享数据和状态，并保持数据的一致性和同步性。
`,l:"frontEnd/react/index.html#_10-状态提升",a:"_10-状态提升"},"79.18":{t:"11. 高阶组件（HOC）",p:"高阶组件是一个函数，用于在 React 中实现组件的复用逻辑。HOC 可以增强组件的功能，使得代码更具可复用性和灵活性。通过 HOC，我们可以将通用的逻辑封装成函数，然后将该函数应用到多个组件中，从而 ...",l:"frontEnd/react/index.html#_11-高阶组件-hoc",a:"_11-高阶组件-hoc"},"79.19":{t:"12. 上下文（Context）",p:"React 的上下文允许在组件树中共享数据，而不必通过 props 一层层传递。上下文提供了一种便捷的方式来在组件之间共享数据，尤其对于跨多层级的组件共享数据非常有用。然而，上下文的使用需要谨慎，避免 ...",l:"frontEnd/react/index.html#_12-上下文-context",a:"_12-上下文-context"},"79.20":{t:"13. Hooks",p:"Hooks 是 React 16.8 引入的新特性，用于在函数组件中添加状态、副作用和其他 React 特性。通过 Hooks，我们可以在函数组件中使用类组件的功能，如状态管理、生命周期方法等，从而使 ...",l:"frontEnd/react/index.html#_13-hooks",a:"_13-hooks"},"79.21":{t:"React 环境搭建",p:`利用 React 来写一个 Hello World
`,l:"frontEnd/react/index.html#react-环境搭建",a:"react-环境搭建"},"79.22":{t:"react.js 和 react-dom.js",p:`为了通过 React 写一个 Hello World 程序，我们需要先安装几个包：


react.js: React 的核心库。这个包，是专门用来创建 React 组件、组件生命周期等。


rea ...`,l:"frontEnd/react/index.html#react-js-和-react-dom-js",a:"react-js-和-react-dom-js"},"79.23":{t:"方式一：本地引入相关的 js 库",p:`入门的时候，我们建议采取方式一。
如果是本地引入的话，可以这样写：
&lt;!-- 引入React相关的js库 --&gt;




如果是通过 CDN 的方式引入的话，可以使用网站 https:// ...`,l:"frontEnd/react/index.html#方式一-本地引入相关的-js-库",a:"方式一-本地引入相关的-js-库"},"79.24":{t:"方式二：脚手架",p:`
使用 vite 创建， 选择 React

npm init vite@latest

main.jsx:
import React from 'react'
import ReactDOM fro ...`,l:"frontEnd/react/index.html#方式二-脚手架",a:"方式二-脚手架"},"80.0":{t:"# React 组件 — 生命周期",p:"React 生命周期是指组件在不同阶段经历的一系列方法调用，这些方法允许我们在特定时间点执行代码，控制组件的行为，并进行必要的操作。理解 React 生命周期对于优化性能、处理副作用以及在开发过程中更 ...",l:"frontEnd/react/lifecycle.html",a:"react-组件-—-生命周期"},"80.1":{t:"生命周期阶段",p:`React 生命周期可以分为三个阶段：组件创建、组件更新和组件销毁。


组件创建阶段：

constructor：组件被创建时调用，用于初始化状态和绑定方法。
static getDerivedSt ...`,l:"frontEnd/react/lifecycle.html#生命周期阶段",a:"生命周期阶段"},"80.2":{t:"组件创建阶段",p:"",l:"frontEnd/react/lifecycle.html#组件创建阶段",a:"组件创建阶段"},"80.3":{t:"constructor",p:`constructor 是组件创建阶段的第一个方法，它在组件实例被创建时调用。在 constructor 中，我们可以初始化组件的状态（state）和绑定方法。
class MyComponent e ...`,l:"frontEnd/react/lifecycle.html#constructor",a:"constructor"},"80.4":{t:"static getDerivedStateFromProps",p:"static getDerivedStateFromProps 是组件创建和更新阶段的一个静态方法，在组件每次渲染之前都会被调用。它接收 props 和 state 作为参数，并返回一个对象来更新 s ...",l:"frontEnd/react/lifecycle.html#static-getderivedstatefromprops",a:"static-getderivedstatefromprops"},"80.5":{t:"render",p:`render 是组件创建阶段的第三个方法，它用于渲染组件的内容。在 render 方法中，我们应该返回一个 React 元素，用于描述组件的 UI 结构。
class MyComponent exte ...`,l:"frontEnd/react/lifecycle.html#render",a:"render"},"80.6":{t:"componentDidMount",p:"componentDidMount 是组件创建阶段的最后一个方法，它在组件挂载到 DOM 后调用。在 componentDidMount 中，我们可以进行一些副作用操作，比如发送网络请求、订阅事件、操 ...",l:"frontEnd/react/lifecycle.html#componentdidmount",a:"componentdidmount"},"80.7":{t:"组件更新阶段",p:"",l:"frontEnd/react/lifecycle.html#组件更新阶段",a:"组件更新阶段"},"80.8":{t:"static getDerivedStateFromProps",p:`在组件更新阶段，static getDerivedStateFromProps 的作用和在组件创建阶段是一样的，用于根据 props 更新 state。
class MyComponent exten ...`,l:"frontEnd/react/lifecycle.html#static-getderivedstatefromprops",a:"static-getderivedstatefromprops"},"80.9":{t:"shouldComponentUpdate",p:"shouldComponentUpdate 是组件更新阶段的第二个方法，它在组件更新之前调用。在 shouldComponentUpdate 中，我们可以根据新的 props 或 state 判断是否 ...",l:"frontEnd/react/lifecycle.html#shouldcomponentupdate",a:"shouldcomponentupdate"},"80.10":{t:"getSnapshotBeforeUpdate",p:"getSnapshotBeforeUpdate 是组件更新阶段的第四个方法，它在 render 之后、更新之前调用。它接收 prevProps 和 prevState 作为参数，并返回一个值，该值将作 ...",l:"frontEnd/react/lifecycle.html#getsnapshotbeforeupdate",a:"getsnapshotbeforeupdate"},"80.11":{t:"componentDidUpdate",p:"componentDidUpdate 是组件更新阶段的最后一个方法，它在组件更新之后调用。在 componentDidUpdate 中，我们可以进行一些副作用操作，比如发送网络请求、订阅事件、操作 D ...",l:"frontEnd/react/lifecycle.html#componentdidupdate",a:"componentdidupdate"},"80.12":{t:"组件销毁阶段",p:"",l:"frontEnd/react/lifecycle.html#组件销毁阶段",a:"组件销毁阶段"},"80.13":{t:"componentWillUnmount",p:"componentWillUnmount 是组件销毁阶段的唯一一个方法，在组件即将被销毁时调用。在 componentWillUnmount 中，我们应该进行一些清理操作，比如取消订阅、清除定时器、释 ...",l:"frontEnd/react/lifecycle.html#componentwillunmount",a:"componentwillunmount"},"81.0":{t:"# React Props（属性）",p:"在 React 中，组件是构建用户界面的基本单位。每个组件可以接收外部传入的数据，这些数据被称为 Props（属性）。Props 允许我们向组件传递信息，使组件能够根据外部数据的变化进行渲染和展示不同 ...",l:"frontEnd/react/props.html",a:"react-props-属性"},"81.1":{t:"什么是 Props？",p:"Props 是 React 中用于向组件传递数据的一种机制。它是“Properties”的缩写，意为属性。每个 React 组件都可以通过 Props 接收数据，这些数据可以来自组件的父组件或者外部环 ...",l:"frontEnd/react/props.html#什么是-props",a:"什么是-props"},"81.2":{t:"Props 的使用",p:"",l:"frontEnd/react/props.html#props-的使用",a:"props-的使用"},"81.3":{t:"1. 传递 Props",p:`在父组件中，可以通过在子组件上设置属性来传递 Props。例如：
// 父组件
class ParentComponent extends React.Component {
  render() { ...`,l:"frontEnd/react/props.html#_1-传递-props",a:"_1-传递-props"},"81.4":{t:"2. 默认 Props",p:`有时候，我们希望在未传递某个 Props 时，组件能够使用一个默认值。这时可以通过设置组件的 defaultProps 来实现。
class MyComponent extends React.Com ...`,l:"frontEnd/react/props.html#_2-默认-props",a:"_2-默认-props"},"81.5":{t:"3. 使用解构赋值简化 Props",p:`在组件中访问 Props 时，可以使用解构赋值来简化代码。
class MyComponent extends React.Component {
  render() {
    const { n ...`,l:"frontEnd/react/props.html#_3-使用解构赋值简化-props",a:"_3-使用解构赋值简化-props"},"81.6":{t:"Props 的值类型",p:`Props 可以接收各种类型的数据，包括字符串、数字、布尔值、数组、对象等。React 组件会根据传递的 Props 的值类型进行相应的渲染。
`,l:"frontEnd/react/props.html#props-的值类型",a:"props-的值类型"},"81.7":{t:"1. 字符串类型",p:`class MyComponent extends React.Component {
  render() {
    return &lt;p&gt;Hello, {this.props.name ...`,l:"frontEnd/react/props.html#_1-字符串类型",a:"_1-字符串类型"},"81.8":{t:"2. 数字类型",p:`class MyComponent extends React.Component {
  render() {
    return &lt;p&gt;Age: {this.props.age}&l ...`,l:"frontEnd/react/props.html#_2-数字类型",a:"_2-数字类型"},"81.9":{t:"3. 布尔值类型",p:`class MyComponent extends React.Component {
  render() {
    return &lt;p&gt;Is Active: {this.props. ...`,l:"frontEnd/react/props.html#_3-布尔值类型",a:"_3-布尔值类型"},"81.10":{t:"4. 数组类型",p:`class MyComponent extends React.Component {
  render() {
    return (
      &lt;ul&gt;
        {this ...`,l:"frontEnd/react/props.html#_4-数组类型",a:"_4-数组类型"},"81.11":{t:"5. 对象类型",p:`class MyComponent extends React.Component {
  render() {
    return (
      &lt;div&gt;
        &lt; ...`,l:"frontEnd/react/props.html#_5-对象类型",a:"_5-对象类型"},"81.12":{t:"Props 的传递规则",p:`在 React 中，Props 的传递是自上而下的，即数据只能从父组件传递到子组件，而不能从子组件传递到父组件或者兄弟组件之间传递。这样的设计有助于保持组件之间的独立性和可预测性。
`,l:"frontEnd/react/props.html#props-的传递规则",a:"props-的传递规则"},"81.13":{t:"Props 的不可变性",p:`在 React 中，Props 是只读的，组件本身无法修改 Props 的值。这样的设计有助于维护组件的数据流向，避免对 Props 进行意外的修改，从而使组件行为更加可预测和稳定。
`,l:"frontEnd/react/props.html#props-的不可变性",a:"props-的不可变性"},"81.14":{t:"Props 验证",p:"为了确保组件接收到正确的 Props，我们可以使用 PropTypes 来对 Props 进行验证。PropTypes 是 React 提供的一种机制，用于对组件的 Props 进行类型检查。在开发过 ...",l:"frontEnd/react/props.html#props-验证",a:"props-验证"},"81.15":{t:"默认 Props",p:`有时候，我们希望在未传递某个 Props 时，组件能够使用一个默认值。这时可以通过设置组件的 defaultProps 来实现。
import PropTypes from 'prop-types'
 ...`,l:"frontEnd/react/props.html#默认-props",a:"默认-props"},"82.0":{t:"# React 路由 - 实现单页应用的导航",p:"",l:"frontEnd/react/router.html",a:"react-路由-实现单页应用的导航"},"82.1":{t:"什么是 React 路由？",p:"React 路由是指在 React 应用中实现页面之间导航的技术。它允许我们在单页应用中切换不同的页面视图，而无需重新加载整个页面。相比传统多页应用，单页应用（Single Page Applicat ...",l:"frontEnd/react/router.html#什么是-react-路由",a:"什么是-react-路由"},"82.2":{t:"React Router 的基本概念",p:"",l:"frontEnd/react/router.html#react-router-的基本概念",a:"react-router-的基本概念"},"82.3":{t:"1. 路由",p:`路由是 React Router 中的核心概念之一。它表示一个特定的 URL 路径和对应的页面组件。当用户访问该路径时，React Router 会渲染对应的页面组件。
React Router 使用 ...`,l:"frontEnd/react/router.html#_1-路由",a:"_1-路由"},"82.4":{t:"2. 嵌套路由",p:`嵌套路由是指在一个页面组件中嵌套另一个页面组件，并且这些页面组件具有各自的 URL 路径。
React Router 允许我们在一个页面组件中使用嵌套的 &lt;Route&gt; 组件，从而实现页面 ...`,l:"frontEnd/react/router.html#_2-嵌套路由",a:"_2-嵌套路由"},"82.5":{t:"3. 路由参数",p:`路由参数允许我们在 URL 路径中传递参数，并将参数传递给页面组件进行处理。例如，我们可以通过路由参数在 URL 中传递一个特定的 ID，然后在页面组件中根据 ID 加载对应的数据。
React Ro ...`,l:"frontEnd/react/router.html#_3-路由参数",a:"_3-路由参数"},"82.6":{t:"4. 路由链接",p:`路由链接是用于在页面中生成导航链接的组件。它允许用户点击链接来切换不同的页面视图，而无需进行页面的完全刷新。
React Router 提供了 &lt;Link&gt; 组件来创建路由链接，通过 to ...`,l:"frontEnd/react/router.html#_4-路由链接",a:"_4-路由链接"},"82.7":{t:"5. 编程式导航",p:`除了使用路由链接进行页面导航外，还可以通过编程式导航的方式实现页面切换。编程式导航允许我们在组件中使用 JavaScript 来手动触发页面的切换。
React Router 提供了 history  ...`,l:"frontEnd/react/router.html#_5-编程式导航",a:"_5-编程式导航"},"82.8":{t:"安装 React Router",p:`要开始使用 React Router，首先需要在项目中安装 React Router 的依赖。可以使用 npm 或 yarn 进行安装：
npm install react-router-dom

或 ...`,l:"frontEnd/react/router.html#安装-react-router",a:"安装-react-router"},"82.9":{t:"使用 React Router",p:`一旦安装了 React Router 的依赖，我们就可以在项目中开始使用它了。以下是使用 React Router 实现导航的基本步骤：
`,l:"frontEnd/react/router.html#使用-react-router",a:"使用-react-router"},"82.10":{t:"1. 创建路由组件",p:`首先，我们需要创建几个页面组件，它们将用于显示不同的页面视图。在 React 中，每个页面都是一个独立的组件，可以使用函数组件或类组件来定义。
// Home.js
import React from ...`,l:"frontEnd/react/router.html#_1-创建路由组件",a:"_1-创建路由组件"},"82.11":{t:"2. 定义路由",p:`接下来，我们需要在应用中定义路由。可以在顶层组件（通常是 App.js）中使用 &lt;Route&gt; 组件来定义路由。
// App.js
import React from 'react'
i ...`,l:"frontEnd/react/router.html#_2-定义路由",a:"_2-定义路由"},"82.12":{t:"3. 渲染页面",p:`最后，在顶层组件中渲染 &lt;Route&gt; 组件，从而实现页面导航。
// index.js
import React from 'react'
import ReactDOM from 'r ...`,l:"frontEnd/react/router.html#_3-渲染页面",a:"_3-渲染页面"},"82.13":{t:"嵌套路由",p:`有时候，我们希望在一个页面中显示其他页面的内容，这就需要使用嵌套路由。React Router 允许我们在一个页面组件中定义嵌套的 &lt;Route&gt; 组件。
// App.js
import ...`,l:"frontEnd/react/router.html#嵌套路由",a:"嵌套路由"},"82.14":{t:"路由参数",p:`在实际开发中，我们经常需要从 URL 中获取参数来加载不同的数据或进行页面的定向。React Router 允许我们在 URL 路径中定义参数，并将参数传递给页面组件。
// App.js
impor ...`,l:"frontEnd/react/router.html#路由参数",a:"路由参数"},"82.15":{t:"路由链接和导航",p:`React Router 提供了 &lt;Link&gt; 组件和编程式导航来实现页面之间的导航。
// App.js
import React from 'react'
import { Brows ...`,l:"frontEnd/react/router.html#路由链接和导航",a:"路由链接和导航"},"83.0":{t:"# React State（状态）",p:"在 React 中，State（状态）是组件用于存储和管理可变数据的一种机制。State 允许我们在组件内部保存数据，并在数据发生变化时重新渲染组件。通过使用 State，我们可以创建交互性和动态性的 ...",l:"frontEnd/react/state.html",a:"react-state-状态"},"83.1":{t:"什么是 State？",p:"在 React 中，State 是组件内部的一种特殊变量，用于存储组件的可变数据。每个 React 组件都可以拥有自己的 State，并在需要时对其进行更新。State 是 React 组件的一部分， ...",l:"frontEnd/react/state.html#什么是-state",a:"什么是-state"},"83.2":{t:"State 的使用",p:"",l:"frontEnd/react/state.html#state-的使用",a:"state-的使用"},"83.3":{t:"1. 初始化 State",p:`在 React 中，通常在组件的构造函数中初始化 State。可以通过this.state属性来定义组件的 State。
class MyComponent extends React.Compone ...`,l:"frontEnd/react/state.html#_1-初始化-state",a:"_1-初始化-state"},"83.4":{t:"2. 更新 State",p:`要更新 State 的值，可以使用this.setState()方法。这样做的原因是为了确保组件在更新 State 后能够重新渲染，并显示更新后的数据。
class MyComponent exten ...`,l:"frontEnd/react/state.html#_2-更新-state",a:"_2-更新-state"},"83.5":{t:"3. 异步更新 State",p:"需要注意的是，this.setState()方法是异步的。这意味着在调用this.setState()后，并不会立即更新 State 的值，而是会放入一个更新队列中，等待 React 合并更新后再进行 ...",l:"frontEnd/react/state.html#_3-异步更新-state",a:"_3-异步更新-state"},"83.6":{t:"State 的不可变性",p:"在 React 中，State 是不可变的，意味着我们不应该直接修改 State 的值。如果直接修改 State 的值，React 无法检测到 State 的变化，并进行重新渲染。为了正确地更新 St ...",l:"frontEnd/react/state.html#state-的不可变性",a:"state-的不可变性"},"83.7":{t:"State 的传递",p:"在 React 中，State 通常是在组件的父组件中定义的，并通过 Props 传递给子组件。这样的设计有助于保持组件之间的独立性和可预测性。当 State 需要在多个组件中共享时，可以将 Stat ...",l:"frontEnd/react/state.html#state-的传递",a:"state-的传递"},"84.0":{t:"# React 列表渲染",p:`在 React 中，列表渲染是一种常见的技术，用于动态地生成列表元素。列表渲染使我们能够根据数据数组来动态生成多个相似的元素，并将它们渲染到用户界面上。
`,l:"frontEnd/react/列表渲染.html",a:"react-列表渲染"},"84.1":{t:"什么是列表渲染？",p:"列表渲染是指根据数据数组来动态生成多个相似的元素，并将它们渲染到用户界面上。在 React 中，我们通常使用 JavaScript 的数组和 map() 方法来实现列表渲染。通过列表渲染，我们可以轻松 ...",l:"frontEnd/react/列表渲染.html#什么是列表渲染",a:"什么是列表渲染"},"84.2":{t:"使用 map() 方法实现列表渲染",p:"在 React 中，使用数组的 map() 方法是实现列表渲染的常见方式。map() 方法可以遍历数组的每个元素，并根据每个元素生成一个新的元素。下面是一个简单的示例，演示了如何使用 map() 方法 ...",l:"frontEnd/react/列表渲染.html#使用-map-方法实现列表渲染",a:"使用-map-方法实现列表渲染"},"84.3":{t:"条件渲染列表元素",p:`在实际应用中，我们可能需要根据特定条件来渲染列表元素。在 React 中，我们可以在 map() 方法中使用条件语句来实现条件渲染。下面是一个示例，演示了如何根据数字的奇偶性来渲染不同样式的列表项：
 ...`,l:"frontEnd/react/列表渲染.html#条件渲染列表元素",a:"条件渲染列表元素"},"84.4":{t:"列表渲染和数据来源",p:"在实际应用中，数据通常来自于父组件的状态或从外部 API 获取。在 React 中，我们可以通过 props 将数据传递给子组件，然后在子组件中使用 map() 方法来实现列表渲染。下面是一个示例，演 ...",l:"frontEnd/react/列表渲染.html#列表渲染和数据来源",a:"列表渲染和数据来源"},"84.5":{t:"添加列表项",p:`在实际应用中，我们可能需要通过用户的交互来添加新的列表项。在 React 中，我们可以通过修改数据数组的方式来实现添加列表项。下面是一个示例，演示了如何通过按钮点击来添加新的列表项：
import R ...`,l:"frontEnd/react/列表渲染.html#添加列表项",a:"添加列表项"},"84.6":{t:"列表渲染的最佳实践",p:`

使用 key 属性：在使用 map() 方法渲染列表项时，每个列表项都应该有一个唯一的 key 属性。key 属性帮助 React 正确地更新 DOM，并提高列表渲染的性能。


使用 Fragm ...`,l:"frontEnd/react/列表渲染.html#列表渲染的最佳实践",a:"列表渲染的最佳实践"},"85.0":{t:"# React 条件渲染",p:`在 React 中，条件渲染是一种根据特定条件决定是否渲染组件或组件的一部分的技术。条件渲染使我们能够根据不同的状态或数据来展示不同的内容，从而实现动态和交互性的用户界面。
`,l:"frontEnd/react/条件渲染.html",a:"react-条件渲染"},"85.1":{t:"什么是条件渲染？",p:"条件渲染是指根据特定条件来决定是否渲染组件或组件的一部分。在 React 中，我们可以使用 JavaScript 的条件语句（如 if、else、switch）或三元表达式来实现条件渲染。条件渲染允许 ...",l:"frontEnd/react/条件渲染.html#什么是条件渲染",a:"什么是条件渲染"},"85.2":{t:"使用 if...else 实现条件渲染",p:`在 React 中，我们可以使用 JavaScript 的 if...else 语句来实现条件渲染。下面是一个简单的示例，演示了如何根据条件来渲染不同的内容：
import React from 'r ...`,l:"frontEnd/react/条件渲染.html#使用-if-else-实现条件渲染",a:"使用-if-else-实现条件渲染"},"85.3":{t:"使用三元表达式实现条件渲染",p:"除了使用 if...else，我们还可以使用 JavaScript 的三元表达式（ternary operator）来实现条件渲染。三元表达式是一种简洁的写法，用于在一行代码中根据条件返回不同的值。下 ...",l:"frontEnd/react/条件渲染.html#使用三元表达式实现条件渲染",a:"使用三元表达式实现条件渲染"},"85.4":{t:"使用逻辑与（&&）实现条件渲染",p:"除了 if...else 和三元表达式，我们还可以使用逻辑与（&amp;&amp;）来实现条件渲染。逻辑与在 JavaScript 中是一种短路逻辑，当第一个条件为真时，会返回第二个条件；否则，返回第 ...",l:"frontEnd/react/条件渲染.html#使用逻辑与-实现条件渲染",a:"使用逻辑与-实现条件渲染"},"85.5":{t:"使用条件运算符实现条件渲染",p:"除了上述方法，我们还可以使用条件运算符（也称为逻辑或 nullish coalescing 运算符）来实现条件渲染。条件运算符是 ES2020 中的新特性，用于简化条件判断。下面是一个使用条件运算符的 ...",l:"frontEnd/react/条件渲染.html#使用条件运算符实现条件渲染",a:"使用条件运算符实现条件渲染"},"85.6":{t:"条件渲染的最佳实践",p:`

使用适合场景的条件渲染方法：根据具体的场景和需求选择合适的条件渲染方法，例如使用 if...else、三元表达式、逻辑与、条件运算符等。


抽象逻辑：如果条件渲染逻辑较复杂，建议将其抽象成函数或 ...`,l:"frontEnd/react/条件渲染.html#条件渲染的最佳实践",a:"条件渲染的最佳实践"},"86.0":{t:"# Vue.js",p:"",l:"frontEnd/vue/base/index.html",a:"vue-js"},"86.1":{t:"简介",p:`Vue.js 是一套用于构建用户界面的渐进式 JavaScript 框架。它允许您将应用程序划分为可复用的组件，并以声明式的方式构建数据驱动的 UI。
`,l:"frontEnd/vue/base/index.html#简介",a:"简介"},"86.2":{t:"开始",p:"",l:"frontEnd/vue/base/index.html#开始",a:"开始"},"86.3":{t:"安装 Vue.js",p:`您可以通过直接引入 Vue.js 脚本文件或使用 npm（Node Package Manager）安装 Vue.js。
&lt;!-- 直接引入Vue.js脚本 --&gt;


或者
# 使用np ...`,l:"frontEnd/vue/base/index.html#安装-vue-js",a:"安装-vue-js"},"86.4":{t:"第一个 Vue.js 应用",p:`&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;My First Vue App&lt;/title&gt;
   ...`,l:"frontEnd/vue/base/index.html#第一个-vue-js-应用",a:"第一个-vue-js-应用"},"86.5":{t:"数据绑定",p:"",l:"frontEnd/vue/base/index.html#数据绑定",a:"数据绑定"},"86.6":{t:"插值表达式",p:`使用双花括号（Mustache 语法）进行数据插值，将数据绑定到 HTML 模板中。
&lt;div&gt;
  &lt;p&gt;{{ message }}&lt;/p&gt;
&lt;/div&g ...`,l:"frontEnd/vue/base/index.html#插值表达式",a:"插值表达式"},"86.7":{t:"指令",p:`Vue.js 提供了一些指令，用于在模板中实现特定的行为。

v-bind：将元素属性与 Vue 实例的数据绑定。

&lt;img v-bind:src=&quot;imageSrc&quot; / ...`,l:"frontEnd/vue/base/index.html#指令",a:"指令"},"86.8":{t:"条件渲染",p:"",l:"frontEnd/vue/base/index.html#条件渲染",a:"条件渲染"},"86.9":{t:"`v-if` 和 `v-else`",p:`根据条件渲染元素。
&lt;div v-if=&quot;isVisible&quot;&gt;This is visible.&lt;/div&gt;
&lt;div v-else&gt;This  ...`,l:"frontEnd/vue/base/index.html#v-if-和-v-else",a:"v-if-和-v-else"},"86.10":{t:"`v-show`",p:`根据条件显示或隐藏元素。
&lt;div v-show=&quot;isVisible&quot;&gt;This is visible.&lt;/div&gt;

`,l:"frontEnd/vue/base/index.html#v-show",a:"v-show"},"86.11":{t:"列表渲染",p:"",l:"frontEnd/vue/base/index.html#列表渲染",a:"列表渲染"},"86.12":{t:"`v-for`",p:`循环渲染列表中的元素。
&lt;ul&gt;
  &lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;{{ item. ...`,l:"frontEnd/vue/base/index.html#v-for",a:"v-for"},"86.13":{t:"事件处理",p:`使用v-on指令监听 DOM 事件，并执行相应的方法。
&lt;button v-on:click=&quot;handleClick&quot;&gt;Click Me&lt;/button&gt; ...`,l:"frontEnd/vue/base/index.html#事件处理",a:"事件处理"},"86.14":{t:"表单输入绑定",p:`使用v-model指令实现表单输入和 Vue 实例数据的双向绑定。
&lt;input v-model=&quot;message&quot; type=&quot;text&quot; /&gt;
 ...`,l:"frontEnd/vue/base/index.html#表单输入绑定",a:"表单输入绑定"},"86.15":{t:"组件",p:"",l:"frontEnd/vue/base/index.html#组件",a:"组件"},"86.16":{t:"定义组件",p:`// 定义一个名为 'my-component' 的组件
Vue.component('my-component', {
  template: '&lt;div&gt;{{ message }}&l ...`,l:"frontEnd/vue/base/index.html#定义组件",a:"定义组件"},"86.17":{t:"使用组件",p:`&lt;div id=&quot;app&quot;&gt;
  &lt;my-component&gt;&lt;/my-component&gt;
&lt;/div&gt;

`,l:"frontEnd/vue/base/index.html#使用组件",a:"使用组件"},"86.18":{t:"生命周期钩子",p:`


钩子函数
阶段
描述




beforeCreate
创建前
在实例被创建之前调用。此时，组件的数据观察和事件还未初始化。


created
创建后
在实例创建完成后调用。可以在这里进行数据 ...`,l:"frontEnd/vue/base/index.html#生命周期钩子",a:"生命周期钩子"},"87.0":{t:"# Vue Router 学习指南",p:"",l:"frontEnd/vue/base/vue-router.html",a:"vue-router-学习指南"},"87.1":{t:"1. 简介",p:`
Vue Router 是 Vue.js 官方提供的路由管理器，用于实现单页面应用（SPA）的路由功能。
学习 Vue Router 之前，确保您对 Vue.js 有一定的了解。

`,l:"frontEnd/vue/base/vue-router.html#_1-简介",a:"_1-简介"},"87.2":{t:"2. 安装",p:`
使用 npm 或 yarn 安装 Vue Router 到您的 Vue.js 项目中。

# 使用npm
npm install vue-router

# 使用yarn
yarn add vue- ...`,l:"frontEnd/vue/base/vue-router.html#_2-安装",a:"_2-安装"},"87.3":{t:"3. 基本用法",p:`
创建一个 Vue Router 实例并将其与 Vue 应用关联。
定义路由表，包含不同路径与对应组件的映射。

import { createRouter, createWebHistory } f ...`,l:"frontEnd/vue/base/vue-router.html#_3-基本用法",a:"_3-基本用法"},"87.4":{t:"4. 路由视图",p:`
在 Vue 组件中使用 &lt;router-view&gt; 标签来渲染路由匹配到的组件。

&lt;template&gt;
  &lt;div&gt;
    &lt;router-view& ...`,l:"frontEnd/vue/base/vue-router.html#_4-路由视图",a:"_4-路由视图"},"87.5":{t:"5. 路由导航",p:`
使用&lt;router-link&gt;组件创建导航链接，以在单页面应用中切换不同的路由。

&lt;template&gt;
  &lt;div&gt;
    &lt;router-link  ...`,l:"frontEnd/vue/base/vue-router.html#_5-路由导航",a:"_5-路由导航"},"87.6":{t:"6. 路由传参",p:`
使用路由参数传递数据给组件。

const routes = [{ path: '/user/:id', component: User }]

&lt;router-link :to=&quot; ...`,l:"frontEnd/vue/base/vue-router.html#_6-路由传参",a:"_6-路由传参"},"87.7":{t:"7. 嵌套路由",p:`
在组件中定义嵌套的子路由。

const routes = [
  {
    path: '/parent',
    component: Parent,
    children: [{ pa ...`,l:"frontEnd/vue/base/vue-router.html#_7-嵌套路由",a:"_7-嵌套路由"},"87.8":{t:"8. 路由守卫",p:`
使用路由守卫来处理导航前后的逻辑，例如登录验证、权限控制等。

router.beforeEach((to, from, next) =&gt; {
  // 检查用户是否登录，进行相关逻辑处理
  ...`,l:"frontEnd/vue/base/vue-router.html#_8-路由守卫",a:"_8-路由守卫"},"87.9":{t:"9. 动态路由",p:`
使用动态路由来根据不同条件加载组件。

const routes = [{ path: '/category/:id', component: Category }]

`,l:"frontEnd/vue/base/vue-router.html#_9-动态路由",a:"_9-动态路由"},"87.10":{t:"10. 路由懒加载",p:`
使用路由懒加载来优化页面加载性能。

const routes = [
  {
    path: '/lazy',
    component: () =&gt; import('./compon ...`,l:"frontEnd/vue/base/vue-router.html#_10-路由懒加载",a:"_10-路由懒加载"},"87.11":{t:" ",p:"",l:"frontEnd/vue/base/vue-router.html#",a:""},"87.12":{t:"11. 更多配置",p:`
了解更多高级配置，如路由别名、重定向、404 页面等。
--&gt;

`,l:"frontEnd/vue/base/vue-router.html#_11-更多配置",a:"_11-更多配置"},"88.0":{t:"# vuex",p:`
Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它是一个集中式的状态管理库，用于管理 Vue.js 应用中的共享状态（state）。在大型应用程序中，组件之间的数据共享和通信可能变得 ...`,l:"frontEnd/vue/base/vuex.html",a:"vuex"},"88.1":{t:"核心概念",p:`

State（状态）：在 Vuex 中，状态即应用程序中需要共享的数据。它类似于组件的 data，但是不限于某个组件，而是存储在 Vuex 的全局状态树中，使得不同组件可以共享和访问这些数据。


 ...`,l:"frontEnd/vue/base/vuex.html#核心概念",a:"核心概念"},"88.2":{t:"优点",p:`

集中式管理：所有的状态都集中在 Vuex 的 store 中，方便开发者进行状态的调试和追踪。


组件通信：可以轻松实现跨组件的状态共享和通信，避免了传统的 Props 和 Events 的繁琐 ...`,l:"frontEnd/vue/base/vuex.html#优点",a:"优点"},"88.3":{t:"使用",p:`

安装 Vuex：使用 npm 或 yarn 安装 Vuex 库。在终端中运行以下命令：
npm install vuex
或
yarn add vuex



创建一个 Vuex 的 store： ...`,l:"frontEnd/vue/base/vuex.html#使用",a:"使用"},"88.4":{t:"Mutations 的使用",p:`当使用 Vuex 时，通常会将状态的修改拆分为两个部分：mutations 和 actions。
Mutations 用于同步地修改状态。它们是唯一允许直接修改状态的地方，而且是一个纯函数（不应该有副 ...`,l:"frontEnd/vue/base/vuex.html#mutations-的使用",a:"mutations-的使用"},"88.5":{t:"Actions 的使用",p:"Actions 用于处理异步操作，并且可以包含任意异步代码。它们不直接修改状态，而是通过调用 mutations 来间接修改状态。通常，在组件中通过 dispatch 调用 actions 中的方法。 ...",l:"frontEnd/vue/base/vuex.html#actions-的使用",a:"actions-的使用"},"88.6":{t:"getters 的使用",p:"Getters 用于派生出 Vuex store 中的状态（state），类似于组件的计算属性（computed），但是 Getters 可以被多个组件共用，避免了重复逻辑代码。Getters 可以对 ...",l:"frontEnd/vue/base/vuex.html#getters-的使用",a:"getters-的使用"},"89.0":{t:"# Vue 响应式原理",p:"",l:"frontEnd/vue/principle/响应式原理.html",a:"vue-响应式原理"},"89.1":{t:"Vue2响应式原理",p:`Vue 2 的响应式原理主要是基于 Object.defineProperty 实现的。以下是 Vue 2 响应式系统的核心原理：


数据劫持（Data Observation）：

当你创建一个  ...`,l:"frontEnd/vue/principle/响应式原理.html#vue2响应式原理",a:"vue2响应式原理"},"89.2":{t:"Vue3响应式原理",p:`Vue 3 的响应式原理使用了 Proxy 对象，相比 Vue 2 使用的 Object.defineProperty 有一些重要的改进和性能优化。以下是 Vue 3 响应式系统的核心原理：


Pr ...`,l:"frontEnd/vue/principle/响应式原理.html#vue3响应式原理",a:"vue3响应式原理"},"90.0":{t:"# vue3 API",p:`
vue在线学习工具


在 vue3.2 中，我们只需在script标签中添加setup。就可以做到，组件只需引入不用注册，属性和方法也不用 return 才能于 template 中使用，也不用写 ...`,l:"frontEnd/vue/v3/api.html",a:"vue3-api"},"90.1":{t:"setup",p:`
理解：Vue3.0 中一个新的配置项，值为一个函数。
setup() 函数是 Vue3 新增的一个选项，它是组合式 API 的统一入口，简单来说，就是所有的 CompositionAPI 新特性都应 ...`,l:"frontEnd/vue/v3/api.html#setup",a:"setup"},"90.2":{t:"ref 和 reactive",p:`
ref() 函数用来根据给定的值创建一个响应式的数据对象，ref() 函数调用的返回值是一个对象，这个对象上只包含一个 value 属性, 只在setup函数内部访问ref函数需要加.value，其 ...`,l:"frontEnd/vue/v3/api.html#ref-和-reactive",a:"ref-和-reactive"},"90.3":{t:"ref全家桶",p:"",l:"frontEnd/vue/v3/api.html#ref全家桶",a:"ref全家桶"},"90.4":{t:"isRef",p:`判断是不是一个ref对象
import { ref,isRef } from 'vue'
let message = ref(&quot;我是message&quot;)
let notRef:num ...`,l:"frontEnd/vue/v3/api.html#isref",a:"isref"},"90.5":{t:"shallowRef",p:`创建一个跟踪自身 .value 变化的 ref，但不会使其值也变成响应式的
修改其属性是非响应式的这样是不会改变的
&lt;template&gt;
  &lt;div&gt;
    &lt;but ...`,l:"frontEnd/vue/v3/api.html#shallowref",a:"shallowref"},"90.6":{t:"triggerRef",p:`强制更新页面DOM
import {Ref,shallowRef,triggerRef} from 'vue'
type Obj = {
    name:string
}
let message:R ...`,l:"frontEnd/vue/v3/api.html#triggerref",a:"triggerref"},"90.7":{t:"customRef",p:`自定义ref
customRef 是个工厂函数要求我们返回一个对象 并且实现 get 和 set  适合去做防抖之类的
&lt;template&gt;
  &lt;div ref=&quot;div ...`,l:"frontEnd/vue/v3/api.html#customref",a:"customref"},"90.8":{t:"reactive全家桶",p:`reactive是不可以绑定普通的数据类型这样是不允许 会给我们报错
import { reactive} from 'vue'
let person = reactive('zhangsan')
/ ...`,l:"frontEnd/vue/v3/api.html#reactive全家桶",a:"reactive全家桶"},"90.9":{t:"readonly",p:`readonly 接受一个对象 (不论是响应式还是普通的) 或是一个 ref，返回一个原值的只读代理。


`,l:"frontEnd/vue/v3/api.html#readonly",a:"readonly"},"90.10":{t:"shallowReactive",p:`只能对浅层的数据 如果是深层的数据只会改变值 不会改变视图
&lt;template&gt;
  &lt;div&gt;
    &lt;div&gt;{{ state }}&lt;/div&gt;
 ...`,l:"frontEnd/vue/v3/api.html#shallowreactive",a:"shallowreactive"},"90.11":{t:"to系列全家桶",p:"",l:"frontEnd/vue/v3/api.html#to系列全家桶",a:"to系列全家桶"},"90.12":{t:"toRef",p:`把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref
如果原始对象是非响应式的，数据是会变的，但不会更新视图。
&lt;template&gt;
  &lt;div&g ...`,l:"frontEnd/vue/v3/api.html#toref",a:"toref"},"90.13":{t:"toRefs",p:`toRefs相当于对对象内每个属性调用toRef，toRefs返回的对象内的属性使用时需要加.value,主要是方便我们解构使用
&lt;template&gt;
  &lt;div&gt;
     ...`,l:"frontEnd/vue/v3/api.html#torefs",a:"torefs"},"90.14":{t:"toRaw",p:`将响应式对象修改为普通对象
&lt;template&gt;
  &lt;div&gt;
    &lt;button @click=&quot;change&quot;&gt;按钮&lt;/butt ...`,l:"frontEnd/vue/v3/api.html#toraw",a:"toraw"},"90.15":{t:"computed",p:`computed() 与 Vue2 中的 computed 作用基本一致，它可以接收一个函数或对象作为参数，会返回一个只读的 ref 对象。
&lt;template&gt;
  &lt;div&gt ...`,l:"frontEnd/vue/v3/api.html#computed",a:"computed"},"90.16":{t:"watch",p:`vue3 watch 的作用和 Vue2 中的 watch 作用是一样的，他们都是用来监听响应式状态发生变化的，当响应式状态发生变化时，就会触发一个回调函数。
watch(data,()=&gt;{} ...`,l:"frontEnd/vue/v3/api.html#watch",a:"watch"},"90.17":{t:"1、监听ref定义的一个响应式数据",p:`import { ref, watch } from 'vue'
let message = ref({
    nav:{
        bar:{
            name:&quot; ...`,l:"frontEnd/vue/v3/api.html#_1、监听ref定义的一个响应式数据",a:"_1、监听ref定义的一个响应式数据"},"90.18":{t:"2、监听多个ref",p:`写法变为数组的形式
import { ref, watch ,reactive} from 'vue'

let message = ref('')
let message2 = ref('')

w ...`,l:"frontEnd/vue/v3/api.html#_2、监听多个ref",a:"_2、监听多个ref"},"90.19":{t:"3、监听Reactive定义的响应式对象",p:`使用reactive监听深层对象开启和不开启deep 效果一样
import { ref, watch ,reactive} from 'vue'

let message = reactive({
 ...`,l:"frontEnd/vue/v3/api.html#_3、监听reactive定义的响应式对象",a:"_3、监听reactive定义的响应式对象"},"90.20":{t:"4、监听reactive 定义响应式对象的单一属性",p:`import { ref, watch ,reactive} from 'vue'
let message = reactive({
    name:&quot;&quot;,
    name2: ...`,l:"frontEnd/vue/v3/api.html#_4、监听reactive-定义响应式对象的单一属性",a:"_4、监听reactive-定义响应式对象的单一属性"},"90.21":{t:"WatchEffect",p:`
立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。
不用直接指定要监视的数据, 回调函数中使用的哪些响应式数据就监视哪些响应式数据
默认初始时就会执行第一次, 从而可以收 ...`,l:"frontEnd/vue/v3/api.html#watcheffect",a:"watcheffect"},"90.22":{t:"清除副作用",p:`
watchEffect 的第一个参数——effect函数——可以接收一个参数：叫onInvalidate，也是一个函数，用于清除 effect 产生的副作用
就是在触发监听之前会调用一个函数可以处理 ...`,l:"frontEnd/vue/v3/api.html#清除副作用",a:"清除副作用"},"90.23":{t:"停止监听",p:`- 当 watchEffect 在组件的 setup() 函数或生命周期钩子被调用时，侦听器会被链接到该组件的生命周期，并在组件卸载时自动停止。
- 但是我们采用异步的方式创建了一个监听器，这个时候监 ...`,l:"frontEnd/vue/v3/api.html#停止监听",a:"停止监听"},"90.24":{t:"配置选项",p:`

watchEffect的第二个参数，用来定义副作用刷新时机，可以作为一个调试器来使用


flush （更新时机）：

pre：组件更新前执行
sync：强制效果始终同步触发
post：组件更新后 ...`,l:"frontEnd/vue/v3/api.html#配置选项",a:"配置选项"},"90.25":{t:"生命周期",p:`简单来说就是一个组件从创建 到 销毁的 过程 成为生命周期
在我们使用Vue3 组合式API 是没有 beforeCreate 和 created 这两个生命周期的
!img
`,l:"frontEnd/vue/v3/api.html#生命周期",a:"生命周期"},"90.26":{t:"自定义指令",p:"",l:"frontEnd/vue/v3/api.html#自定义指令",a:"自定义指令"},"90.27":{t:"Vue3指令的钩子函数",p:`
created 元素初始化的时候
beforeMount 指令绑定到元素后调用 只调用一次
mounted 元素插入父级dom调用
beforeUpdate 元素被更新之前调用
update 这个周 ...`,l:"frontEnd/vue/v3/api.html#vue3指令的钩子函数",a:"vue3指令的钩子函数"},"90.28":{t:"在setup内定义局部指令",p:`这里有一个需要注意的限制：必须以 vNameOfDirective 的形式来命名本地自定义指令，以使得它们可以直接在模板中使用。

const vMoveDirective: Directive =  ...`,l:"frontEnd/vue/v3/api.html#在setup内定义局部指令",a:"在setup内定义局部指令"},"90.29":{t:"生命周期钩子参数详解",p:`第一个 el  当前绑定的DOM 元素
第二个 binding

instance：使用指令的组件实例。
value：传递给指令的值。例如，在 v-my-directive=&quot;1 + 1&q ...`,l:"frontEnd/vue/v3/api.html#生命周期钩子参数详解",a:"生命周期钩子参数详解"},"90.30":{t:"案列 - 自定义拖拽指令",p:`&lt;template&gt;
  &lt;div v-move class=&quot;box&quot;&gt;
    &lt;div class=&quot;header&quot;&gt; ...`,l:"frontEnd/vue/v3/api.html#案列-自定义拖拽指令",a:"案列-自定义拖拽指令"},"90.31":{t:"自定义hooks",p:`在 vue2 中有个东西叫 mixins，他可以将多个组件中相同的逻辑抽离出来，实现一次写代码，多组件受益的效果。
但是 mixins 的副作用就是引用的多了变量的来源就不清晰了，而且还会有变量来源不 ...`,l:"frontEnd/vue/v3/api.html#自定义hooks",a:"自定义hooks"},"91.0":{t:"# vue3 组件通信方式",p:"",l:"frontEnd/vue/v3/communication.html",a:"vue3-组件通信方式"},"91.1":{t:"通信方式",p:`&lt;!-- 通信仓库地址:项目地址 --&gt;
不管是 vue2 还是 vue3,组件通信方式很重要,不管是项目还是面试都是经常用到的知识点。
比如:vue2 组件通信方式
**props:** ...`,l:"frontEnd/vue/v3/communication.html#通信方式",a:"通信方式"},"91.2":{t:"1、props",p:`props 可以实现父子组件通信,在 vue3 中我们可以通过 defineProps 获取父组件传递的数据。且在组件内部不需要引入 defineProps 方法可以直接使用！
父组件给子组件传递数据 ...`,l:"frontEnd/vue/v3/communication.html#_1、props",a:"_1、props"},"91.3":{t:"2、自定义事件",p:`在 vue 框架中事件分为两种:一种是原生的 DOM 事件，另外一种自定义事件。
原生 DOM 事件可以让用户与网页进行交互，比如 click、dbclick、change、mouseenter、mo ...`,l:"frontEnd/vue/v3/communication.html#_2、自定义事件",a:"_2、自定义事件"},"91.4":{t:"1. 原生 DOM 事件",p:`代码如下:
&lt;pre @click=&quot;handler&quot;&gt;
      我是祖国的老花骨朵
 &lt;/pre&gt;

当前代码级给 pre 标签绑定原生 DOM 事件 ...`,l:"frontEnd/vue/v3/communication.html#_1-原生-dom-事件",a:"_1-原生-dom-事件"},"91.5":{t:"2. 自定义事件",p:`自定义事件可以实现子组件给父组件传递数据.在项目中是比较常用的。
比如在父组件内部给子组件(Event2)绑定一个自定义事件
&lt;Event2 @xxx=&quot;handler3&quot;& ...`,l:"frontEnd/vue/v3/communication.html#_2-自定义事件",a:"_2-自定义事件"},"91.6":{t:"3、全局事件总线",p:`全局事件总线可以实现任意组件通信，在 vue2 中可以根据 VM 与 VC 关系推出全局事件总线。
但是在 vue3 中没有 Vue 构造函数，也就没有 Vue.prototype.以及组合式 API ...`,l:"frontEnd/vue/v3/communication.html#_3、全局事件总线",a:"_3、全局事件总线"},"91.7":{t:"4、v-model",p:`v-model 指令可是收集表单数据(数据双向绑定)，除此之外它也可以实现父子组件数据同步。
而 v-model 实指利用 props[modelValue]与自定义事件[update:modelVa ...`,l:"frontEnd/vue/v3/communication.html#_4、v-model",a:"_4、v-model"},"91.8":{t:"5、useAttrs",p:`在 Vue3 中可以利用 useAttrs 方法获取组件的属性与事件(包含:原生 DOM 事件或者自定义事件),次函数功能类似于 Vue2 框架中$attrs属性与$listeners 方法。
比如: ...`,l:"frontEnd/vue/v3/communication.html#_5、useattrs",a:"_5、useattrs"},"91.9":{t:"6、ref 与$parent",p:`ref,提及到 ref 可能会想到它可以获取元素的 DOM 或者获取子组件实例的 VC。既然可以在父组件内部通过 ref 获取子组件实例 VC，那么子组件内部的方法与响应式数据父组件可以使用的。
比如 ...`,l:"frontEnd/vue/v3/communication.html#_6、ref-与-parent",a:"_6、ref-与-parent"},"91.10":{t:"7、provide 与 inject",p:`provide[提供]
**inject[注入]vue3 提供两个方法 provide 与 inject,可以实现隔辈组件传递参数
组件组件提供数据:
provide 方法用于提供数据，此方法执需要传 ...`,l:"frontEnd/vue/v3/communication.html#_7、provide-与-inject",a:"_7、provide-与-inject"},"91.11":{t:"8、piniapinia 官网:https://pinia.web3doc.top/**",p:`pinia 也是集中式管理状态容器,类似于 vuex。但是核心概念没有 mutation、modules,使用方式参照官网
`,l:"frontEnd/vue/v3/communication.html#_8、piniapinia-官网-https-pinia-web3doc-top",a:"_8、piniapinia-官网-https-pinia-web3doc-top"},"91.12":{t:"9、slot",p:`插槽：默认插槽、具名插槽、作用域插槽可以实现父子组件通信.
默认插槽:
在子组件内部的模板中书写 slot 全局组件标签
&lt;template&gt;
  &lt;div&gt;
    &lt; ...`,l:"frontEnd/vue/v3/communication.html#_9、slot",a:"_9、slot"},"92.0":{t:"# Vue3 深入组件",p:"",l:"frontEnd/vue/v3/components.html",a:"vue3-深入组件"},"92.1":{t:"注册",p:"",l:"frontEnd/vue/v3/components.html#注册",a:"注册"},"92.2":{t:"全局组件",p:`在 main.ts 引入组件跟随在 createApp(App) 后面，切记不能放到 mount 后面
//main.js
import { createApp } from 'vue'
import ...`,l:"frontEnd/vue/v3/components.html#全局组件",a:"全局组件"},"92.3":{t:" ",p:"",l:"frontEnd/vue/v3/components.html#",a:""},"92.4":{t:"批量注册全局组件 -->",p:"",l:"frontEnd/vue/v3/components.html#批量注册全局组件",a:"批量注册全局组件"},"92.5":{t:"局部组件",p:`局部注册的组件需要在使用它的父组件中显式导入，并且只能在该父组件中使用。它的优点是使组件之间的依赖关系更加明确，并且对 tree-shaking 更加友好。
在使用 \`
&lt;template&gt ...`,l:"frontEnd/vue/v3/components.html#局部组件",a:"局部组件"},"92.6":{t:"父子组件传参",p:`
父组件通过 v-bind 绑定一个数据，然后子组件通过 defineProps 接受传过来的值
传递非字符串类型需要加 v-bind 简写 冒号

父组件
&lt;template&gt;
  &l ...`,l:"frontEnd/vue/v3/components.html#父子组件传参",a:"父子组件传参"},"92.7":{t:"插槽",p:"",l:"frontEnd/vue/v3/components.html#插槽",a:"插槽"},"92.8":{t:"匿名插槽",p:`在子组件放置一个插槽
// Child.vue
&lt;template&gt;
  &lt;div&gt;child&lt;/div&gt;
  &lt;slot&gt;&lt;/slot&gt;
 ...`,l:"frontEnd/vue/v3/components.html#匿名插槽",a:"匿名插槽"},"92.9":{t:"具名插槽",p:`具名插槽其实就是给插槽取个名字。一个子组件可以放多个插槽，而且可以放在不同的地方，而父组件填充内容时，可以根据这个名字把内容填充到对应插槽中
&lt;div&gt;
  &lt;slot name=& ...`,l:"frontEnd/vue/v3/components.html#具名插槽",a:"具名插槽"},"92.10":{t:"作用域插槽",p:`插槽内容可以访问到父组件的数据作用域，因为插槽内容本身是在父组件模板中定义的。
在子组件动态绑定参数 派发给父组件的 slot 去使用
&lt;span&gt;{{ message }}&lt;/sp ...`,l:"frontEnd/vue/v3/components.html#作用域插槽",a:"作用域插槽"},"92.11":{t:"动态插槽",p:`插槽可以是一个变量名
&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;父组件&lt;/p&gt;
    &lt;Child&gt;
      &lt;tem ...`,l:"frontEnd/vue/v3/components.html#动态插槽",a:"动态插槽"},"92.12":{t:"异步组件",p:`在大型应用中，需要将应用分割成小一些的代码块，并且减少主包的体积。
通过 defineAsyncComponent 异步加载
&lt;template&gt;
  &lt;Children :msg= ...`,l:"frontEnd/vue/v3/components.html#异步组件",a:"异步组件"},"92.13":{t:"Suspense",p:"Suspense 允许应用程序在等待异步组件时渲染一些其它内容,在 Vue2 中，必须使用条件判断(例如 v-if、 v-else等)来检查数据是否已加载并显示一些其它内容；但是，在 Vue3 新增了 ...",l:"frontEnd/vue/v3/components.html#suspense",a:"suspense"},"92.14":{t:"Teleport 传送组件",p:`Teleport 是一种能够将我们的模板渲染至指定DOM节点，不受父级style、v-show等属性影响，但data、prop数据依旧能够共用的技术；类似于 React 的 Portal。
主要解决的 ...`,l:"frontEnd/vue/v3/components.html#teleport-传送组件",a:"teleport-传送组件"},"92.15":{t:"Keep-alive 缓存组件",p:`
事件挂载的方法等，只执行一次的放在 onMounted中；组件每次进去执行的方法放在 onActivated中


作用和vue2一致，只是生命周期名称有所更改
初次进入时： onMounted&g ...`,l:"frontEnd/vue/v3/components.html#keep-alive-缓存组件",a:"keep-alive-缓存组件"},"92.16":{t:"provide/inject",p:`provide 可以在祖先组件中指定我们想要提供给后代组件的数据或方法，而在任何后代组件中，我们都可以使用 inject 来接收 provide 提供的数据或方法。
父组件
&lt;template& ...`,l:"frontEnd/vue/v3/components.html#provide-inject",a:"provide-inject"},"92.17":{t:"v-model 升级",p:`
在Vue3 v-model 是破坏性更新的
v-model 是props 和 emit 组合而成的语法糖,vue3中 v-model 有以下改动


变更：value =&gt; modelValu ...`,l:"frontEnd/vue/v3/components.html#v-model-升级",a:"v-model-升级"},"93.0":{t:"# 创建Vue3项目",p:"",l:"frontEnd/vue/v3/create.html",a:"创建vue3项目"},"93.1":{t:"一、 使用vue-cli创建",p:`
`,l:"frontEnd/vue/v3/create.html#一、-使用vue-cli创建",a:"一、-使用vue-cli创建"},"93.2":{t:"安装或者升级",p:`npm install -g @vue/cli
`,l:"frontEnd/vue/v3/create.html#安装或者升级",a:"安装或者升级"},"93.3":{t:"保证 vue cli 版本在 4.5.0 以上",p:`vue --version
`,l:"frontEnd/vue/v3/create.html#保证-vue-cli-版本在-4-5-0-以上",a:"保证-vue-cli-版本在-4-5-0-以上"},"93.4":{t:"创建项目",p:`vue create my-project
然后的步骤

- Please pick a preset - 选择 Manually select features
- Check the featur ...`,l:"frontEnd/vue/v3/create.html#创建项目",a:"创建项目"},"93.5":{t:"二、 使用vite创建(推荐)",p:`vite的优势

冷服务   默认的构建目标浏览器是能 在 script 标签上支持原生 ESM 和 原生 ESM 动态导入
HMR  速度快到惊人的 模块热更新（HMR）
Rollup打包  它使用 ...`,l:"frontEnd/vue/v3/create.html#二、-使用vite创建-推荐",a:"二、-使用vite创建-推荐"},"93.6":{t:"1. 使用vite初始化一个项目",p:`# npm
npm init vite@latest

# yarn
yarn create vite

这两种使用vite创建vue3项目的步骤一样
(1).运行命令 输入项目名称
!img
(2) ...`,l:"frontEnd/vue/v3/create.html#_1-使用vite初始化一个项目",a:"_1-使用vite初始化一个项目"},"93.7":{t:"2. npm init vue@latest",p:`!img
`,l:"frontEnd/vue/v3/create.html#_2-npm-init-vue-latest",a:"_2-npm-init-vue-latest"},"94.0":{t:"# 认识Vue3",p:"",l:"frontEnd/vue/v3/index.html",a:"认识vue3"},"94.1":{t:"一、了解相关信息",p:`
Vue.js 3.0 &quot;One Piece&quot; 正式版在今年9月份发布
2年多开发, 100+位贡献者, 2600+次提交, 600+次PR
Vue3支持vue2的大多数特性
更好 ...`,l:"frontEnd/vue/v3/index.html#一、了解相关信息",a:"一、了解相关信息"},"94.2":{t:"二、 性能提升:",p:`
打包大小减少41%
初次渲染快55%, 更新渲染快133%
内存减少54%
使用Proxy代替defineProperty实现数据响应式
重写虚拟DOM的实现和Tree-Shaking

`,l:"frontEnd/vue/v3/index.html#二、-性能提升",a:"二、-性能提升"},"94.3":{t:"三、 新增特性",p:`

Composition (组合) API


setup

ref 和 reactive
computed 和 watch
新的生命周期函数
provide与inject
...



新组件

 ...`,l:"frontEnd/vue/v3/index.html#三、-新增特性",a:"三、-新增特性"},"95.0":{t:"# vue3.3 新特性",p:"",l:"frontEnd/vue/v3/vue33.html",a:"vue3-3-新特性"},"95.1":{t:"defineProps",p:`
父组件

&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;Home&lt;/h1&gt;
    &lt;Child :name=&quot;['zhang ...`,l:"frontEnd/vue/v3/vue33.html#defineprops",a:"defineprops"},"95.2":{t:"defineEmits",p:`
父组件

&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;Home&lt;/h1&gt;
    &lt;Child @send=&quot;getName ...`,l:"frontEnd/vue/v3/vue33.html#defineemits",a:"defineemits"},"95.3":{t:"defineOptions",p:`
主要是用来定义 Options API 的选项



::: tip
常用的就是定义 name 在 seutp 语法糖模式发现 name 不好定义了需要在开启一个 script 自定义 name 现 ...`,l:"frontEnd/vue/v3/vue33.html#defineoptions",a:"defineoptions"},"95.4":{t:"defineSlots",p:`用来约束 slot

父组件

&lt;template&gt;
  &lt;div&gt;
    &lt;Child :data=&quot;list&quot;&gt;
      &lt;te ...`,l:"frontEnd/vue/v3/vue33.html#defineslots",a:"defineslots"},"97.0":{t:"# 前端导航",p:`&lt;!--
`,l:"nav/index.html",a:"前端导航"},"97.1":{t:" ",p:"",l:"nav/index.html#",a:""},"97.2":{t:"常用工具 -->",p:"&lt;NavLinks v-for=&quot;{title,items} in NAV_DATA&quot; :title='title' :items=&quot;items&quot;/&gt ...",l:"nav/index.html#常用工具",a:"常用工具"},"98.0":{t:"# 基本类型",p:"",l:"others/TypeScript/basic.html",a:"基本类型"},"98.1":{t:"字符串类型",p:`// 普通声明
let a: string = '123'

// 也可以使用es6的字符串模板
let str: string = \`ddd\${a}\`

`,l:"others/TypeScript/basic.html#字符串类型",a:"字符串类型"},"98.2":{t:"数字类型",p:`// 支持十六进制、十进制、八进制和二进制。
let notANumber: number = NaN //NaN
let num: number = 123.321 //普通数字
let infin ...`,l:"others/TypeScript/basic.html#数字类型",a:"数字类型"},"98.3":{t:"布尔类型",p:`let b1: boolean = true //可以直接使用布尔值
let b2: boolean = false //也可以通过函数返回布尔值

let b2: boolean = Boolean ...`,l:"others/TypeScript/basic.html#布尔类型",a:"布尔类型"},"98.4":{t:"数组",p:`TypeScript 像 JavaScript 一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组：
let list: numbe ...`,l:"others/TypeScript/basic.html#数组",a:"数组"},"98.5":{t:"元组 Tuple",p:`元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。如果一个方法需要返回多个值，可以把这多个值作为元组返回，而不需要创建额外的类来表示。
比如：可以定义一对值分别为string和num ...`,l:"others/TypeScript/basic.html#元组-tuple",a:"元组-tuple"},"98.6":{t:"枚举",p:`enum类型是对 JavaScript 标准数据类型的一个补充。使用枚举类型可以为一组数值赋予友好的名字。
枚举的值可以是数字，也可以是字符串。

数字枚举

enum Types {
  Red = ...`,l:"others/TypeScript/basic.html#枚举",a:"枚举"},"98.7":{t:"Any 任意类型",p:`没有强制限定哪种类型，随时切换类型都可以 我们可以对 any 进行任何操作，不需要检查类型
let value: Any
value = true // OK
value = 42 // OK
val ...`,l:"others/TypeScript/basic.html#any-任意类型",a:"any-任意类型"},"98.8":{t:"Void",p:`可以用 void 表示没有任何返回值的函数
function voidFn(): void {
  console.log('test void')
  // return // 不能带有return ...`,l:"others/TypeScript/basic.html#void",a:"void"},"98.9":{t:"Null 和 Undefined",p:`let u: undefined = undefined //定义undefined
let n: null = null //定义null

默认情况下 null 和 undefined 是所有类型 ...`,l:"others/TypeScript/basic.html#null-和-undefined",a:"null-和-undefined"},"98.10":{t:"Never",p:`never 类型表示的是那些永不存在的值的类型。
// 返回never的函数必须存在无法达到的终点

// 因为必定抛出异常，所以 error 将不会有返回值
function error(messa ...`,l:"others/TypeScript/basic.html#never",a:"never"},"98.11":{t:"Never 与 Void 的差异",p:`//void类型只是没有返回值 但本身不会出错
function Void(): void {
  console.log()
}

//只会抛出异常没有返回值
function Never(): n ...`,l:"others/TypeScript/basic.html#never-与-void-的差异",a:"never-与-void-的差异"},"98.12":{t:"联合类型",p:`联合类型用|分隔，表示取值可以为多种类型中的一种
// a可以为数字或者布尔类型，不能为字符串类型，
// 因为定义的联合类型只有数字和布尔值并没有字符串
let a:num|boolean
a =  ...`,l:"others/TypeScript/basic.html#联合类型",a:"联合类型"},"98.13":{t:"交叉类型",p:`交叉类型就是跟联合类型相反，用&amp;操作符表示，交叉类型就是两个类型必须存在
interface People {
  age: number,
  height： number
}
interf ...`,l:"others/TypeScript/basic.html#交叉类型",a:"交叉类型"},"98.14":{t:"类型断言",p:"通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScrip ...",l:"others/TypeScript/basic.html#类型断言",a:"类型断言"},"99.0":{t:"# 类",p:"ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到 ...",l:"others/TypeScript/class.html",a:"类"},"99.1":{t:"基本实例",p:`// 类的基本定义与使用
class Person{
  // 声明属性
    name:string
    age:number

    // 构造方法
    constructor(nam ...`,l:"others/TypeScript/class.html#基本实例",a:"基本实例"},"99.2":{t:"继承",p:`在TypeScript 里，我们可以使用常用的面向对象模式。 基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。
// 类的继承
class Animal {
  run (distan ...`,l:"others/TypeScript/class.html#继承",a:"继承"},"99.3":{t:"类的修饰符",p:`总共有三个 public private protected
`,l:"others/TypeScript/class.html#类的修饰符",a:"类的修饰符"},"99.4":{t:"默认为 public",p:`使用public修饰符 可以让你定义的变量 内部访问 也可以外部访问 如果不写默认就是public
`,l:"others/TypeScript/class.html#默认为-public",a:"默认为-public"},"99.5":{t:"理解 private",p:`使用private修饰符 代表定义的变量私有的只能在内部访问 不能在外部访问
`,l:"others/TypeScript/class.html#理解-private",a:"理解-private"},"99.6":{t:"理解 protected",p:`使用protected修饰符 代表定义的变量私有的只能在内部和继承的子类中访问 不能在外部访问
class Person{
    public name:string
    private age ...`,l:"others/TypeScript/class.html#理解-protected",a:"理解-protected"},"99.7":{t:"readonly 修饰符",p:`你可以使用 readonly 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。
class Person {
  readonly name: string = 'abc'
   ...`,l:"others/TypeScript/class.html#readonly-修饰符",a:"readonly-修饰符"},"99.8":{t:"static 静态属性 和 静态方法",p:`我们用static 定义的属性 不可以通过this 去访问 只能通过类名去调用
class Person {
  public name: string;
  static age: number = ...`,l:"others/TypeScript/class.html#static-静态属性-和-静态方法",a:"static-静态属性-和-静态方法"},"99.9":{t:"interface 定义 类",p:`ts interface 定义类 使用关键字 implements 后面跟interface的名字多个用逗号隔开 继承还是用extends

interface PersonClass {
    g ...`,l:"others/TypeScript/class.html#interface-定义-类",a:"interface-定义-类"},"99.10":{t:"存储器",p:`TypeScript 支持通过 getters/setters 来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。
下面来看如何把一个简单的类改写成使用 get 和 set。 首先，我们 ...`,l:"others/TypeScript/class.html#存储器",a:"存储器"},"99.11":{t:"抽象类",p:`抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化，只能实例化实现了所有抽象方法的子类。 不同于接口，抽象类可以包含成员的实现细节。
abstract: 用abstract关键字声明的类叫做抽 ...`,l:"others/TypeScript/class.html#抽象类",a:"抽象类"},"100.0":{t:"# 函数",p:`
函数涉及的类型实际上指的是：函数参数和返回值的类型

`,l:"others/TypeScript/function.html",a:"函数"},"100.1":{t:"函数的类型",p:`js的函数
// 命名函数
function add(x, y) {
  return x + y
}

// 匿名函数 箭头函数
let myAdd = (x, y) =&gt; {
  retur ...`,l:"others/TypeScript/function.html#函数的类型",a:"函数的类型"},"100.2":{t:"可选参数`?`",p:`通过?表示该参数为可选参数
function add(x: number, y?: number): number {
  return y ? x + y : x;
}


const fn = ( ...`,l:"others/TypeScript/function.html#可选参数",a:"可选参数"},"100.3":{t:"默认参数",p:`function add(x: number, y: number = 20): number {
  return x + y;
}
add(10)  // 30

`,l:"others/TypeScript/function.html#默认参数",a:"默认参数"},"100.4":{t:"剩余参数",p:"必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在 JavaScript 里，你可以使用 arguments 来访问所有 ...",l:"others/TypeScript/function.html#剩余参数",a:"剩余参数"},"100.5":{t:"函数重载",p:`重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。
// 重载函数声明
function add (x: string, y: string): string
function add (x ...`,l:"others/TypeScript/function.html#函数重载",a:"函数重载"},"101.0":{t:"# 泛型",p:`
指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定具体类型的一种特性。

`,l:"others/TypeScript/generic.html",a:"泛型"},"101.1":{t:"函数泛型",p:"",l:"others/TypeScript/generic.html#函数泛型",a:"函数泛型"},"101.2":{t:"给函数加上类型",p:`下面这是两个函数，除了类型的不同，实现的功能是一样的。
function num(a: number, b: number): Array&lt;number&gt; {
  return [a, b ...`,l:"others/TypeScript/generic.html#给函数加上类型",a:"给函数加上类型"},"101.3":{t:"使用泛型优化",p:`语法为函数名字后面跟一个&lt;参数名&gt; 参数名可以随便写 例如我这儿写了 T
当我们使用这个函数的时候把参数的类型传进去就可以了 （也就是动态类型）
function Add&lt;T&gt; ...`,l:"others/TypeScript/generic.html#使用泛型优化",a:"使用泛型优化"},"101.4":{t:"多个泛型参数的函数",p:`一个函数可以定义多个泛型参数
function swap&lt;K, V&gt;(a: K, b: V): [K, V] {
  return [a, b]
}
const result = swap ...`,l:"others/TypeScript/generic.html#多个泛型参数的函数",a:"多个泛型参数的函数"},"101.5":{t:"泛型接口",p:`在定义接口时, 为接口中的属性或方法定义泛型类型 
在使用接口时, 再指定具体的泛型类型
interface KeyValue&lt;T,U&gt; {
  key: T;
  value: U;
} ...`,l:"others/TypeScript/generic.html#泛型接口",a:"泛型接口"},"101.6":{t:"泛型类",p:`在定义类时, 为类中的属性或方法定义泛型类型 在创建类的实例时, 再指定特定的泛型类型
class clacArray&lt;T&gt;{
    private arr:T[] = [];

    ...`,l:"others/TypeScript/generic.html#泛型类",a:"泛型类"},"101.7":{t:"泛型约束",p:`我们期望在一个泛型的变量上面，获取其length参数，但是，有的数据类型是没有length属性的
// 没有泛型约束
function getLen&lt;T&gt;(arg:T) {
  retur ...`,l:"others/TypeScript/generic.html#泛型约束",a:"泛型约束"},"102.0":{t:"# 初识TypeScript",p:`
TypeScript中文网

`,l:"others/TypeScript/index.html",a:"初识typescript"},"102.1":{t:"TS是什么？",p:`TS：是TypeScript的简称，是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。
`,l:"others/TypeScript/index.html#ts是什么",a:"ts是什么"},"102.2":{t:"TS和JS的关系",p:`对比于JS，TS是JS的超集，简单的说就是在 JavaScript 的基础上加入了类型系统，让每个参数都有明确的意义，从而带来了更加智能的提示。
相对于JS而言，TS属于强类型语言，所以对于项目而言， ...`,l:"others/TypeScript/index.html#ts和js的关系",a:"ts和js的关系"},"102.3":{t:"TS和JS的区别",p:`
JavaScript 属于动态编程语言，而ts 属于静态编程语言。

js：边解释边执行，错误只有在运行的时候才能发现
ts：先编译再执行，在写的时候就会发现错误了（ts不能直接执行，需要先编译成  ...`,l:"others/TypeScript/index.html#ts和js的区别",a:"ts和js的区别"},"102.4":{t:"TypeScript的优缺点",p:"",l:"others/TypeScript/index.html#typescript的优缺点",a:"typescript的优缺点"},"102.5":{t:"优点",p:`
增强代码的可维护性，尤其在大型项目的时候效果显著
友好地在编辑器里提示错误，编译阶段就能检查类型发现大部分错误
支持最新的JavaScript新特特性
周边生态繁荣，vue3已全面支持 typesc ...`,l:"others/TypeScript/index.html#优点",a:"优点"},"102.6":{t:"缺点",p:`
需要一定的学习成本
和一些插件库的兼容并不是特别完美，如以前在 vue2 项目里使用 typescript就并不是那么顺畅
增加前期开发的成本，毕竟你需要写更多的代码（但是便于后期的维护）

`,l:"others/TypeScript/index.html#缺点",a:"缺点"},"102.7":{t:"安装",p:`# 安装 typescript
npm install -g typescript
//或者
yarn global add typescript

# 查看版本
tsc -v

# 编译
tsc i ...`,l:"others/TypeScript/index.html#安装",a:"安装"},"102.8":{t:"监视编译和在node下运行typescript",p:"",l:"others/TypeScript/index.html#监视编译和在node下运行typescript",a:"监视编译和在node下运行typescript"},"102.9":{t:"一、使用tsc -w进行随时热更新watch",p:`tsc -w

`,l:"others/TypeScript/index.html#一、使用tsc-w进行随时热更新watch",a:"一、使用tsc-w进行随时热更新watch"},"102.10":{t:"二、使用ts-node直接运行ts的node项目",p:`首先全局安装ts-node
npm install -g ts-node

直接进行ts-node 启动文件名
`,l:"others/TypeScript/index.html#二、使用ts-node直接运行ts的node项目",a:"二、使用ts-node直接运行ts的node项目"},"103.0":{t:"# 接口和对象类型",p:`
TypeScript 的核心原则之一是对值所具有的结构进行类型检查。我们使用接口（Interfaces）来定义对象的类型。接口是对象的状态(属性)和行为(方法)的抽象(描述)

`,l:"others/TypeScript/interface.html",a:"接口和对象类型"},"103.1":{t:"对象的类型",p:`在typescript中，我们定义对象的方式要用关键字interface（接口），我的理解是使用interface来定义一种约束，让数据的结构满足约束的格式。定义方式如下：
//这样写是会报错的 因为 ...`,l:"others/TypeScript/interface.html#对象的类型",a:"对象的类型"},"103.2":{t:"重名interface 会合并",p:`interface A{name:string}
interface A{age:number}

let a:A = {
    name:'zs',
    age:18
}

`,l:"others/TypeScript/interface.html#重名interface-会合并",a:"重名interface-会合并"},"103.3":{t:"继承",p:`interface A {
    name:stirng
}
interface B extends A {
    age:number
}

let obj:B = {
    age:18,
 ...`,l:"others/TypeScript/interface.html#继承",a:"继承"},"103.4":{t:"可选属性 使用`?`操作符",p:`可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。
可选属性的含义是该属性可以不存在，带有可选属性的接口与普通的接口定义差不多，在可选属性名字定义的后面 ...`,l:"others/TypeScript/interface.html#可选属性-使用-操作符",a:"可选属性-使用-操作符"},"103.5":{t:"任意属性",p:`需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：
//在这个例子当中我们看到接口中并没有定义C但是并没有报错
//应为我们定义了[propName: string ...`,l:"others/TypeScript/interface.html#任意属性",a:"任意属性"},"103.6":{t:"只读属性 readonly",p:`readonly只读属性是不允许被赋值的，只能读取
//这样写是会报错的
//应为a是只读的不允许重新赋值
interface Person {
    b?: string,
    readonl ...`,l:"others/TypeScript/interface.html#只读属性-readonly",a:"只读属性-readonly"},"103.7":{t:"添加函数",p:`interface Person {
    cb:()=&gt;void
}
const person: Person = {
    cb:()=&gt;{
        console.log ...`,l:"others/TypeScript/interface.html#添加函数",a:"添加函数"},"104.0":{t:"# 对象类型",p:`这里所说的对象类型，就是我们常说的函数、{}、数组、类
`,l:"others/TypeScript/object.html",a:"对象类型"},"104.1":{t:"object,Object 和类型",p:`
object

object 类型用于表示所有的非原始类型，即我们不能把 number、string、boolean、symbol 等 原始类型赋值给 object。在严格模式下，null 和 un ...`,l:"others/TypeScript/object.html#",a:""},"105.0":{t:"# tsconfig.json 配置文件",p:`{
  &quot;compilerOptions&quot;: {
    /* 基本选项 */

    // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5' ...`,l:"others/TypeScript/tsconfig.html",a:"tsconfig-json-配置文件"},"106.0":{t:"# 类型推论|类型别名",p:`
`,l:"others/TypeScript/type.html",a:"类型推论-类型别名"},"106.1":{t:"类型推论",p:`TypeScript里，在有些没有明确指出类型的地方，类型推论会帮助提供类型。
/* 定义变量时赋值了, 推断为对应的类型 */
let n1 = 10 // number
// 相当于 let n1 ...`,l:"others/TypeScript/type.html#类型推论",a:"类型推论"},"106.2":{t:"类型别名",p:`type 关键字（可以给一个类型定义一个名字）多用于复合类型

定义类型别名

type s = string

let str:s = &quot;abcd&quot;

console.log(s ...`,l:"others/TypeScript/type.html#类型别名",a:"类型别名"},"107.0":{t:"# Axios",p:"",l:"others/axios/index.html",a:"axios"},"107.1":{t:"什么是axios？",p:`Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。
`,l:"others/axios/index.html#什么是axios",a:"什么是axios"},"107.2":{t:"安装",p:`使用npm：
npm install axios

使用cdn：


`,l:"others/axios/index.html#安装",a:"安装"},"107.3":{t:"使用",p:`
执行GET请求

let name = 'zs'
axios.get(\`/api/xxxx?name=\${name}\`)
  .then(function (result) {
    consol ...`,l:"others/axios/index.html#使用",a:"使用"},"107.4":{t:"拦截器",p:`拦截器，我们大致可以分为两类， 一类是 请求接口前的统一处理（请求拦截） 、 一类是 请求接口后的统一处理（响应拦截）

请求拦截

请求调整
用户标识


响应拦截

网络错误处理
授权错误处理
普 ...`,l:"others/axios/index.html#拦截器",a:"拦截器"},"107.5":{t:"错误处理",p:`axios.get('/user/12345')
  .catch(function (error) {
    if (error.response) {
      // 发出请求后，服务器用状态 ...`,l:"others/axios/index.html#错误处理",a:"错误处理"},"108.0":{t:"# 封装 axios",p:"",l:"others/axios/封装axios.html",a:"封装-axios"},"108.1":{t:"1.封装目的",p:`实现一个简单的封装，主要实现以下目的：

实现请求、响应拦截器功能
api 集中式管理
请求头设置，一般可以在请求头中携带公共的参数：token
可以简化服务器返回的数据，处理 http 网络错误

`,l:"others/axios/封装axios.html#_1-封装目的",a:"_1-封装目的"},"108.2":{t:"2.初始化 axios 实例",p:`import axios from 'axios'
let apiBaseUrl = ''
const service = axios.create({
  baseURL: apiBaseUrl,  ...`,l:"others/axios/封装axios.html#_2-初始化-axios-实例",a:"_2-初始化-axios-实例"},"108.3":{t:"3.设置请求拦截",p:`// 创建请求拦截
service.interceptors.request.use(
  (config) =&gt; {
    // 如果开启 token 认证
    if (serverCo ...`,l:"others/axios/封装axios.html#_3-设置请求拦截",a:"_3-设置请求拦截"},"108.4":{t:"4.设置响应拦截",p:`// 创建响应拦截
service.interceptors.response.use(
  (res) =&gt; {
    let data = res.data
    // 处理自己的业务逻 ...`,l:"others/axios/封装axios.html#_4-设置响应拦截",a:"_4-设置响应拦截"},"108.5":{t:"5.封装常见的方法",p:`//get
export function getAction(url, parameter) {
  return service({
    url: url,
    method: 'get' ...`,l:"others/axios/封装axios.html#_5-封装常见的方法",a:"_5-封装常见的方法"},"108.6":{t:"6.使用",p:`示例：
let param = {
    username:'zs',
    password:'123456'
}

// 定义接口方法
const login = (params)=&gt;p ...`,l:"others/axios/封装axios.html#_6-使用",a:"_6-使用"},"108.7":{t:"相关文章",p:`关于 Axios 的再再再封装，总是会有所不一样
十分钟封装一个好用的 axios，省时又省力他不香吗
前端架构带你 封装 axios，一次封装终身受益「美团后端连连点赞」
`,l:"others/axios/封装axios.html#相关文章",a:"相关文章"},"109.0":{t:"# Git基本命令使用",p:"",l:"others/git/git.html",a:"git基本命令使用"},"109.1":{t:"账户配置",p:`
配置全局账户，对所有 Git 仓库有效

git config --global user.name 'Your Name'
git config --global user.email 'Your ...`,l:"others/git/git.html#账户配置",a:"账户配置"},"109.2":{t:"本地基本操作",p:"",l:"others/git/git.html#本地基本操作",a:"本地基本操作"},"109.3":{t:"初始化本地库",p:`git init

`,l:"others/git/git.html#初始化本地库",a:"初始化本地库"},"109.4":{t:"查看状态",p:`git status

`,l:"others/git/git.html#查看状态",a:"查看状态"},"109.5":{t:"添加暂存区 git add",p:`
将当前目录及其子目录下所有变更添加到暂存区

git add .


将本地库所有变更添加到暂存区

git add -A


指定文件添加暂存区

git add file1 file2 ...
 ...`,l:"others/git/git.html#添加暂存区-git-add",a:"添加暂存区-git-add"},"109.6":{t:"提交本地库 git commit",p:`
提交所有变更

git commit
# or
git commit -m '日志信息' -a


提交当前目录及其子目录的变更

git commit -m '日志信息' .


提交指定文件

 ...`,l:"others/git/git.html#提交本地库-git-commit",a:"提交本地库-git-commit"},"109.7":{t:"比较差异 git diff",p:`
比较工作区和暂存区的所有差异，只能查看旧文件的变更（包括修改和删除），不能查看新文件（因为新文件还为被 git 追踪）

git diff


比较指定文件工作区和暂存区的差异

git diff  ...`,l:"others/git/git.html#比较差异-git-diff",a:"比较差异-git-diff"},"109.8":{t:"查看日志信息 git log",p:`
查看简要日志信息

git reflog


查看详细日志信息

git log


查看极简日志信息

git log --oneline


查看最近 n 次的版本信息

git log -n
 ...`,l:"others/git/git.html#查看日志信息-git-log",a:"查看日志信息-git-log"},"109.9":{t:"分支命令",p:"",l:"others/git/git.html#分支命令",a:"分支命令"},"109.10":{t:"创建分支",p:`
基于当前分支创建分支

git branch 新分支


基于指定分支创建分支

git branch 新分支 已有分支


基于某个 commit 创建分支

git branch 新分支 com ...`,l:"others/git/git.html#创建分支",a:"创建分支"},"109.11":{t:"查看本地分支",p:`git branch -v

`,l:"others/git/git.html#查看本地分支",a:"查看本地分支"},"109.12":{t:"删除分支",p:`
安全删除本地分支

git branch -d 分支


强制删除本地分支

git branch -D 分支

`,l:"others/git/git.html#删除分支",a:"删除分支"},"109.13":{t:"切换分支",p:`git checkout 分支名

`,l:"others/git/git.html#切换分支",a:"切换分支"},"109.14":{t:"合并分支",p:`merge 和 rebase的区别有待学习实践 :worried:

将 A 分支合并到当前分支，且为 merge 创建 commit

git merge A


将 A 分支合并到 B 分支，且为 ...`,l:"others/git/git.html#合并分支",a:"合并分支"},"109.15":{t:"版本穿梭与回滚",p:`
工作区指定文件恢复成和暂存区一样

git checkout file1 file2 ...

# tips in the Git Bash
# use &quot;git restore &lt; ...`,l:"others/git/git.html#版本穿梭与回滚",a:"版本穿梭与回滚"},"109.16":{t:"修改 commit 记录",p:`
往最后一次 commit 追加记录，而不新建 commit - reference

git commit --amend


合并 commit 记录 - reference

git rebas ...`,l:"others/git/git.html#修改-commit-记录",a:"修改-commit-记录"},"109.17":{t:"远程仓库交互",p:"",l:"others/git/git.html#远程仓库交互",a:"远程仓库交互"},"109.18":{t:"git remote",p:`
查看所有远程仓库地址别名

git remote -v


为远程仓库起别名

git remote add 别名 地址


删除远程仓库别名

git remote remove 别名


修改别 ...`,l:"others/git/git.html#git-remote",a:"git-remote"},"109.19":{t:"git clone",p:`
克隆远程仓库到本地

git clone 地址


克隆远程仓库指定分支到本地

git clone -b 远程仓库分支名 地址

`,l:"others/git/git.html#git-clone",a:"git-clone"},"109.20":{t:"git pull",p:`
拉取远程分支，并与本地分支合并

git pull 别名 分支名

`,l:"others/git/git.html#git-pull",a:"git-pull"},"109.21":{t:"git push",p:`
推送本地指定分支到仓库指定分支

git push 别名 本地分支:远程分支


如果远程分支被省略，表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建 ...`,l:"others/git/git.html#git-push",a:"git-push"},"110.0":{t:"# git安装",p:"",l:"others/git/install.html",a:"git安装"},"110.1":{t:"**1.Git官网下载安装git客户端：https://git-scm.com/downloads/**",p:`

`,l:"others/git/install.html#_1-git官网下载安装git客户端-https-git-scm-com-downloads",a:"_1-git官网下载安装git客户端-https-git-scm-com-downloads"},"110.2":{t:"**2.安装完成后，在空白处点鼠标右键选择“Git Bush Here” ，打开git bash命令窗口**",p:`

`,l:"others/git/install.html#_2-安装完成后-在空白处点鼠标右键选择-git-bush-here-打开git-bash命令窗口",a:"_2-安装完成后-在空白处点鼠标右键选择-git-bush-here-打开git-bash命令窗口"},"110.3":{t:"**3.配置用户名和邮箱**",p:`git config —global user.name “xxx”
git config —global user.email “xxxx@xxx.com”
配置后结果：git config --l ...`,l:"others/git/install.html#_3-配置用户名和邮箱",a:"_3-配置用户名和邮箱"},"110.4":{t:"4.执行命令生成ssh pub_key",p:`ssh-keygen -t rsa -C &quot;XXXX@XXX.com&quot;

直接按三次回车，会生成 id_rsa.pub 文件，这个文件一般在C盘的.ssh目录下。
`,l:"others/git/install.html#_4-执行命令生成ssh-pub-key",a:"_4-执行命令生成ssh-pub-key"},"110.5":{t:"**5.打开生成后的id_rsa.pub文件，copy内容到git ssh个人设置**",p:`!image-20230222160826601
!image-20230222161109182
`,l:"others/git/install.html#_5-打开生成后的id-rsa-pub文件-copy内容到git-ssh个人设置",a:"_5-打开生成后的id-rsa-pub文件-copy内容到git-ssh个人设置"},"110.6":{t:"**6.本地拉取代码**",p:`就可以克隆ssh地址了
`,l:"others/git/install.html#_6-本地拉取代码",a:"_6-本地拉取代码"},"110.7":{t:"TortoiseGit安装",p:`TortoiseGit安装和配置详细说明
`,l:"others/git/install.html#tortoisegit安装",a:"tortoisegit安装"},"111.0":{t:"# vue3 项目配置文档",p:"",l:"project/configuration.html",a:"vue3-项目配置文档"},"111.1":{t:"一、搭建后台管理系统模板",p:"",l:"project/configuration.html#一、搭建后台管理系统模板",a:"一、搭建后台管理系统模板"},"111.2":{t:"1.1 项目初始化",p:"搭建一个 vue3 版本的后台管理系统，一个项目要有统一的规范，需要使用 eslint+stylelint+prettier 来对我们的代码质量做检测和修复，需要使用 husky 来做 commit  ...",l:"project/configuration.html#_1-1-项目初始化",a:"_1-1-项目初始化"},"111.3":{t:"1.1.1 环境准备",p:`
node 16+
pnpm 8.3.1

`,l:"project/configuration.html#_1-1-1-环境准备",a:"_1-1-1-环境准备"},"111.4":{t:"1.1.2 初始化项目",p:`本项目使用 vite 进行构建，vite 官方中文文档参考：cn.vitejs.dev/guide/
pnpm:performant npm ，意味“高性能的 npm”。pnpm由 npm/yarn  ...`,l:"project/configuration.html#_1-1-2-初始化项目",a:"_1-1-2-初始化项目"},"111.5":{t:"1.2 项目配置",p:"",l:"project/configuration.html#_1-2-项目配置",a:"_1-2-项目配置"},"111.6":{t:"一、eslint 配置",p:`eslint 中文官网:http://eslint.cn/
ESLint 最初是由Nicholas C. Zakas 于 2013 年 6 月创建的开源项目。它的目标是提供一个插件化的javascri ...`,l:"project/configuration.html#一、eslint-配置",a:"一、eslint-配置"},"111.7":{t:"1.1.1 vue3 环境代码校验插件",p:`# 让所有与prettier规则存在冲突的Eslint rules失效，并使用prettier进行代码检查
&quot;eslint-config-prettier&quot;: &quot;^8.6 ...`,l:"project/configuration.html#_1-1-1-vue3-环境代码校验插件",a:"_1-1-1-vue3-环境代码校验插件"},"111.8":{t:"1.1.2 修改.eslintrc.cjs 配置文件",p:`// @see https://eslint.bootcss.com/docs/rules/

module.exports = {
  env: {
    browser: true,
    e ...`,l:"project/configuration.html#_1-1-2-修改-eslintrc-cjs-配置文件",a:"_1-1-2-修改-eslintrc-cjs-配置文件"},"111.9":{t:"2.5 集成 sass",p:"我们目前在组件内部已经可以使用 scss 样式,因为在配置 styleLint 工具的时候，项目当中已经安装过 sass sass-loader,因此我们再组件内可以使用 scss 语法！！！需要加上 ...",l:"project/configuration.html#_2-5-集成-sass",a:"_2-5-集成-sass"},"111.10":{t:"2.6 mock 数据",p:`安装依赖:https://www.npmjs.com/package/vite-plugin-mock
pnpm install -D vite-plugin-mock mockjs

在 vite. ...`,l:"project/configuration.html#_2-6-mock-数据",a:"_2-6-mock-数据"},"111.11":{t:"2.7 axios 二次封装",p:`在开发项目的时候避免不了与后端进行交互,因此我们需要使用 axios 插件实现发送网络请求。在开发项目的时候
我们经常会把 axios 进行二次封装。
目的:
1:使用请求拦截器，可以在请求拦截器中处 ...`,l:"project/configuration.html#_2-7-axios-二次封装",a:"_2-7-axios-二次封装"},"111.12":{t:"2.8 API 接口统一管理",p:`在开发项目的时候,接口可能很多需要统一管理。在 src 目录下去创建 api 文件夹去统一管理项目的接口；
比如:下面方式
//统一管理咱们项目用户相关的接口

import request from ...`,l:"project/configuration.html#_2-8-api-接口统一管理",a:"_2-8-api-接口统一管理"},"112.0":{t:"Nginx 部署刷新 404 问题",p:`location / {
root   C:\\Users....;
index  index.html index.htm;
try_files $uri $uri/ @Qrouter; // 加上这 ...`,l:"server/linux/nginx.html",a:"nginx-部署刷新-404-问题"},"112.1":{t:"Nginx部署项目",p:`1、 yarn build打包项目
2、 打开nginx.conf文件，配置对应的信息
3、 检查配置文件是否配置成功
nginx -t -c D:\\nginx-1.16.1\\conf\\nginx.c ...`,l:"server/linux/nginx.html#nginx部署项目",a:"nginx部署项目"},"113.0":{t:"# MySQL 数据库的常用命令",p:`MySQL 数据库的常用命令包括管理数据库和表的命令、数据操作命令以及授权和权限管理命令。下面列出了一些常用的 MySQL 命令：
`,l:"server/mysql/command.html",a:"mysql-数据库的常用命令"},"113.1":{t:"管理数据库和表的命令",p:`
CREATE DATABASE database_name;：创建一个新的数据库。
DROP DATABASE database_name;：删除一个数据库。
USE database_name;： ...`,l:"server/mysql/command.html#管理数据库和表的命令",a:"管理数据库和表的命令"},"113.2":{t:"数据操作命令",p:`
INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);：向表中插入数据。
SELECT column ...`,l:"server/mysql/command.html#数据操作命令",a:"数据操作命令"},"113.3":{t:"授权和权限管理命令",p:`
GRANT privileges ON database_name.table_name TO 'username'@'hostname';：授予用户特定数据库或表的权限。
REVOKE privi ...`,l:"server/mysql/command.html#授权和权限管理命令",a:"授权和权限管理命令"},"114.0":{t:"# MySQL 字段的数据类型",p:`MySQL 提供了多种数据类型，用于定义表中列（字段）的数据类型。每个数据类型都有特定的存储需求和可接受的值范围。以下是 MySQL 中常用的数据类型：
`,l:"server/mysql/dataType.html",a:"mysql-字段的数据类型"},"114.1":{t:"整数类型",p:`
TINYINT：一个非常小的整数，范围为-128 到 127（有符号）或 0 到 255（无符号）。
SMALLINT：较小的整数，范围为-32,768 到 32,767（有符号）或 0 到 65, ...`,l:"server/mysql/dataType.html#整数类型",a:"整数类型"},"114.2":{t:"浮点数类型",p:`
FLOAT：单精度浮点数，范围为-3.402823466E+38 到-1.175494351E-38、0 和 1.175494351E-38 到 3.402823466E+38。
DOUBLE：双精 ...`,l:"server/mysql/dataType.html#浮点数类型",a:"浮点数类型"},"114.3":{t:"字符串类型",p:`
CHAR：固定长度的字符串，最大长度为 255 个字符。
VARCHAR：可变长度的字符串，最大长度为 65535 个字符。
TEXT：用于存储较长文本数据的字符串类型，最大长度为 65535 个字 ...`,l:"server/mysql/dataType.html#字符串类型",a:"字符串类型"},"114.4":{t:"日期和时间类型",p:`
DATE：存储日期，格式为'YYYY-MM-DD'。
TIME：存储时间，格式为'HH:MM:SS'。
DATETIME：存储日期和时间，格式为'YYYY-MM-DD HH:MM:SS'。
TIME ...`,l:"server/mysql/dataType.html#日期和时间类型",a:"日期和时间类型"},"114.5":{t:"其他常用类型",p:`
BOOLEAN：存储布尔值（true 或 false）。
ENUM：存储枚举值，从一个预定义的值列表中选择一个值。
SET：存储一个或多个预定义的值。

::: tip
除了上述常见的数据类型，My ...`,l:"server/mysql/dataType.html#其他常用类型",a:"其他常用类型"},"115.0":{t:"数据库概述",p:`数据库是用于组织和存储大量结构化数据的集合。它是一种数据管理系统，允许用户定义、创建、操作和控制访问数据的方法。数据库的设计和使用旨在提供高效的数据存储、快速的数据检索和安全的数据管理。
数据库通常由 ...`,l:"server/mysql/index.html",a:"数据库概述"},"115.1":{t:"MySQL介绍",p:"MySQL是一种开源的关系型数据库管理系统，由瑞典公司MySQL AB开发并最终由Oracle Corporation收购。MySQL被广泛用于各种规模的应用程序和网站，因其易用性、性能和可靠性而受到 ...",l:"server/mysql/index.html#mysql介绍",a:"mysql介绍"},"116.0":{t:"# 安装Mysql",p:"",l:"server/mysql/install.html",a:"安装mysql"},"117.0":{t:"# MySQL 基本使用",p:`MySQL 的基本使用包括连接到 MySQL 服务器、创建数据库、创建表、插入数据、查询数据、更新数据和删除数据等操作。下面是 MySQL 的基本使用步骤：
`,l:"server/mysql/operation.html",a:"mysql-基本使用"},"117.1":{t:"1. 连接到 MySQL 服务器",p:`使用 MySQL 客户端工具（如命令行客户端或图形化客户端工具）连接到 MySQL 服务器。

命令行客户端：打开命令行终端，运行命令mysql -u username -p，其中username是您 ...`,l:"server/mysql/operation.html#_1-连接到-mysql-服务器",a:"_1-连接到-mysql-服务器"},"117.2":{t:"2. 创建数据库",p:`在 MySQL 中创建一个新的数据库，用于存储数据。
CREATE DATABASE database_name;

将database_name替换为您希望创建的数据库的名称。
`,l:"server/mysql/operation.html#_2-创建数据库",a:"_2-创建数据库"},"117.3":{t:"3. 选择数据库",p:`使用以下命令选择要在其中执行操作的数据库。
USE database_name;

将database_name替换为您要使用的数据库的名称。
`,l:"server/mysql/operation.html#_3-选择数据库",a:"_3-选择数据库"},"117.4":{t:"4. 创建表",p:`在所选的数据库中创建一个新的表，定义表的列和数据类型。
CREATE TABLE table_name (
  column1 datatype,
  column2 datatype,
  ...
 ...`,l:"server/mysql/operation.html#_4-创建表",a:"_4-创建表"},"117.5":{t:"5. 插入数据",p:`使用以下命令向表中插入数据。
INSERT INTO table_name (column1, column2, ...)
VALUES (value1, value2, ...);

将table_ ...`,l:"server/mysql/operation.html#_5-插入数据",a:"_5-插入数据"},"117.6":{t:"6. 查询数据",p:`使用 SELECT 语句从表中检索数据。
SELECT column1, column2, ...
FROM table_name
WHERE condition;

将column1、column2 ...`,l:"server/mysql/operation.html#_6-查询数据",a:"_6-查询数据"},"117.7":{t:"7. 更新数据",p:`使用 UPDATE 语句更新表中的数据。
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
 ...`,l:"server/mysql/operation.html#_7-更新数据",a:"_7-更新数据"},"117.8":{t:"8. 删除数据",p:`使用 DELETE 语句从表中删除数据。
DELETE FROM table_name
WHERE condition;

将table_name替换为要删除数据的表的名称，condition替换为删 ...`,l:"server/mysql/operation.html#_8-删除数据",a:"_8-删除数据"},"118.0":{t:"# Express",p:`官网传送门

基于 Node.js 平台，快速、开放、极简的 Web 开发框架

Express 是用于快速创建服务器的第三方模块。
`,l:"server/nodejs/Express.html",a:"express"},"118.1":{t:"Express 初体验",p:"",l:"server/nodejs/Express.html#express-初体验",a:"express-初体验"},"118.2":{t:"基本使用",p:`安装 Express：
npm install express

创建服务器，监听客户端请求，并返回内容：
const express = require('express')
// 创建 web 服 ...`,l:"server/nodejs/Express.html#基本使用",a:"基本使用"},"118.3":{t:"托管静态资源",p:`
通过 express.static() 方法可创建静态资源服务器，向外开放访问静态资源。
Express 在指定的静态目录中查找文件，并对外提供资源的访问路径，存放静态文件的目录名不会出现在 URL ...`,l:"server/nodejs/Express.html#托管静态资源",a:"托管静态资源"},"118.4":{t:"Express 路由",p:`创建路由模块：
// router.js

const express = require('express')
// 创建路由对象
const router = express.Router()

 ...`,l:"server/nodejs/Express.html#express-路由",a:"express-路由"},"118.5":{t:"Express 中间件",p:`
中间件是指流程的中间处理环节
服务器收到请求后，可先调用中间件进行预处理
中间件是一个函数，包含 req, res, next 三个参数，next() 参数把流转关系交给下一个中间件或路由

中间件 ...`,l:"server/nodejs/Express.html#express-中间件",a:"express-中间件"},"118.6":{t:"全局中间件",p:`
通过 app.use() 定义的中间件为全局中间件

const express = require('express')
const app = express()

// 定义第一个全局中间件
 ...`,l:"server/nodejs/Express.html#全局中间件",a:"全局中间件"},"118.7":{t:"局部中间件",p:`const express = require('express')
const app = express()

// 定义中间件函数
const mw1 = (req, res, next) =& ...`,l:"server/nodejs/Express.html#局部中间件",a:"局部中间件"},"118.8":{t:"中间件分类",p:`
应用级别的中间件


通过 app.use() 或 app.get() 或 app.post() ，绑定到 app 实例上的中间件


路由级别的中间件


绑定到 express.Router() ...`,l:"server/nodejs/Express.html#中间件分类",a:"中间件分类"},"118.9":{t:"CORS 跨域资源共享",p:"",l:"server/nodejs/Express.html#cors-跨域资源共享",a:"cors-跨域资源共享"},"118.10":{t:"cors 中间件解决跨域",p:`
安装中间件：npm install cors
导入中间件：const cors = require('cors')
配置中间件：app.use(cors())

`,l:"server/nodejs/Express.html#cors-中间件解决跨域",a:"cors-中间件解决跨域"},"118.11":{t:"CORS",p:`
CORS（Cross-Origin Resource Sharing，跨域资源共享）解决跨域，是通过 HTTP 响应头决定浏览器是否阻止前端 JS 代码跨域获取资源
浏览器的同源安全策略默认会阻止网 ...`,l:"server/nodejs/Express.html#cors",a:"cors"},"118.12":{t:"CORS 常见响应头",p:`
Access-Control-Allow-Origin：制定了允许访问资源的外域 URL

res.setHeader('Access-Control-Allow-Origin', 'http:// ...`,l:"server/nodejs/Express.html#cors-常见响应头",a:"cors-常见响应头"},"118.13":{t:"CORS 请求分类",p:"",l:"server/nodejs/Express.html#cors-请求分类",a:"cors-请求分类"},"118.14":{t:"简单请求",p:`
请求方式：GET、POST、HEAD 三者之一
HTTP 头部信息不超过以下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、Dow ...`,l:"server/nodejs/Express.html#简单请求",a:"简单请求"},"118.15":{t:"预检请求",p:`
请求方式为 GET、POST、HEAD 之外的请求 Method 类型
请求头中包含自定义头部字段
向服务器发送了 application/json 格式的数据

在浏览器与服务器正式通信之前，浏览 ...`,l:"server/nodejs/Express.html#预检请求",a:"预检请求"},"119.0":{t:"# 使用 node 做一个简单的爬虫",p:"",l:"server/nodejs/crawler.html",a:"使用-node-做一个简单的爬虫"},"119.1":{t:"1. 初始化项目",p:`npm init -y

`,l:"server/nodejs/crawler.html#_1-初始化项目",a:"_1-初始化项目"},"119.2":{t:"2. 安装插件 cheerio",p:`npm install cheerio

Cheerio 解析标记并提供用于遍历/操作结果数据结构的 API。它不会像网络浏览器那样解释结果。具体来说，它不会生成视觉渲染、应用 CSS、加载外部资源或 ...`,l:"server/nodejs/crawler.html#_2-安装插件-cheerio",a:"_2-安装插件-cheerio"},"119.3":{t:"3. 访问要爬取的网站",p:`
爬取豆瓣网 https://movie.douban.com/top250
!img
根据浏览器检查元素区，要爬取的内容
!img

`,l:"server/nodejs/crawler.html#_3-访问要爬取的网站",a:"_3-访问要爬取的网站"},"119.4":{t:"4。 创建 index.js 文件并编写代码",p:`// 引入模块
const https = require('https')
const cheerio = require('cheerio')
const fs = require('fs')

 ...`,l:"server/nodejs/crawler.html#_4。-创建-index-js-文件并编写代码",a:"_4。-创建-index-js-文件并编写代码"},"119.5":{t:"5. 运行脚本",p:`node index.js

`,l:"server/nodejs/crawler.html#_5-运行脚本",a:"_5-运行脚本"},"119.6":{t:"6. 爬取成功",p:`!img
这时会多出来一个名叫files.json的 json 文件
里面就是爬取出来的内容了
[
  {
    &quot;title&quot;: &quot;肖申克的救赎 / The Shaw ...`,l:"server/nodejs/crawler.html#_6-爬取成功",a:"_6-爬取成功"},"120.0":{t:"# Nodejs 介绍",p:`官网传送门
`,l:"server/nodejs/index.html",a:"nodejs-介绍"},"120.1":{t:"初识 Nodejs",p:`
Node.js® is an open-source, cross-platform JavaScript runtime environment.
Node.js® 是一个基于 Chrome V8 ...`,l:"server/nodejs/index.html#初识-nodejs",a:"初识-nodejs"},"120.2":{t:"Nodejs 的特点",p:`
异步、非阻塞 IO 模型
事件循环
单线程
总结：轻量和高效
Node.js 的性能和效率非常高。

传统的 Java 语言是一个请求开启一个线程，当请求处理完毕后就关闭这个线程。而 Node.js ...`,l:"server/nodejs/index.html#nodejs-的特点",a:"nodejs-的特点"},"120.3":{t:"使用 Node.js 时的劣势",p:`
程序运行不稳定，可能会出现服务不可用的情况
程序运行效率较低，每秒的请求数维持在一个较低的水平

`,l:"server/nodejs/index.html#使用-node-js-时的劣势",a:"使用-node-js-时的劣势"},"121.0":{t:"# Nodejs内置模块",p:"",l:"server/nodejs/innerModule.html",a:"nodejs内置模块"},"121.1":{t:"fs 文件系统模块",p:`
fs 模块中所有的操作都有两种形式可供选择:同步和异步
同步文件系统会阻塞程序的执行，也就是除非操作完毕，否则不会向下执行代码
异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返 ...`,l:"server/nodejs/innerModule.html#fs-文件系统模块",a:"fs-文件系统模块"},"121.2":{t:"读取文件",p:"",l:"server/nodejs/innerModule.html#读取文件",a:"读取文件"},"121.3":{t:"简单文件读取",p:`语法格式：
fs.readFile(path[, options], callback)


path：文件路径
options：配置选项，若是字符串则指定编码格式

encoding：编码格式
fl ...`,l:"server/nodejs/innerModule.html#简单文件读取",a:"简单文件读取"},"121.4":{t:"流式文件读取",p:`
简单文件读取的方式会一次性读取文件内容到内存中，若文件较大，会占用过多内存影响系统性能，且读取速度慢
大文件适合用流式文件读取，它会分多次将文件读取到内存中

var fs = require('f ...`,l:"server/nodejs/innerModule.html#流式文件读取",a:"流式文件读取"},"121.5":{t:"写入文件",p:"",l:"server/nodejs/innerModule.html#写入文件",a:"写入文件"},"121.6":{t:"简单文件写入",p:`语法格式：
fs.writeFile(file, data[, options], callback)


file：文件路径
data：写入内容
options：配置选项，包含 encoding,  ...`,l:"server/nodejs/innerModule.html#简单文件写入",a:"简单文件写入"},"121.7":{t:"流式文件写入",p:`// 同步、异步、简单文件的写入都不适合大文件的写入，性能较差，容易导致内存溢出
var fs = require('fs')

// 创建一个可写流
var ws = fs.createWriteS ...`,l:"server/nodejs/innerModule.html#流式文件写入",a:"流式文件写入"},"121.8":{t:"Buffer 缓冲区",p:`
Buffer 缓冲区文档


Buffer 的结构与数组类似，操作方法也与数组类似
数组不能存储二进制文件，Buffer 是专门存储二进制数据的
Buffer 存储的是二进制数据，显示时以 16 进 ...`,l:"server/nodejs/innerModule.html#buffer-缓冲区",a:"buffer-缓冲区"},"121.9":{t:"路径动态拼接问题 `__dirname`",p:`
在使用 fs 模块操作文件时，如果提供的操作路径是以 ./ 或 ../ 开头的相对路径时，容易出现路径动态拼接错误的问题
原因：代码在运行的时候，会以执行 node 命令时所处的目录，动态拼接出被操 ...`,l:"server/nodejs/innerModule.html#路径动态拼接问题-dirname",a:"路径动态拼接问题-dirname"},"121.10":{t:"其它操作",p:`验证路径是否存在：

fs.exists(path, callback)
fs.existsSync(path)

获取文件信息：

fs.stat(path, callback)
fs.stat(p ...`,l:"server/nodejs/innerModule.html#其它操作",a:"其它操作"},"121.11":{t:"path 路径模块",p:`path 模块是 Node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求。
`,l:"server/nodejs/innerModule.html#path-路径模块",a:"path-路径模块"},"121.12":{t:"路径拼接 `path.join()`",p:`const path = require('path')
const fs = require('fs')

// 注意 ../ 会抵消前面的路径
// ./ 会被忽略
const pathStr = ...`,l:"server/nodejs/innerModule.html#路径拼接-path-join",a:"路径拼接-path-join"},"121.13":{t:"获取路径中文件名 `path.basename()`",p:`使用 path.basename() 方法，可以获取路径中的最后一部分，常通过该方法获取路径中的文件名
path.basename(path[, ext])


path: 文件路径
ext: 文件扩 ...`,l:"server/nodejs/innerModule.html#获取路径中文件名-path-basename",a:"获取路径中文件名-path-basename"},"121.14":{t:"获取路径中文件扩展名 `path.extname()`",p:`const path = require('path')

const fpath = '/a/b/c/index.html'

const fext = path.extname(fpath)
co ...`,l:"server/nodejs/innerModule.html#获取路径中文件扩展名-path-extname",a:"获取路径中文件扩展名-path-extname"},"121.15":{t:"http 模块",p:`http 模块是 Node.js 官方提供的、用来创建 web 服务器的模块。
`,l:"server/nodejs/innerModule.html#http-模块",a:"http-模块"},"121.16":{t:"创建基本 Web 服务器",p:`const http = require('http')

// 创建 web 服务器实例
const server = http.createServer()

// 为服务器实例绑定 reques ...`,l:"server/nodejs/innerModule.html#创建基本-web-服务器",a:"创建基本-web-服务器"},"121.17":{t:"实现简陋路由效果",p:`const http = require('http')
const server = http.createServer()

server.on('request', (req, res) =&g ...`,l:"server/nodejs/innerModule.html#实现简陋路由效果",a:"实现简陋路由效果"},"122.0":{t:"# 模块化",p:"",l:"server/nodejs/module.html",a:"模块化"},"122.1":{t:"基本概念",p:"",l:"server/nodejs/module.html#基本概念",a:"基本概念"},"122.2":{t:"什么是模块化",p:`概念：

模块化是指解决一个复杂问题时，自顶向下逐层把系统划分为若干模块的过程，模块是可组合、分解和更换的单元。
模块化可提高代码的复用性和可维护性，实现按需加载。
模块的内部数据、实现是私有的, 只 ...`,l:"server/nodejs/module.html#什么是模块化",a:"什么是模块化"},"122.3":{t:"模块化的好处",p:`
避免命名空间的冲突
提高代码的复用性
提高维护性
更好的分离，实现按需加载

`,l:"server/nodejs/module.html#模块化的好处",a:"模块化的好处"},"122.4":{t:"Nodejs 中模块化",p:"",l:"server/nodejs/module.html#nodejs-中模块化",a:"nodejs-中模块化"},"122.5":{t:"Node.js 中模块的分类",p:`
内置模块
自定义模块
第三方模块

`,l:"server/nodejs/module.html#node-js-中模块的分类",a:"node-js-中模块的分类"},"122.6":{t:"Node.js 中的模块作用域",p:`
和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域
防止全局变量污染

`,l:"server/nodejs/module.html#node-js-中的模块作用域",a:"node-js-中的模块作用域"},"122.7":{t:"模块作用域的成员",p:`
自定义模块中都有一个 module 对象，存储了和当前模块有关的信息
在自定义模块中，可以使用 module.exports 对象，将模块内的成员共享出去，供外界使用。导入自定义模块时，得到的就是  ...`,l:"server/nodejs/module.html#模块作用域的成员",a:"模块作用域的成员"},"122.8":{t:"CommonJS 模块化规范",p:`
每个模块内部，module 变量代表当前模块
module 变量是一个对象，module.exports 是对外的接口
加载某个模块即加载该模块的 module.exports 属性

`,l:"server/nodejs/module.html#commonjs-模块化规范",a:"commonjs-模块化规范"},"122.9":{t:"模块加载机制",p:`模块第一次加载后会被缓存，即多次调用 require() 不会导致模块的代码被执行多次，提高模块加载效率。
`,l:"server/nodejs/module.html#模块加载机制",a:"模块加载机制"},"122.10":{t:"内置模块加载",p:`内置模块加载优先级最高。
`,l:"server/nodejs/module.html#内置模块加载",a:"内置模块加载"},"122.11":{t:"自定义模块加载",p:`加载自定义模块时，路径要以 ./ 或 ../ 开头，否则会作为内置模块或第三方模块加载。
导入自定义模块时，若省略文件扩展名，则 Node.js 会按顺序尝试加载文件：

按确切的文件名加载
补全 . ...`,l:"server/nodejs/module.html#自定义模块加载",a:"自定义模块加载"},"122.12":{t:"第三方模块加载",p:`
若导入第三方模块， Node.js 会从当前模块的父目录开始，尝试从 /node_modules 文件夹中加载第三方模块。
如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件 ...`,l:"server/nodejs/module.html#第三方模块加载",a:"第三方模块加载"},"122.13":{t:"目录作为模块加载",p:`当把目录作为模块标识符进行加载的时候，有三种加载方式：

在被加载的目录下查找 package.json 的文件，并寻找 main 属性，作为 require() 加载的入口
如果没有 package ...`,l:"server/nodejs/module.html#目录作为模块加载",a:"目录作为模块加载"},"122.14":{t:"npm 与包",p:"",l:"server/nodejs/module.html#npm-与包",a:"npm-与包"},"122.15":{t:"包",p:`Node.js 中的第三方模块又叫做包
不同于 Node.js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。Node.js 中的包都是免费且开源的。

由于 Node ...`,l:"server/nodejs/module.html#包",a:"包"},"122.16":{t:"npm 安装",p:`在项目中安装包的命令
npm install 包的元整名称
或者
npm i 包的元整名称

现在也有其他的包管理工具，如 yarn、pnpm，
下载安装速度是比 npm 要快的
`,l:"server/nodejs/module.html#npm-安装",a:"npm-安装"},"122.17":{t:"通过切换源解决 npm 的下包速度慢的问题",p:`npm config get registry  # 查看当前包镜像源
npm config get registry=http:registry.npm.taobao.org/ # 切换源头
npm ...`,l:"server/nodejs/module.html#通过切换源解决-npm-的下包速度慢的问题",a:"通过切换源解决-npm-的下包速度慢的问题"},"122.18":{t:"开发包",p:`
注册 npm 账号
初始化包的基本结构

新建文件夹（包名），新建如下三个文件




package.json (包管理配置文件)
index.js (包的入口文件)
README.md (包的说 ...`,l:"server/nodejs/module.html#开发包",a:"开发包"},"122.19":{t:"模块的加载机制",p:`模块在第一次加载后会被缓存，多次调用 require()模块的代码只会被执行一次。不论是内置模块、用户自定义模块、还是第三方模块，他们都会优先从缓存中加载，从而提高模块的加载效率。
`,l:"server/nodejs/module.html#模块的加载机制",a:"模块的加载机制"},"122.20":{t:"内置模块的加载机制",p:`
内置模块的加载优先级最高

`,l:"server/nodejs/module.html#内置模块的加载机制",a:"内置模块的加载机制"},"122.21":{t:"自定义模块的加载机制",p:`
使用 require()加载自定义模块时，必须指定以./或../开头的路径标识符。在加载自定义模块时，如果没有指定./或../这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载。 ...`,l:"server/nodejs/module.html#自定义模块的加载机制",a:"自定义模块的加载机制"},"122.22":{t:"第三方模块的加载机制",p:`
如果传递给 require()的模块标识符不是一个内置模块，也没有以./或../开头，则 Nodejs 会从当前模块的父目录开始，尝试从/node_modules 文件夹中加载第三方模块
如果没有找 ...`,l:"server/nodejs/module.html#第三方模块的加载机制",a:"第三方模块的加载机制"},"122.23":{t:"目录作为模块",p:`
当把目录作为模块标识符，传递给 require()进行加载的时候，有三种加载方式

a. 在被加载的目录下查找一个叫做 package.json 的文件，并寻找 main 属性值作为 require ...`,l:"server/nodejs/module.html#目录作为模块",a:"目录作为模块"},"123.0":{t:"# 数据库和身份认证",p:"",l:"server/nodejs/mysql.html",a:"数据库和身份认证"},"123.1":{t:"Node 操作 mysql",p:"",l:"server/nodejs/mysql.html#node-操作-mysql",a:"node-操作-mysql"},"123.2":{t:"配置 mysql 模块",p:`
安装 mysql 模块

npm install mysql


建立连接

const mysql = require('mysql')

const db = mysql.createPool( ...`,l:"server/nodejs/mysql.html#配置-mysql-模块",a:"配置-mysql-模块"},"123.3":{t:"操作 mysql 数据库",p:`
查询数据

db.query('select * from users', (err, results) =&gt; {
  ...
})


插入数据

// ? 表示占位符
const sql  ...`,l:"server/nodejs/mysql.html#操作-mysql-数据库",a:"操作-mysql-数据库"},"123.4":{t:"Web 开发模式",p:"",l:"server/nodejs/mysql.html#web-开发模式",a:"web-开发模式"},"123.5":{t:"服务端渲染",p:`服务器发送给客户端的 HTML 页面，是在服务器通过字符串的拼接动态生成的。因此客户端不需要使用 Ajax 额外请求页面的数据。
app.get('/index.html', (req, res) = ...`,l:"server/nodejs/mysql.html#服务端渲染",a:"服务端渲染"},"123.6":{t:"前后端分离",p:`前后端分离的开发模式，依赖于 Ajax 技术的广泛应用。后端只负责提供 API 接口，前端使用 Ajax 调用接口。
优点：

开发体验好。前端专业页面开发，后端专注接口开发。
用户体验好。页面局部刷 ...`,l:"server/nodejs/mysql.html#前后端分离",a:"前后端分离"},"123.7":{t:"如何选择",p:`
企业级网站，主要功能是展示，没有复杂交互，且需要良好的 SEO，可考虑服务端渲染
后台管理项目，交互性强，无需考虑 SEO，可使用前后端分离
为同时兼顾首页渲染速度和前后端分离开发效率，可采用首屏服 ...`,l:"server/nodejs/mysql.html#如何选择",a:"如何选择"},"123.8":{t:"身份认证",p:"",l:"server/nodejs/mysql.html#身份认证",a:"身份认证"},"123.9":{t:"Session 认证机制",p:`服务端渲染推荐使用 Session 认证机制
`,l:"server/nodejs/mysql.html#session-认证机制",a:"session-认证机制"},"123.10":{t:"Session 工作原理",p:`!session
`,l:"server/nodejs/mysql.html#session-工作原理",a:"session-工作原理"},"123.11":{t:"Express 中使用 Session 认证",p:`
安装 express-session 中间件

npm install express-session


配置中间件

const session = require('express-sessi ...`,l:"server/nodejs/mysql.html#express-中使用-session-认证",a:"express-中使用-session-认证"},"123.12":{t:"JWT 认证机制",p:`前后端分离推荐使用 JWT（JSON Web Token）认证机制，是目前最流行的跨域认证解决方案
`,l:"server/nodejs/mysql.html#jwt-认证机制",a:"jwt-认证机制"},"123.13":{t:"JWT 工作原理",p:`Session 认证的局限性：

Session 认证机制需要配合 Cookie 才能实现。由于 Cookie 默认不支持跨域访问，所以，当涉及到前端跨域请求后端接口的时候，需要做很多额外的配置，才能 ...`,l:"server/nodejs/mysql.html#jwt-工作原理",a:"jwt-工作原理"},"123.14":{t:"Express 使用 JWT",p:`
安装


jsonwebtoken 用于生成 JWT 字符串
express-jwt 用于将 JWT 字符串解析还原成 JSON 对象

npm install jsonwebtoken expre ...`,l:"server/nodejs/mysql.html#express-使用-jwt",a:"express-使用-jwt"},"124.0":{t:"# npm 与 yarn 的命令对比",p:`下面是一个包含 npm 和 Yarn 命令对比的 Markdown 表格：



命令
npm
Yarn




初始化项目
npm init
yarn init


安装依赖项
npm instal ...`,l:"server/npm/command.html",a:"npm-与-yarn-的命令对比"},"125.0":{t:"# NPM：Node Package Manager（Node 包管理器）",p:"",l:"server/npm/index.html",a:"npm-node-package-manager-node-包管理器"},"125.1":{t:"什么是 npm？",p:`npm 是一个用于管理和共享 JavaScript 代码的工具。它是 Node.js 的默认包管理器，也是世界上最大的开源软件注册表。
npm 允许开发者轻松地安装、更新、卸载和共享 JavaScri ...`,l:"server/npm/index.html#什么是-npm",a:"什么是-npm"},"125.2":{t:"安装 npm",p:`npm 是随同 Node.js 一起安装的。当你安装 Node.js 时，npm 也会自动安装。
你可以通过在终端中运行以下命令来检查是否已安装 npm 并查看版本：
npm --version

如 ...`,l:"server/npm/index.html#安装-npm",a:"安装-npm"},"125.3":{t:"常用命令",p:`以下是一些常用的 npm 命令：

npm init：初始化一个新的 npm 项目，生成一个 package.json 文件。
npm install &lt;package-name&gt;：安装指 ...`,l:"server/npm/index.html#常用命令",a:"常用命令"},"125.4":{t:"package.json",p:`package.json 是每个 npm 项目的核心文件，其中包含了项目的配置信息、依赖项、脚本和其他元数据。
可以通过运行 npm init 命令来初始化一个新的项目，并生成 package.jso ...`,l:"server/npm/index.html#package-json",a:"package-json"},"125.5":{t:"使用依赖项",p:`使用 npm，你可以轻松地安装和管理项目的依赖项。在 package.json 文件的 dependencies 部分，你可以列出项目所需的包及其版本号。
当其他开发者获得你的项目时，他们可以使用 n ...`,l:"server/npm/index.html#使用依赖项",a:"使用依赖项"},"125.6":{t:"开发和发布包",p:`npm 不仅可以帮助你管理项目的依赖项，还可以帮助你开发和发布自己的包。
通过编写代码、创建 package.json 文件、定义脚本和使用 npm publish 命令，你可以将自己的包发布到 np ...`,l:"server/npm/index.html#开发和发布包",a:"开发和发布包"},"126.0":{t:"# 发布包到 npm 上",p:`本教程将向你展示如何发布自己的包到 npm 上。按照以下步骤进行操作：
`,l:"server/npm/publish.html",a:"发布包到-npm-上"},"126.1":{t:"步骤 1：注册 npm 账号",p:`如果你还没有 npm 账号，请访问 npm 官方网站（https://www.npmjs.com/）并注册一个账号。
`,l:"server/npm/publish.html#步骤-1-注册-npm-账号",a:"步骤-1-注册-npm-账号"},"126.2":{t:"步骤 2：初始化项目",p:`在你的项目目录中，打开终端，并执行以下命令来初始化项目：
npm init -y

`,l:"server/npm/publish.html#步骤-2-初始化项目",a:"步骤-2-初始化项目"},"126.3":{t:"步骤 3：编写代码",p:`在项目目录中，编写你的包的代码。可以创建一个或多个 JavaScript 文件，实现你的功能逻辑。
`,l:"server/npm/publish.html#步骤-3-编写代码",a:"步骤-3-编写代码"},"126.4":{t:"步骤 4：准备发布文件",p:`确保在你的项目中包含以下文件：

package.json：这个文件由 npm init 命令生成，并包含了你的包的基本信息。
README.md：这是你的包的说明文档，提供关于包的介绍、使用方法和示 ...`,l:"server/npm/publish.html#步骤-4-准备发布文件",a:"步骤-4-准备发布文件"},"126.5":{t:"步骤 5：发布包",p:`
使用终端登录到你的 npm 账号：

npm login

按照提示提供你的用户名、密码和邮箱。

执行以下命令发布你的包：

npm publish

这将会将你的包上传到 npm 仓库，并使其对 ...`,l:"server/npm/publish.html#步骤-5-发布包",a:"步骤-5-发布包"},"126.6":{t:"步骤 6：更新和维护",p:`如果你的包需要更新或有新的版本，你可以按照以下步骤进行更新和维护：


在你的项目中，修改代码并增加新的功能或修复 bug。


更新 package.json 文件中的版本号。


执行以下命令发布 ...`,l:"server/npm/publish.html#步骤-6-更新和维护",a:"步骤-6-更新和维护"},"126.7":{t:"步骤 7：使用你的包",p:`其他开发者可以使用以下命令来安装和使用你的包：
npm install &lt;package-name&gt;

将 &lt;package-name&gt; 替换为你的包的名称。
`,l:"server/npm/publish.html#步骤-7-使用你的包",a:"步骤-7-使用你的包"},"127.0":{t:"# yarn 的安装与使用",p:"",l:"server/npm/yarn.html",a:"yarn-的安装与使用"},"127.1":{t:"安装 Yarn",p:`在开始之前，请确保你已经安装了 Node.js。然后，可以按照以下步骤安装 Yarn：
通过包管理器安装 Yarn：
使用 npm（全局安装）： 打开终端并运行以下命令：
npm install -g ...`,l:"server/npm/yarn.html#安装-yarn",a:"安装-yarn"},"127.2":{t:"使用 Yarn",p:`安装 Yarn 后，你可以使用以下常用命令来管理依赖关系和执行其他操作：


初始化项目： 进入你的项目目录，并运行以下命令来初始化项目：
yarn init

这将引导你提供有关项目的一些信息，并生 ...`,l:"server/npm/yarn.html#使用-yarn",a:"使用-yarn"},"128.0":{t:"# 创建uniapp项目",p:"",l:"smallProgram/uniapp/build.html",a:"创建uniapp项目"},"128.1":{t:"使用HBuilder-X创建",p:"",l:"smallProgram/uniapp/build.html#使用hbuilder-x创建",a:"使用hbuilder-x创建"},"128.2":{t:"使用命令行创建",p:`uniapp官网——创建uni-app
`,l:"smallProgram/uniapp/build.html#使用命令行创建",a:"使用命令行创建"},"129.0":{t:"# uniapp",p:"",l:"smallProgram/uniapp/index.html",a:"uniapp"},"130.0":{t:"# 初始 Canvas",p:"",l:"visual/canvas/base/初识Canvas.html",a:"初始-canvas"},"130.1":{t:"什么是 canvas？",p:`
Canvas 是 HTML5 中的一个元素，允许使用 JavaScript 脚本在矩形区域中绘制图像、动画和其他复杂的视觉效果。它提供了许多 API，允许控制绘图区域、颜色、线条、文本、图像等多种元 ...`,l:"visual/canvas/base/初识Canvas.html#什么是-canvas",a:"什么是-canvas"},"130.2":{t:"一. Canvas 的基础知识",p:"",l:"visual/canvas/base/初识Canvas.html#一-canvas-的基础知识",a:"一-canvas-的基础知识"},"130.3":{t:"1.1 坐标系统",p:"Canvas 使用直角坐标系，原点坐标为（0, 0），x 轴向右延伸，y 轴向下延伸。可以通过 Canvas API 访问 x 轴和 y 轴上的位置以及宽度和高度等信息，通过为图形或其他元素设置 x  ...",l:"visual/canvas/base/初识Canvas.html#_1-1-坐标系统",a:"_1-1-坐标系统"},"130.4":{t:"1.2 绘图上下文",p:"Canvas 可以绘制 SVG 和其他类型的矢量图形，但在大多数情况下，使用 Canvas 的绘图上下文进行绘制是最基本和有效的方法。Canvas API 提供了两种基本的绘图上下文，2D 和 Web ...",l:"visual/canvas/base/初识Canvas.html#_1-2-绘图上下文",a:"_1-2-绘图上下文"},"130.5":{t:"1.3 绘图元素",p:"Canvas 提供了多种绘图元素，包括路径和图形、文本、图像、矩形和其他形状等。绘图元素可以通过 Canvas API 进行控制，可以简单地绘制圆形、矩形、线条等图形，也可以绘制更高级的元素，如 3D ...",l:"visual/canvas/base/初识Canvas.html#_1-3-绘图元素",a:"_1-3-绘图元素"},"130.6":{t:"二. 使用 Canvas 创造交互式效果",p:`除了基本的绘图功能之外，Canvas 还可以创造交互式效果，用来展示和操控数据、陈述观点、以及制作各种绚丽的视觉展示等。
例如，您可以通过 Canvas 在一个网页上创造一个交互式地图，让用户点击地图 ...`,l:"visual/canvas/base/初识Canvas.html#二-使用-canvas-创造交互式效果",a:"二-使用-canvas-创造交互式效果"},"130.7":{t:"三. 使用 Canvas 创造动画",p:"由于 Canvas 非常适合处理像素级别的控制，利用 JavaScript 脚本使 Canvas 绘制出具有动态效果的图像和视觉艺术也显得非常合适。通过 Canvas API，您可以控制图形元素的位移 ...",l:"visual/canvas/base/初识Canvas.html#三-使用-canvas-创造动画",a:"三-使用-canvas-创造动画"},"130.8":{t:"四. Canvas 的局限性",p:"Canvas 虽然在 HTML5 中提供了许多优势，但也存在一些限制。例如，不同的浏览器可能解释 Canvas API 时存在差异，因此需要在开发过程中进行跨浏览器的测试。此外，在处理大量的图像和其他 ...",l:"visual/canvas/base/初识Canvas.html#四-canvas-的局限性",a:"四-canvas-的局限性"},"131.0":{t:"# Canvas 图像变换",p:`以下方法用于图像变换。

CanvasRenderingContext2D.rotate()：图像旋转
CanvasRenderingContext2D.scale()：图像缩放
CanvasRend ...`,l:"visual/canvas/base/图像变换.html",a:"canvas-图像变换"},"131.1":{t:"1.rotate()",p:`CanvasRenderingContext2D.rotate()方法用于图像旋转。它接受一个弧度值作为参数，表示顺时针旋转的度数。
context.rotate((45 * Math.PI) / 1 ...`,l:"visual/canvas/base/图像变换.html#_1-rotate",a:"_1-rotate"},"131.2":{t:"2.scale()",p:"CanvasRenderingContext2D.scale()方法用于缩放图像。它接受两个参数，分别是x轴方向的缩放因子和y轴方向的缩放因子。默认情况下，一个单位就是一个像素，缩放因子可以缩放单位， ...",l:"visual/canvas/base/图像变换.html#_2-scale",a:"_2-scale"},"131.3":{t:"3.translate()",p:`CanvasRenderingContext2D.translate()方法用于平移图像。它接受两个参数，分别是 x 轴和 y 轴移动的距离（单位像素）。
context.fillRect(0, 0, ...`,l:"visual/canvas/base/图像变换.html#_3-translate",a:"_3-translate"},"131.4":{t:"4.transform()",p:`CanvasRenderingContext2D.transform()方法接受一个变换矩阵的六个元素作为参数，完成缩放、旋转、移动和倾斜等变形。
它的使用格式如下。
context.transfor ...`,l:"visual/canvas/base/图像变换.html#_4-transform",a:"_4-transform"},"131.5":{t:"5.setTransform()",p:`CanvasRenderingContext2D.setTransform()方法取消前面的图形变换，将画布恢复到该方法指定的状态。该方法的参数与transform()方法完全一致。
context. ...`,l:"visual/canvas/base/图像变换.html#_5-settransform",a:"_5-settransform"},"132.0":{t:"# Canvas 图像合成",p:`
在默认情况之下，如果在 Canvas 之中将某个物体（源）绘制在另一个物体（目标）之上，那么浏览器就会简单地把源特体的图像叠放在目标物体图像上面。


在 Canvas 中，把图像源和目标图像，通过 ...`,l:"visual/canvas/base/图像合成.html",a:"canvas-图像合成"},"132.1":{t:"属性",p:`


source-over
默认。在目标图像上显示源图像。




source-atop
在目标图像顶部显示源图像。源图像位于目标图像之外的部分是不可见的。


source-in
在目标图像中显 ...`,l:"visual/canvas/base/图像合成.html#属性",a:"属性"},"133.0":{t:"# Canvas 使用",p:"",l:"visual/canvas/base/基本使用.html",a:"canvas-使用"},"133.1":{t:"使用",p:"&lt;canvas id=&quot;canvas&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;您的浏览器不支持 Canvas&lt; ...",l:"visual/canvas/base/基本使用.html#使用",a:"使用"},"133.2":{t:"属性方法",p:`
strokeStyle 设置或返回描边颜色
fillStyle 设置或返回填充颜色
stroke() 描边已定义绘图（路径）
fill() 填充当前绘图（路径）
moveTo(x,y) 把路径移动到 ...`,l:"visual/canvas/base/基本使用.html#属性方法",a:"属性方法"},"134.0":{t:"# Canvas 样式控制",p:"",l:"visual/canvas/base/样式控制.html",a:"canvas-样式控制"},"134.1":{t:"1.线性",p:`以下的方法和属性控制线条的视觉特征。

CanvasRenderingContext2D.lineWidth：指定线条的宽度，默认为 1.0。
CanvasRenderingContext2D.lin ...`,l:"visual/canvas/base/样式控制.html#_1-线性",a:"_1-线性"},"134.2":{t:"2.渐变色",p:`以下方法用于设置渐变效果和图像填充效果。

CanvasRenderingContext2D.createLinearGradient()：定义线性渐变样式。
CanvasRenderingConte ...`,l:"visual/canvas/base/样式控制.html#_2-渐变色",a:"_2-渐变色"},"134.3":{t:"3.图像填充",p:`createPattern()方法定义一个图像填充样式，在指定方向上不断重复该图像，填充指定的区域。
context.createPattern(image, repetition)

该方法接受两个 ...`,l:"visual/canvas/base/样式控制.html#_3-图像填充",a:"_3-图像填充"},"134.4":{t:"4.阴影",p:`以下属性用于设置阴影。

CanvasRenderingContext2D.shadowBlur：阴影的模糊程度，默认为0。
CanvasRenderingContext2D.shadowColor： ...`,l:"visual/canvas/base/样式控制.html#_4-阴影",a:"_4-阴影"},"135.0":{t:"# Canvas 状态",p:`
save() 保存当前环境的状态。
restore() 返回之前保存过的路径状态和属性。

context.fillStyle = 'red'
context.fillRect(0, 0, 100, ...`,l:"visual/canvas/base/状态.html",a:"canvas-状态"},"136.0":{t:"# Canvas 绘制图形、图像、文字",p:"",l:"visual/canvas/base/绘制.html",a:"canvas-绘制图形、图像、文字"},"136.1":{t:"绘制图形",p:"",l:"visual/canvas/base/绘制.html#绘制图形",a:"绘制图形"},"136.2":{t:"绘制矩形",p:`//绘制矩形fillRect|strokeRect(位置x，位置y，宽度，高度)
context.strokeRect(150, 50, 100, 100) // 路径
context.fillRec ...`,l:"visual/canvas/base/绘制.html#绘制矩形",a:"绘制矩形"},"136.3":{t:"绘制圆弧",p:`
圆弧

// context.arc(圆心x,圆心y,半径,开始的角度,结束的角度)
// 顺时针false 逆时针true 默认值false
context.arc(300, 200, 50, 0 ...`,l:"visual/canvas/base/绘制.html#绘制圆弧",a:"绘制圆弧"},"136.4":{t:"绘制线段",p:`context.beginPath()
context.moveTo(100, 300)
context.lineTo(300, 300)
context.lineTo(200, 150)
conte ...`,l:"visual/canvas/base/绘制.html#绘制线段",a:"绘制线段"},"136.5":{t:"绘制图像",p:`
三种绘制图片的的方式

context.drawImage(image, dx, dy)
context.drawImage(image, dx, dy, dWidth, dHeight)
cont ...`,l:"visual/canvas/base/绘制.html#绘制图像",a:"绘制图像"},"136.6":{t:"绘制文本",p:`以下方法和属性用于绘制文本。

CanvasRenderingContext2D.fillText()：在指定位置绘制实心字符。
CanvasRenderingContext2D.strokeText ...`,l:"visual/canvas/base/绘制.html#绘制文本",a:"绘制文本"},"137.0":{t:"# Canvas 贝塞尔曲线",p:"",l:"visual/canvas/base/贝塞尔曲线.html",a:"canvas-贝塞尔曲线"},"137.1":{t:"绘制贝塞尔二次曲线",p:`
聊天框

context.moveTo(200, 300)
// quadraticCurveTo(控制点x,控制点y,终点x,终点y)
context.quadraticCurveTo(150,  ...`,l:"visual/canvas/base/贝塞尔曲线.html#绘制贝塞尔二次曲线",a:"绘制贝塞尔二次曲线"},"137.2":{t:"绘制贝塞尔三次曲线",p:`
爱心

context.moveTo(300, 120)
// bezierCurveTo(控制点1 x,控制点1 y,控制点2 x,控制点2 y,终点x,终点y)
context.bezierCu ...`,l:"visual/canvas/base/贝塞尔曲线.html#绘制贝塞尔三次曲线",a:"绘制贝塞尔三次曲线"},"138.0":{t:"# 刮刮乐",p:"",l:"visual/canvas/example/刮刮乐.html",a:"刮刮乐"},"138.1":{t:"示例",p:`&lt;Cbtn text='再来一次' @click='again' /&gt;
&lt;div style='height:400px'&gt;
&lt;Scratchcard v-if='sho ...`,l:"visual/canvas/example/刮刮乐.html#示例",a:"示例"},"138.2":{t:"代码",p:`&lt;div id=&quot;ggk&quot;&gt;谢谢惠顾&lt;/div&gt;
&lt;canvas id=&quot;myCanvas&quot; width=&quot;600&qu ...`,l:"visual/canvas/example/刮刮乐.html#代码",a:"代码"},"139.0":{t:"# 时钟",p:"",l:"visual/canvas/example/时钟.html",a:"时钟"},"139.1":{t:"示例",p:`&lt;Clock /&gt;
`,l:"visual/canvas/example/时钟.html#示例",a:"示例"},"139.2":{t:"代码",p:"",l:"visual/canvas/example/时钟.html#代码",a:"代码"},"139.3":{t:"js 实现",p:`var canvas = document.getElementById('canvas')
var context = canvas.getContext('2d')
function render ...`,l:"visual/canvas/example/时钟.html#js-实现",a:"js-实现"},"139.4":{t:"vue3 实现",p:`&lt;template&gt;
  &lt;div&gt;
    &lt;canvas ref=&quot;canvas&quot; width=&quot;600&quot; height=&q ...`,l:"visual/canvas/example/时钟.html#vue3-实现",a:"vue3-实现"},"140.0":{t:"# 梅花特效",p:`
参考视频教程

`,l:"visual/canvas/example/梅花特效.html",a:"梅花特效"},"140.1":{t:"示例",p:`&lt;Plum /&gt;
`,l:"visual/canvas/example/梅花特效.html#示例",a:"示例"},"140.2":{t:"代码",p:`&lt;template&gt;
  &lt;div&gt;
    &lt;canvas ref=&quot;canvas&quot; width=&quot;600&quot; height=&q ...`,l:"visual/canvas/example/梅花特效.html#代码",a:"代码"},"141.0":{t:"# 画板",p:"",l:"visual/canvas/example/画板.html",a:"画板"},"141.1":{t:"示例",p:`&lt;Draw /&gt;
`,l:"visual/canvas/example/画板.html#示例",a:"示例"},"141.2":{t:"代码",p:"",l:"visual/canvas/example/画板.html#代码",a:"代码"},"141.3":{t:"JS 实现",p:`&lt;button id=&quot;boldBtn&quot;&gt;粗线条&lt;/button&gt;
&lt;button id=&quot;thinBtn&quot;&gt;细线条&lt; ...`,l:"visual/canvas/example/画板.html#js-实现",a:"js-实现"},"141.4":{t:"Vue3 实现",p:`&lt;template&gt;
  &lt;div class=&quot;btns&quot;&gt;
    &lt;CBtn @click=&quot;boldBtn&quot; text=& ...`,l:"visual/canvas/example/画板.html#vue3-实现",a:"vue3-实现"},"142.0":{t:"<!-- # echarts -->",p:`该内容正在努力建设中 ......
`,l:"visual/echarts/index.html",a:"echarts"},"143.0":{t:"# PixiJs 事件交互",p:"",l:"visual/pixiJs/事件交互.html",a:"pixijs-事件交互"},"143.1":{t:"为精灵添加事件",p:`// 为精灵添加交互事件
sprite.interactive = true

// 精灵派加点击事件
sprite.on('click', (e) =&gt; {
  console.log(e,  ...`,l:"visual/pixiJs/事件交互.html#为精灵添加事件",a:"为精灵添加事件"},"143.2":{t:"为图形添加事件",p:`// 创建矩形
const rect = new PIXI.Graphics()
rect.beginFill(0xff0000)
rect.drawRect(300, 300, 150, 150)
 ...`,l:"visual/pixiJs/事件交互.html#为图形添加事件",a:"为图形添加事件"},"144.0":{t:"# 初识 PixiJs",p:`官方网站
`,l:"visual/pixiJs/初识PixiJs.html",a:"初识-pixijs"},"144.1":{t:"是什么",p:`
PixiJS 是一个基于 WebGL 和 Canvas 技术的快速、轻量级的 JavaScript 库，用于创建交互式 2D 图形和动画。它提供了简单易用的 API 和强大的渲染能力，使开发者能够轻 ...`,l:"visual/pixiJs/初识PixiJs.html#是什么",a:"是什么"},"144.2":{t:"特点",p:"",l:"visual/pixiJs/初识PixiJs.html#特点",a:"特点"},"144.3":{t:"1. 快速高效",p:`PixiJS 利用 WebGL 技术进行硬件加速渲染，能够处理大量的图形元素并实现流畅的动画效果。它还支持使用 Canvas 进行降级渲染，以确保在不支持 WebGL 的设备上也能正常运行。
`,l:"visual/pixiJs/初识PixiJs.html#_1-快速高效",a:"_1-快速高效"},"144.4":{t:"2. 简单易用",p:`PixiJS 提供了简洁而直观的 API，使开发者能够快速上手并高效地创建图形和动画。它具有一致的接口设计和详细的文档，方便开发者查阅和学习。
`,l:"visual/pixiJs/初识PixiJs.html#_2-简单易用",a:"_2-简单易用"},"144.5":{t:"3. 丰富的功能",p:`PixiJS 提供了一系列强大的功能，包括精灵(Sprite)、纹理(Texture)、滤镜(Filters)、事件处理等。开发者可以通过组合这些功能来创建复杂的交互式图形界面和游戏。
`,l:"visual/pixiJs/初识PixiJs.html#_3-丰富的功能",a:"_3-丰富的功能"},"144.6":{t:"4. 跨平台支持",p:`PixiJS 可以在现代浏览器上运行，并提供了针对移动设备的优化。它支持响应式设计，使开发者能够创建适应不同屏幕大小和分辨率的应用。
`,l:"visual/pixiJs/初识PixiJs.html#_4-跨平台支持",a:"_4-跨平台支持"},"144.7":{t:"用法示例",p:`下面是一个简单的 PixiJS 示例，展示了如何创建一个基本的场景并添加一个可交互的精灵：
// 创建一个场景
let app = new PIXI.Application({ width: 800, ...`,l:"visual/pixiJs/初识PixiJs.html#用法示例",a:"用法示例"},"145.0":{t:"# PixiJs 基本使用",p:"",l:"visual/pixiJs/基本使用.html",a:"pixijs-基本使用"},"145.1":{t:"使用",p:`&lt;template&gt;
  &lt;div&gt;&lt;/div&gt;
&lt;/template&gt;



`,l:"visual/pixiJs/基本使用.html#使用",a:"使用"},"145.2":{t:"Graphics 类详解",p:`// 导入pixi
import as PIXI from &quot;pixi.js&quot;;

// 创建应用
const app = new PIXI.Application({
	widt ...`,l:"visual/pixiJs/基本使用.html#graphics-类详解",a:"graphics-类详解"},"146.0":{t:"# PixiJs 文字与遮罩",p:"",l:"visual/pixiJs/文字与遮罩.html",a:"pixijs-文字与遮罩"},"146.1":{t:"添加文字",p:`// 导入pixi
import * as PIXI from &quot;pixi.js&quot;;

// 创建应用
const app = new PIXI.Application({
	wi ...`,l:"visual/pixiJs/文字与遮罩.html#添加文字",a:"添加文字"},"146.2":{t:"使用文字作为精灵的遮罩",p:`// 创建一个精灵
const sprite = PIXI.Sprite.from(
  'https://pic.rmb.bdstatic.com/05b0ea405c9e690ab51627853 ...`,l:"visual/pixiJs/文字与遮罩.html#使用文字作为精灵的遮罩",a:"使用文字作为精灵的遮罩"},"147.0":{t:"# 波纹涟漪效果",p:"",l:"visual/pixiJs/波纹涟漪效果.html",a:"波纹涟漪效果"},"147.1":{t:"代码",p:`&lt;template&gt;
  &lt;div&gt;&lt;/div&gt;
&lt;/template&gt;



`,l:"visual/pixiJs/波纹涟漪效果.html#代码",a:"代码"},"148.0":{t:"# PixiJs 滤镜特效",p:"",l:"visual/pixiJs/滤镜特效.html",a:"pixijs-滤镜特效"},"148.1":{t:"创建应用",p:`// 导入pixi
import * as PIXI from &quot;pixi.js&quot;;

// 创建应用
const app = new PIXI.Application({
	wi ...`,l:"visual/pixiJs/滤镜特效.html#创建应用",a:"创建应用"},"148.2":{t:"添加滤镜",p:`// 创建模糊滤镜
const blurFilter = new PIXI.BlurFilter()
// 设置模糊滤镜的模糊程度
blurFilter.blur = 10
// 将模糊滤镜添加到精灵 ...`,l:"visual/pixiJs/滤镜特效.html#添加滤镜",a:"添加滤镜"},"148.3":{t:"使用 pixi-filters 库",p:`npm install pixi-filters

// 创建轮廓滤镜
const outlineFilter = new OutlineFilter(5, 0xffff00) // 轮廓宽度，颜色
 ...`,l:"visual/pixiJs/滤镜特效.html#使用-pixi-filters-库",a:"使用-pixi-filters-库"},"149.0":{t:"# PixiJs 精灵与动画",p:"",l:"visual/pixiJs/精灵与动画.html",a:"pixijs-精灵与动画"},"149.1":{t:"1.创建应用",p:`// 导入pixi
import as PIXI from &quot;pixi.js&quot;;

// 创建应用
const app = new PIXI.Application({
	widt ...`,l:"visual/pixiJs/精灵与动画.html#_1-创建应用",a:"_1-创建应用"},"149.2":{t:"2.创建纹理与精灵",p:`// 创建一个纹理
const texture = PIXI.Texture.from('./vite.svg')

// 创建一个精灵
const sprite = new PIXI.Sprite( ...`,l:"visual/pixiJs/精灵与动画.html#_2-创建纹理与精灵",a:"_2-创建纹理与精灵"},"149.3":{t:"3.设置属性",p:`// 锚点
sprite.anchor.set(0.5, 0.5)

// 设置位置
sprite.x = app.screen.width / 2
sprite.y = app.screen.hei ...`,l:"visual/pixiJs/精灵与动画.html#_3-设置属性",a:"_3-设置属性"},"149.4":{t:"4.实现动画",p:`// ticker 实现动画
app.ticker.add((delta) =&gt; {
  sprite.rotation += 0.01 delta
})

`,l:"visual/pixiJs/精灵与动画.html#_4-实现动画",a:"_4-实现动画"},"150.0":{t:"# PixiJs 绘制图形",p:"",l:"visual/pixiJs/绘制图形.html",a:"pixijs-绘制图形"},"150.1":{t:"绘制椭圆",p:`const ellipse = new PIXI.Graphics()
ellipse.beginFill(0x66ccff)
ellipse.drawEllipse(0, 0, 164, 64)
e ...`,l:"visual/pixiJs/绘制图形.html#绘制椭圆",a:"绘制椭圆"},"150.2":{t:"绘制多边形",p:`const polygon = new PIXI.Graphics()
polygon.beginFill(0x660000)
// 参数一个数组，数组中的每一个元素是一个点的坐标，每两个元素是一个点 ...`,l:"visual/pixiJs/绘制图形.html#绘制多边形",a:"绘制多边形"},"150.3":{t:"创建圆角矩形",p:`const roundedRectangle = new PIXI.Graphics()
roundedRectangle.beginFill(0x66ccff, 0.9)

// 绘制圆角矩形 x  ...`,l:"visual/pixiJs/绘制图形.html#创建圆角矩形",a:"创建圆角矩形"},"150.4":{t:"绘制圆弧",p:`const arc = new PIXI.Graphics()
arc.beginFill(0x660000)
// arc(x坐标,y坐标,半径,其实角度,结束角度,顺/逆时针)
arc.arc(0 ...`,l:"visual/pixiJs/绘制图形.html#绘制圆弧",a:"绘制圆弧"},"150.5":{t:"绘制线段",p:`const line = new PIXI.Graphics()
line.lineStyle(10, 0x660000, 0.6) // 宽度，颜色，透明度
line.moveTo(0, 0)
li ...`,l:"visual/pixiJs/绘制图形.html#绘制线段",a:"绘制线段"},"151.0":{t:"# 谷歌恐龙小游戏",p:"",l:"visual/pixiJs/谷歌恐龙小游戏.html",a:"谷歌恐龙小游戏"},"151.1":{t:"素材图片",p:`!谷歌恐龙小游戏素材
`,l:"visual/pixiJs/谷歌恐龙小游戏.html#素材图片",a:"素材图片"},"151.2":{t:"代码",p:`&lt;template&gt;
  &lt;div&gt;app&lt;/div&gt;
&lt;/template&gt;



`,l:"visual/pixiJs/谷歌恐龙小游戏.html#代码",a:"代码"},"152.0":{t:"# PixiJs 资源管理",p:`
PIXI.Assets用于加载资源
使用PIXI.Container创建容器，对多个资源分组，设置容器属性即可应用到容器内的精灵

`,l:"visual/pixiJs/资源管理.html",a:"pixijs-资源管理"},"152.1":{t:"单次添加资源",p:`// 导入pixi
import as PIXI from &quot;pixi.js&quot;;

// 创建应用
const app = new PIXI.Application({
	widt ...`,l:"visual/pixiJs/资源管理.html#单次添加资源",a:"单次添加资源"},"152.2":{t:"一次添加多个资源",p:`// 导入pixi
import as PIXI from &quot;pixi.js&quot;;

// 创建应用
const app = new PIXI.Application({
	widt ...`,l:"visual/pixiJs/资源管理.html#一次添加多个资源",a:"一次添加多个资源"},"153.0":{t:"# SVG",p:"",l:"visual/svg/index.html",a:"svg"},"153.1":{t:"是什么",p:`
SVG 是 Scalable Vector Graphics 的缩写 意为可缩放矢量图形
SVG 是一个基于文本的开放网络标准，用来定义用于网络的矢量图形
SVG 图像在放大或改变尺寸的情况下其图形 ...`,l:"visual/svg/index.html#是什么",a:"是什么"},"153.2":{t:"基本图形",p:"",l:"visual/svg/index.html#基本图形",a:"基本图形"},"153.3":{t:"线条（line）",p:`&lt;svg&gt;
  &lt;!-- 不设置样式属性 style 是看不出效果的 --&gt;
  &lt;line x1=&quot;50&quot; x2=&quot;50&quot; y1 ...`,l:"visual/svg/index.html#线条-line",a:"线条-line"},"153.4":{t:"矩形（rect）",p:`&lt;svg&gt;
  &lt;rect x=&quot;400&quot; y=&quot;200&quot; width=&quot;150&quot; height=&quot;50&quo ...`,l:"visual/svg/index.html#矩形-rect",a:"矩形-rect"},"153.5":{t:"圆形（circle）",p:`&lt;svg&gt;
  &lt;circle cx=&quot;370&quot; cy=&quot;95&quot; r=&quot;50&quot; style=&quot;stroke:gr ...`,l:"visual/svg/index.html#圆形-circle",a:"圆形-circle"},"153.6":{t:"椭圆（cllipse）",p:`&lt;svg&gt;
  &lt;ellipse cx=&quot;100&quot; cy=&quot;100&quot; rx=&quot;100&quot; ry=&quot;50&quot; ...`,l:"visual/svg/index.html#椭圆-cllipse",a:"椭圆-cllipse"},"153.7":{t:"多边形（polygon）",p:`&lt;svg&gt;
  &lt;!-- 不设置样式属性style是看不出效果的 并且polygon默认为填充需要把fill属性设置为none --&gt;
  &lt;polygon
    po ...`,l:"visual/svg/index.html#多边形-polygon",a:"多边形-polygon"},"153.8":{t:"折线（polyline）",p:`&lt;svg&gt;
  &lt;polyline points=&quot;300 300,50 100,120 300,200,30&quot; fill-opacity=&quot;0&quo ...`,l:"visual/svg/index.html#折线-polyline",a:"折线-polyline"},"153.9":{t:"路径（path）",p:`&lt;svg&gt;
  &lt;path
    fill-opacity=&quot;0&quot;
    stroke=&quot;skyblue&quot;
    d=&quot;
   ...`,l:"visual/svg/index.html#路径-path",a:"路径-path"},"154.0":{t:"# 初识 ThreeJs",p:`
Three.js 学习指南
Three.js 中文官方文档

Three.js 是一种用于在 Web 浏览器中创建交互式 3D 图形的 JavaScript 库。它允许开发人员在 Web 应用程序中 ...`,l:"visual/threejs/base/index.html",a:"初识-threejs"},"155.0":{t:"# 渲染场景和物体",p:`

`,l:"visual/threejs/base/渲染场景和物体.html",a:"渲染场景和物体"},"155.1":{t:"渲染第一个场景和物体",p:"",l:"visual/threejs/base/渲染场景和物体.html#渲染第一个场景和物体",a:"渲染第一个场景和物体"},"155.2":{t:"示例",p:`&lt;Scene1 /&gt;
`,l:"visual/threejs/base/渲染场景和物体.html#示例",a:"示例"},"155.3":{t:"代码",p:`:::code-group
&lt;&lt;&lt; @/visual/threejs/components/Scene1.vue[完整代码]
:::
`,l:"visual/threejs/base/渲染场景和物体.html#代码",a:"代码"},"155.4":{t:"轨道控制器查看物体",p:"",l:"visual/threejs/base/渲染场景和物体.html#轨道控制器查看物体",a:"轨道控制器查看物体"},"155.5":{t:"示例",p:`&lt;Scene2 /&gt;
`,l:"visual/threejs/base/渲染场景和物体.html#示例",a:"示例"},"155.6":{t:"导入轨道控制器",p:`import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'

`,l:"visual/threejs/base/渲染场景和物体.html#导入轨道控制器",a:"导入轨道控制器"},"155.7":{t:"创建轨道控制器",p:`// 创建轨道控制器
const controls = new OrbitControls(camera, renderer.domElement)

`,l:"visual/threejs/base/渲染场景和物体.html#创建轨道控制器",a:"创建轨道控制器"},"155.8":{t:"每一帧根据控制器更新画面",p:`function render() {
  //如果后期需要控制器带有阻尼效果，或者自动旋转等效果，就需要加入controls.update()
  controls.update()
  rende ...`,l:"visual/threejs/base/渲染场景和物体.html#每一帧根据控制器更新画面",a:"每一帧根据控制器更新画面"},"155.9":{t:"代码",p:`:::code-group
&lt;&lt;&lt; @/visual/threejs/components/Scene2.vue#snippet{js}[示例]
&lt;&lt;&lt; @/vis ...`,l:"visual/threejs/base/渲染场景和物体.html#代码",a:"代码"},"155.10":{t:"坐标轴辅助器",p:"",l:"visual/threejs/base/渲染场景和物体.html#坐标轴辅助器",a:"坐标轴辅助器"},"155.11":{t:"示例",p:`&lt;Scene /&gt;
`,l:"visual/threejs/base/渲染场景和物体.html#示例",a:"示例"},"155.12":{t:"代码",p:`:::code-group
&lt;&lt;&lt; @/visual/threejs/components/Scene.vue#snippet{js}[示例]
&lt;&lt;&lt; @/visu ...`,l:"visual/threejs/base/渲染场景和物体.html#代码",a:"代码"},"156.0":{t:"# 物体的缩放、位移和旋转",p:`

`,l:"visual/threejs/base/缩放、位移和旋转.html",a:"物体的缩放、位移和旋转"},"156.1":{t:"缩放",p:`//例如设置x轴放大3倍、y轴方向放大2倍、z轴方向不变
cube.scale.set(3, 2, 1)
//单独设置某个轴的缩放
cube.scale.x = 3

`,l:"visual/threejs/base/缩放、位移和旋转.html#缩放",a:"缩放"},"156.2":{t:"位移",p:`cube.position.set(1, 2, 3)

//单独设置某个轴的位移
cube.position.x = 3

`,l:"visual/threejs/base/缩放、位移和旋转.html#位移",a:"位移"},"156.3":{t:"旋转",p:`//直接设置旋转属性，例如围绕x轴旋转90度
cube.rotation.x = -Math.PI / 4

//围绕x轴旋转45度
cube.rotation.set(-Math.PI / 4, 0 ...`,l:"visual/threejs/base/缩放、位移和旋转.html#旋转",a:"旋转"},"156.4":{t:"效果",p:`&lt;transForm /&gt;
`,l:"visual/threejs/base/缩放、位移和旋转.html#效果",a:"效果"},"156.5":{t:"代码",p:`:::code-group
&lt;&lt;&lt; @/visual/threejs/components/transForm.vue{45-58,77-87 vue:line-numbers}[完 ...`,l:"visual/threejs/base/缩放、位移和旋转.html#代码",a:"代码"},"157.0":{t:"# VitePress 从 0 开始搭建个人网站",p:`
lemon's blog 从无到有的过程
VitePress 官方网站
VitePress 中文网

`,l:"vitepress.html",a:"vitepress-从-0-开始搭建个人网站"},"157.1":{t:"一、 创建项目",p:`

在 gitbub 上新建项目，建议勾选 Add a README file


新建文件夹 blog
可以使用 npm，yarn，pnpm


`,l:"vitepress.html#一、-创建项目",a:"一、-创建项目"},"157.2":{t:"初始化项目",p:`npm init -y


安装 vitepress

yarn add --dev vitepress vue


package.json 添加 script

&quot;scripts&quo ...`,l:"vitepress.html#初始化项目",a:"初始化项目"},"157.3":{t:"npx 创建项目",p:`npx create-vitepress my-site

cd my-site
npm install  或 yarn install
npm run dev  或 yarn dev

`,l:"vitepress.html#npx-创建项目",a:"npx-创建项目"},"157.4":{t:"本地运行",p:`
运行

yarn docs:dev


打包

yarn docs:build

!img
`,l:"vitepress.html#本地运行",a:"本地运行"},"157.5":{t:"二、 基本配置",p:"",l:"vitepress.html#二、-基本配置",a:"二、-基本配置"},"157.6":{t:"目录结构",p:"在目录下新建 docs 文件夹，在其中新建.vitepress 文件夹和 config.js 文件，config.js 文件就是我们的配置文件，新建一个 index.html 作为我们的主页，在新建一 ...",l:"vitepress.html#目录结构",a:"目录结构"},"157.7":{t:"1. 配置首页",p:`vitepress 支持用户使用 yaml 配置页面的内容，在 docs/index.html 写下如下内容，更多配置请查看
---
layout: home

title: 选项卡标题
titleT ...`,l:"vitepress.html#_1-配置首页",a:"_1-配置首页"},"157.8":{t:"2. 配置网站",p:"",l:"vitepress.html#_2-配置网站",a:"_2-配置网站"},"157.9":{t:"配置导航栏部分",p:`在 config.js 中可以开始我们的配置，先写上如下内容，这是网站的标题和描述，标题会在浏览器标签上展示
export default defineConfig({
  base: '/docs/ ...`,l:"vitepress.html#配置导航栏部分",a:"配置导航栏部分"},"157.10":{t:"配置侧边栏部分",p:`themeConfig: {
  // ...省略前面的内容
  // 侧边栏
  sidebar: {
    &quot;/articles/other&quot;: [
      {
     ...`,l:"vitepress.html#配置侧边栏部分",a:"配置侧边栏部分"},"157.11":{t:"三、 部署到 github.io",p:`新建脚本文件 deploy.sh，与 docs 文件夹处于同一级
#!/usr/bin/env sh

# 确保脚本抛出遇到的错误
set -e

# 生成静态文件
yarn docs:build

 ...`,l:"vitepress.html#三、-部署到-github-io",a:"三、-部署到-github-io"}},n={previewLength:100,buttonLabel:"搜索",placeholder:"情输入关键词",allow:[],ignore:[]},a={INDEX_DATA:t,PREVIEW_LOOKUP:e,Options:n};export{a as default};
